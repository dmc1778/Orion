"
class mxnet.ndarray.CachedOp(sym, flags=())[source]Â¶","['Bases: ', 'object', '\n', 'Cached operator handle.', '\n', '\n']"
"
mxnet.ndarray.Activation(data=None, act_type=_Null, out=None, name=None, **kwargs)Â¶","['Applies an activation function element-wise to the input.', '\n', 'The following activation functions are supported:', '\n', '\n', 'relu', '\n', 'sigmoid', '\n', 'tanh', '\n', 'softrelu', '\n', 'softsign', '\n', '\n', 'Defined in src/operator/nn/activation.cc:L164', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.BatchNorm(data=None, gamma=None, beta=None, moving_mean=None, moving_var=None, eps=_Null, momentum=_Null, fix_gamma=_Null, use_global_stats=_Null, output_mean_var=_Null, axis=_Null, cudnn_off=_Null, min_calib_range=_Null, max_calib_range=_Null, out=None, name=None, **kwargs)Â¶","['Batch normalization.', '\n', 'Normalizes a data batch by mean and variance, and applies a scale ', 'gamma', ' as\nwell as offset ', 'beta', '.', '\n', 'Assume the input has more than one dimension and we normalize along axis 1.\nWe first compute the mean and variance along this axis:', '\n', '\n\\[\\begin{split}data\\_mean[i] = mean(data[:,i,:,...]) \\\\\ndata\\_var[i] = var(data[:,i,:,...])\\end{split}\\]', '\n', 'Then compute the normalized output, which has the same shape as input, as following:', '\n', '\n\\[out[:,i,:,...] = \\frac{data[:,i,:,...] - data\\_mean[i]}{\\sqrt{data\\_var[i]+\\epsilon}} * gamma[i] + beta[i]\\]', '\n', 'Both ', 'mean', ' and ', 'var', ' returns a scalar by treating the input as a vector.', '\n', 'Assume the input has size ', 'k', ' on axis 1, then both ', 'gamma', ' and ', 'beta', '\nhave shape ', '(k,)', '. If ', 'output_mean_var', ' is set to be true, then outputs both ', 'data_mean', ' and\nthe inverse of ', 'data_var', ', which are needed for the backward pass. Note that gradient of these\ntwo outputs are blocked.', '\n', 'Besides the inputs and the outputs, this operator accepts two auxiliary\nstates, ', 'moving_mean', ' and ', 'moving_var', ', which are ', 'k', '-length\nvectors. They are global statistics for the whole dataset, which are updated\nby:', '\n', None, '\n', '\n', 'If ', 'use_global_stats', ' is set to be true, then ', 'moving_mean', ' and\n', 'moving_var', ' are used instead of ', 'data_mean', ' and ', 'data_var', ' to compute\nthe output. It is often used during inference.', '\n', 'The parameter ', 'axis', ' specifies which axis of the input shape denotes\nthe â\x80\x98channelâ\x80\x99 (separately normalized groups).  The default is 1.  Specifying -1 sets the channel\naxis to be the last item in the input shape.', '\n', 'Both ', 'gamma', ' and ', 'beta', ' are learnable parameters. But if ', 'fix_gamma', ' is true,\nthen set ', 'gamma', ' to 1 and its gradient to 0.', '\n', '\n', 'Note', '\n', 'When ', '\n', '\n', 'Defined in src/operator/nn/batch_norm.cc:L608', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.BatchNorm_v1(data=None, gamma=None, beta=None, eps=_Null, momentum=_Null, fix_gamma=_Null, use_global_stats=_Null, output_mean_var=_Null, out=None, name=None, **kwargs)Â¶","['Batch normalization.', '\n', 'This operator is DEPRECATED. Perform BatchNorm on the input.', '\n', 'Normalizes a data batch by mean and variance, and applies a scale ', 'gamma', ' as\nwell as offset ', 'beta', '.', '\n', 'Assume the input has more than one dimension and we normalize along axis 1.\nWe first compute the mean and variance along this axis:', '\n', '\n\\[\\begin{split}data\\_mean[i] = mean(data[:,i,:,...]) \\\\\ndata\\_var[i] = var(data[:,i,:,...])\\end{split}\\]', '\n', 'Then compute the normalized output, which has the same shape as input, as following:', '\n', '\n\\[out[:,i,:,...] = \\frac{data[:,i,:,...] - data\\_mean[i]}{\\sqrt{data\\_var[i]+\\epsilon}} * gamma[i] + beta[i]\\]', '\n', 'Both ', 'mean', ' and ', 'var', ' returns a scalar by treating the input as a vector.', '\n', 'Assume the input has size ', 'k', ' on axis 1, then both ', 'gamma', ' and ', 'beta', '\nhave shape ', '(k,)', '. If ', 'output_mean_var', ' is set to be true, then outputs both ', 'data_mean', ' and\n', 'data_var', ' as well, which are needed for the backward pass.', '\n', 'Besides the inputs and the outputs, this operator accepts two auxiliary\nstates, ', 'moving_mean', ' and ', 'moving_var', ', which are ', 'k', '-length\nvectors. They are global statistics for the whole dataset, which are updated\nby:', '\n', None, '\n', '\n', 'If ', 'use_global_stats', ' is set to be true, then ', 'moving_mean', ' and\n', 'moving_var', ' are used instead of ', 'data_mean', ' and ', 'data_var', ' to compute\nthe output. It is often used during inference.', '\n', 'Both ', 'gamma', ' and ', 'beta', ' are learnable parameters. But if ', 'fix_gamma', ' is true,\nthen set ', 'gamma', ' to 1 and its gradient to 0.', '\n', 'Thereâ\x80\x99s no sparse support for this operator, and it will exhibit problematic behavior if used with\nsparse tensors.', '\n', 'Defined in src/operator/batch_norm_v1.cc:L94', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.BilinearSampler(data=None, grid=None, cudnn_off=_Null, out=None, name=None, **kwargs)Â¶","['Applies bilinear sampling to input feature map.', '\n', 'Bilinear Sampling is the key of  [NIPS2015] â\x80\x9cSpatial Transformer Networksâ\x80\x9d. The usage of the operator is very similar to remap function in OpenCV,\nexcept that the operator has the backward pass.', '\n', 'Given ', '\\(data\\)', ' and ', '\\(grid\\)', ', then the output is computed by', '\n', '\n\\[\\begin{split}x_{src} = grid[batch, 0, y_{dst}, x_{dst}] \\\\\ny_{src} = grid[batch, 1, y_{dst}, x_{dst}] \\\\\noutput[batch, channel, y_{dst}, x_{dst}] = G(data[batch, channel, y_{src}, x_{src})\\end{split}\\]', '\n', '\\(x_{dst}\\)', ', ', '\\(y_{dst}\\)', ' enumerate all spatial locations in ', '\\(output\\)', ', and ', '\\(G()\\)', ' denotes the bilinear interpolation kernel.\nThe out-boundary points will be padded with zeros.The shape of the output will be (data.shape[0], data.shape[1], grid.shape[2], grid.shape[3]).', '\n', 'The operator assumes that ', '\\(data\\)', ' has â\x80\x98NCHWâ\x80\x99 layout and ', '\\(grid\\)', ' has been normalized to [-1, 1].', '\n', 'BilinearSampler often cooperates with GridGenerator which generates sampling grids for BilinearSampler.\nGridGenerator supports two kinds of transformation: ', 'affine', ' and ', 'warp', '.\nIf users want to design a CustomOp to manipulate ', '\\(grid\\)', ', please firstly refer to the code of GridGenerator.', '\n', 'Example 1:', '\n', None, '\n', '\n', 'Example 2:', '\n', None, '\n', '\n', 'Defined in src/operator/bilinear_sampler.cc:L255', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.BlockGrad(data=None, out=None, name=None, **kwargs)Â¶","['Stops gradient computation.', '\n', 'Stops the accumulated gradient of the inputs from flowing through this operator\nin the backward direction. In other words, this operator prevents the contribution\nof its inputs to be taken into account for computing gradients.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L325', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.CTCLoss(data=None, label=None, data_lengths=None, label_lengths=None, use_data_lengths=_Null, use_label_lengths=_Null, blank_label=_Null, out=None, name=None, **kwargs)Â¶","['Connectionist Temporal Classification Loss.', '\n', '\n', 'Note', '\n', 'The existing alias ', '\n', '\n', 'The shapes of the inputs and outputs:', '\n', '\n', 'data', '\n', 'label', '\n', 'out', '\n', '\n', 'The ', 'data', ' tensor consists of sequences of activation vectors (without applying softmax),\nwith i-th channel in the last dimension corresponding to i-th label\nfor i between 0 and alphabet_size-1 (i.e always 0-indexed).\nAlphabet size should include one additional value reserved for blank label.\nWhen ', 'blank_label', ' is ', '""first""', ', the ', '0', '-th channel is be reserved for\nactivation of blank label, or otherwise if it is â\x80\x9clastâ\x80\x9d, ', '(alphabet_size-1)', '-th channel should be\nreserved for blank label.', '\n', 'label', ' is an index matrix of integers. When ', 'blank_label', ' is ', '""first""', ',\nthe value 0 is then reserved for blank label, and should not be passed in this matrix. Otherwise,\nwhen ', 'blank_label', ' is ', '""last""', ', the value ', '(alphabet_size-1)', ' is reserved for blank label.', '\n', 'If a sequence of labels is shorter than ', 'label_sequence_length', ', use the special\npadding value at the end of the sequence to conform it to the correct\nlength. The padding value is ', '0', ' when ', 'blank_label', ' is ', '""first""', ', and ', '-1', ' otherwise.', '\n', 'For example, suppose the vocabulary is ', '[a, b, c]', ', and in one batch we have three sequences\nâ\x80\x98baâ\x80\x99, â\x80\x98cbbâ\x80\x99, and â\x80\x98abacâ\x80\x99. When ', 'blank_label', ' is ', '""first""', ', we can index the labels as\n', '{â\x80\x98aâ\x80\x99: 1, â\x80\x98bâ\x80\x99: 2, â\x80\x98câ\x80\x99: 3}', ', and we reserve the 0-th channel for blank label in data tensor.\nThe resulting ', 'label', ' tensor should be padded to be:', '\n', None, '\n', '\n', 'When ', 'blank_label', ' is ', '""last""', ', we can index the labels as\n', '{â\x80\x98aâ\x80\x99: 0, â\x80\x98bâ\x80\x99: 1, â\x80\x98câ\x80\x99: 2}', ', and we reserve the channel index 3 for blank label in data tensor.\nThe resulting ', 'label', ' tensor should be padded to be:', '\n', None, '\n', '\n', 'out', ' is a list of CTC loss values, one per example in the batch.', '\n', 'See ', 'Connectionist Temporal Classification: Labelling Unsegmented\nSequence Data with Recurrent Neural Networks', ', A. Graves ', 'et al', '. for more\ninformation on the definition and the algorithm.', '\n', 'Defined in src/operator/nn/ctc_loss.cc:L100', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.Cast(data=None, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Casts all elements of the input to a new type.', '\n', '\n', 'Note', '\n', 'Cast', '\n', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L664', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.Concat(*data, **kwargs)Â¶","['Joins input arrays along a given axis.', '\n', '\n', 'Note', '\n', 'Concat', '\n', '\n', 'The dimensions of the input arrays should be the same except the axis along\nwhich they will be concatenated.\nThe dimension of the output array along the concatenated axis will be equal\nto the sum of the corresponding dimensions of the input arrays.', '\n', 'The storage type of ', 'concat', ' output depends on storage types of inputs', '\n', '\n', 'concat(csr, csr, â\x80¦, csr, dim=0) = csr', '\n', 'otherwise, ', '\n', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/nn/concat.cc:L384', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.Convolution(data=None, weight=None, bias=None, kernel=_Null, stride=_Null, dilate=_Null, pad=_Null, num_filter=_Null, num_group=_Null, workspace=_Null, no_bias=_Null, cudnn_tune=_Null, cudnn_off=_Null, layout=_Null, out=None, name=None, **kwargs)Â¶","['Compute ', 'N', '-D convolution on ', '(N+2)', '-D input.', '\n', 'In the 2-D convolution, given input data with shape ', '(batch_size,\nchannel, height, width)', ', the output is computed by', '\n', '\n\\[out[n,i,:,:] = bias[i] + \\sum_{j=0}^{channel} data[n,j,:,:] \\star\nweight[i,j,:,:]\\]', '\n', 'where ', '\\(\\star\\)', ' is the 2-D cross-correlation operator.', '\n', 'For general 2-D convolution, the shapes are', '\n', '\n', 'data', '\n', 'weight', '\n', 'bias', '\n', 'out', '\n', '\n', 'Define:', '\n', None, '\n', '\n', 'then we have:', '\n', None, '\n', '\n', 'If ', 'no_bias', ' is set to be true, then the ', 'bias', ' term is ignored.', '\n', 'The default data ', 'layout', ' is ', 'NCHW', ', namely ', '(batch_size, channel, height,\nwidth)', '. We can choose other layouts such as ', 'NWC', '.', '\n', 'If ', 'num_group', ' is larger than 1, denoted by ', 'g', ', then split the input ', 'data', '\nevenly into ', 'g', ' parts along the channel axis, and also evenly split ', 'weight', '\nalong the first dimension. Next compute the convolution on the ', 'i', '-th part of\nthe data with the ', 'i', '-th weight part. The output is obtained by concatenating all\nthe ', 'g', ' results.', '\n', '1-D convolution does not have ', 'height', ' dimension but only ', 'width', ' in space.', '\n', '\n', 'data', '\n', 'weight', '\n', 'bias', '\n', 'out', '\n', '\n', '3-D convolution adds an additional ', 'depth', ' dimension besides ', 'height', ' and\n', 'width', '. The shapes are', '\n', '\n', 'data', '\n', 'weight', '\n', 'bias', '\n', 'out', '\n', '\n', 'Both ', 'weight', ' and ', 'bias', ' are learnable parameters.', '\n', 'There are other options to tune the performance.', '\n', '\n', 'cudnn_tune', '\n', 'workspace', '\n', '\n', 'Defined in src/operator/nn/convolution.cc:L475', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.Convolution_v1(data=None, weight=None, bias=None, kernel=_Null, stride=_Null, dilate=_Null, pad=_Null, num_filter=_Null, num_group=_Null, workspace=_Null, no_bias=_Null, cudnn_tune=_Null, cudnn_off=_Null, layout=_Null, out=None, name=None, **kwargs)Â¶","['This operator is DEPRECATED. Apply convolution to input then add a bias.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.Correlation(data1=None, data2=None, kernel_size=_Null, max_displacement=_Null, stride1=_Null, stride2=_Null, pad_size=_Null, is_multiply=_Null, out=None, name=None, **kwargs)Â¶","['Applies correlation to inputs.', '\n', 'The correlation layer performs multiplicative patch comparisons between two feature maps.', '\n', 'Given two multi-channel feature maps ', '\\(f_{1}, f_{2}\\)', ', with ', '\\(w\\)', ', ', '\\(h\\)', ', and ', '\\(c\\)', ' being their width, height, and number of channels,\nthe correlation layer lets the network compare each patch from ', '\\(f_{1}\\)', ' with each patch from ', '\\(f_{2}\\)', '.', '\n', 'For now we consider only a single comparison of two patches. The â\x80\x98correlationâ\x80\x99 of two patches centered at ', '\\(x_{1}\\)', ' in the first map and\n', '\\(x_{2}\\)', ' in the second map is then defined as:', '\n', '\n\\[c(x_{1}, x_{2}) = \\sum_{o \\in [-k,k] \\times [-k,k]} <f_{1}(x_{1} + o), f_{2}(x_{2} + o)>\\]', '\n', 'for a square patch of size ', '\\(K:=2k+1\\)', '.', '\n', 'Note that the equation above is identical to one step of a convolution in neural networks, but instead of convolving data with a filter, it convolves data with other\ndata. For this reason, it has no training weights.', '\n', 'Computing ', '\\(c(x_{1}, x_{2})\\)', ' involves ', '\\(c * K^{2}\\)', ' multiplications. Comparing all patch combinations involves ', '\\(w^{2}*h^{2}\\)', ' such computations.', '\n', 'Given a maximum displacement ', '\\(d\\)', ', for each location ', '\\(x_{1}\\)', ' it computes correlations ', '\\(c(x_{1}, x_{2})\\)', ' only in a neighborhood of size ', '\\(D:=2d+1\\)', ',\nby limiting the range of ', '\\(x_{2}\\)', '. We use strides ', '\\(s_{1}, s_{2}\\)', ', to quantize ', '\\(x_{1}\\)', ' globally and to quantize ', '\\(x_{2}\\)', ' within the neighborhood\ncentered around ', '\\(x_{1}\\)', '.', '\n', 'The final output is defined by the following expression:', '\n', '\n\\[out[n, q, i, j] = c(x_{i, j}, x_{q})\\]', '\n', 'where ', '\\(i\\)', ' and ', '\\(j\\)', ' enumerate spatial locations in ', '\\(f_{1}\\)', ', and ', '\\(q\\)', ' denotes the ', '\\(q^{th}\\)', ' neighborhood of ', '\\(x_{i,j}\\)', '.', '\n', 'Defined in src/operator/correlation.cc:L197', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.Crop(*data, **kwargs)Â¶","['\n', 'Note', '\n', 'Crop', '\n', '\n', 'Crop the 2nd and 3rd dim of input data, with the corresponding size of h_w or\nwith width and height of the second input symbol, i.e., with one input, we need h_w to\nspecify the crop height and width, otherwise the second input symbolâ\x80\x99s size will be used', '\n', 'Defined in src/operator/crop.cc:L49', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.Custom(*data, **kwargs)Â¶","['Apply a custom operator implemented in a frontend language (like Python).', '\n', 'Custom operators should override required methods like ', 'forward', ' and ', 'backward', '.\nThe custom operator must be registered before it can be used.\nPlease check the tutorial here: ', 'https://mxnet.incubator.apache.org/api/faq/new_op', '\n', 'Defined in src/operator/custom/custom.cc:L546', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Example', '\n', 'Applies a custom operator named ', 'my_custom_operator', ' to ', 'input', '.', '\n', None, '\n', '\n', '\n']",">>> output=mx.symbol.Custom(op_type='my_custom_operator',data=input)
"
"
mxnet.ndarray.Deconvolution(data=None, weight=None, bias=None, kernel=_Null, stride=_Null, dilate=_Null, pad=_Null, adj=_Null, target_shape=_Null, num_filter=_Null, num_group=_Null, workspace=_Null, no_bias=_Null, cudnn_tune=_Null, cudnn_off=_Null, layout=_Null, out=None, name=None, **kwargs)Â¶","['Computes 1D or 2D transposed convolution (aka fractionally strided convolution) of the input tensor. This operation can be seen as the gradient of Convolution operation with respect to its input. Convolution usually reduces the size of the input. Transposed convolution works the other way, going from a smaller input to a larger output while preserving the connectivity pattern.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.Dropout(data=None, p=_Null, mode=_Null, axes=_Null, cudnn_off=_Null, out=None, name=None, **kwargs)Â¶","['Applies dropout operation to input array.', '\n', '\n', 'During training, each element of the input is set to zero with probability p.\nThe whole array is rescaled by ', '\n', 'During testing, this operator does not change the input if mode is â\x80\x98trainingâ\x80\x99.\nIf mode is â\x80\x98alwaysâ\x80\x99, the same computaion as during training will be applied.', '\n', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/nn/dropout.cc:L95', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.ElementWiseSum(*args, **kwargs)Â¶","['Adds all input arguments element-wise.', '\n', '\n\\[add\\_n(a_1, a_2, ..., a_n) = a_1 + a_2 + ... + a_n\\]', '\n', 'add_n', ' is potentially more efficient than calling ', 'add', ' by ', 'n', ' times.', '\n', 'The storage type of ', 'add_n', ' output depends on storage types of inputs', '\n', '\n', 'add_n(row_sparse, row_sparse, ..) = row_sparse', '\n', 'add_n(default, csr, default) = default', '\n', 'add_n(any input combinations longer than 4 (>4) with at least one default type) = default', '\n', 'otherwise, ', '\n', '\n', 'Defined in src/operator/tensor/elemwise_sum.cc:L155', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.Embedding(data=None, weight=None, input_dim=_Null, output_dim=_Null, dtype=_Null, sparse_grad=_Null, out=None, name=None, **kwargs)Â¶","['Maps integer indices to vector representations (embeddings).', '\n', 'This operator maps words to real-valued vectors in a high-dimensional space,\ncalled word embeddings. These embeddings can capture semantic and syntactic properties of the words.\nFor example, it has been noted that in the learned embedding spaces, similar words tend\nto be close to each other and dissimilar words far apart.', '\n', 'For an input array of shape (d1, â\x80¦, dK),\nthe shape of an output array is (d1, â\x80¦, dK, output_dim).\nAll the input values should be integers in the range [0, input_dim).', '\n', 'If the input_dim is ip0 and output_dim is op0, then shape of the embedding weight matrix must be\n(ip0, op0).', '\n', 'When â\x80\x9csparse_gradâ\x80\x9d is False, if any index mentioned is too large, it is replaced by the index that\naddresses the last vector in an embedding matrix.\nWhen â\x80\x9csparse_gradâ\x80\x9d is True, an error will be raised if invalid indices are found.', '\n', 'Examples:', '\n', None, '\n', '\n', 'The storage type of weight can be either row_sparse or default.', '\n', '\n', 'Note', '\n', 'If â\x80\x9csparse_gradâ\x80\x9d is set to True, the storage type of gradient w.r.t weights will be\nâ\x80\x9crow_sparseâ\x80\x9d. Only a subset of optimizers support sparse gradients, including SGD, AdaGrad\nand Adam. Note that by default lazy updates is turned on, which may perform differently\nfrom standard updates. For more details, please check the Optimization API at:\n', '\n', '\n', 'Defined in src/operator/tensor/indexing_op.cc:L597', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.Flatten(data=None, out=None, name=None, **kwargs)Â¶","['Flattens the input array into a 2-D array by collapsing the higher dimensions.\n.. note:: ', 'Flatten', ' is deprecated. Use ', 'flatten', ' instead.\nFor an input array with shape ', '(d1,', ', ', 'flatten', ' operation reshapes\nthe input array into an output array of shape ', '(d1,', '.\nNote that the behavior of this function is different from numpy.ndarray.flatten,\nwhich behaves similar to mxnet.ndarray.reshape((-1,)).\nExample:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L249', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.FullyConnected(data=None, weight=None, bias=None, num_hidden=_Null, no_bias=_Null, flatten=_Null, out=None, name=None, **kwargs)Â¶","['Applies a linear transformation: ', '\\(Y = XW^T + b\\)', '.', '\n', 'If ', 'flatten', ' is set to be true, then the shapes are:', '\n', '\n', 'data', '\n', 'weight', '\n', 'bias', '\n', 'out', '\n', '\n', 'If ', 'flatten', ' is set to be false, then the shapes are:', '\n', '\n', 'data', '\n', 'weight', '\n', 'bias', '\n', 'out', '\n', '\n', 'The learnable parameters include both ', 'weight', ' and ', 'bias', '.', '\n', 'If ', 'no_bias', ' is set to be true, then the ', 'bias', ' term is ignored.', '\n', '\n', 'Note', '\n', 'The sparse support for FullyConnected is limited to forward evaluation with ', '\n', 'To compute linear transformation with â\x80\x98csrâ\x80\x99 sparse data, sparse.dot is recommended instead\nof sparse.FullyConnected.', '\n', '\n', 'Defined in src/operator/nn/fully_connected.cc:L286', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.GridGenerator(data=None, transform_type=_Null, target_shape=_Null, out=None, name=None, **kwargs)Â¶","['Generates 2D sampling grid for bilinear sampling.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.GroupNorm(data=None, gamma=None, beta=None, num_groups=_Null, eps=_Null, output_mean_var=_Null, out=None, name=None, **kwargs)Â¶","['Group normalization.', '\n', 'The input channels are separated into ', 'num_groups', ' groups, each containing ', 'num_channels', ' channels.\nThe mean and standard-deviation are calculated separately over the each group.', '\n', '\n\\[data = data.reshape((N, num_groups, C // num_groups, ...))\nout = \\frac{data - mean(data, axis)}{\\sqrt{var(data, axis) + \\epsilon}} * gamma + beta\\]', '\n', 'Both ', 'gamma', ' and ', 'beta', ' are learnable parameters.', '\n', 'Defined in src/operator/nn/group_norm.cc:L76', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.IdentityAttachKLSparseReg(data=None, sparseness_target=_Null, penalty=_Null, momentum=_Null, out=None, name=None, **kwargs)Â¶","['Apply a sparse regularization to the output a sigmoid activation function.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.InstanceNorm(data=None, gamma=None, beta=None, eps=_Null, out=None, name=None, **kwargs)Â¶","['Applies instance normalization to the n-dimensional input array.', '\n', 'This operator takes an n-dimensional input array where (n>2) and normalizes\nthe input using the following formula:', '\n', '\n\\[out = \\frac{x - mean[data]}{ \\sqrt{Var[data]} + \\epsilon} * gamma + beta\\]', '\n', 'This layer is similar to batch normalization layer (', 'BatchNorm', ')\nwith two differences: first, the normalization is\ncarried out per example (instance), not over a batch. Second, the\nsame normalization is applied both at test and train time. This\noperation is also known as ', 'contrast normalization', '.', '\n', 'If the input data is of shape [batch, channel, spacial_dim1, spacial_dim2, â\x80¦],\n', 'gamma', ' and ', 'beta', ' parameters must be vectors of shape [channel].', '\n', 'This implementation is based on this paper ', '1', '\n', '\n', '1', '\n', 'Instance Normalization: The Missing Ingredient for Fast Stylization,\nD. Ulyanov, A. Vedaldi, V. Lempitsky, 2016 (arXiv:1607.08022v2).', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/instance_norm.cc:L94', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.L2Normalization(data=None, eps=_Null, mode=_Null, out=None, name=None, **kwargs)Â¶","['Normalize the input array using the L2 norm.', '\n', 'For 1-D NDArray, it computes:', '\n', None, '\n', '\n', 'For N-D NDArray, if the input array has shape (N, N, â\x80¦, N),', '\n', 'with ', 'mode', ' = ', 'instance', ', it normalizes each instance in the multidimensional\narray by its L2 norm.:', '\n', None, '\n', '\n', 'with ', 'mode', ' = ', 'channel', ', it normalizes each channel in the array by its L2 norm.:', '\n', None, '\n', '\n', 'with ', 'mode', ' = ', 'spatial', ', it normalizes the cross channel norm for each position\nin the array by its L2 norm.:', '\n', None, '\n', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/l2_normalization.cc:L195', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.LRN(data=None, alpha=_Null, beta=_Null, knorm=_Null, nsize=_Null, out=None, name=None, **kwargs)Â¶","['Applies local response normalization to the input.', '\n', 'The local response normalization layer performs â\x80\x9clateral inhibitionâ\x80\x9d by normalizing\nover local input regions.', '\n', 'If ', '\\(a_{x,y}^{i}\\)', ' is the activity of a neuron computed by applying kernel ', '\\(i\\)', ' at position\n', '\\((x, y)\\)', ' and then applying the ReLU nonlinearity, the response-normalized\nactivity ', '\\(b_{x,y}^{i}\\)', ' is given by the expression:', '\n', '\n\\[b_{x,y}^{i} = \\frac{a_{x,y}^{i}}{\\Bigg({k + \\frac{\\alpha}{n} \\sum_{j=max(0, i-\\frac{n}{2})}^{min(N-1, i+\\frac{n}{2})} (a_{x,y}^{j})^{2}}\\Bigg)^{\\beta}}\\]', '\n', 'where the sum runs over ', '\\(n\\)', ' â\x80\x9cadjacentâ\x80\x9d kernel maps at the same spatial position, and ', '\\(N\\)', ' is the total\nnumber of kernels in the layer.', '\n', 'Defined in src/operator/nn/lrn.cc:L157', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.LayerNorm(data=None, gamma=None, beta=None, axis=_Null, eps=_Null, output_mean_var=_Null, out=None, name=None, **kwargs)Â¶","['Layer normalization.', '\n', 'Normalizes the channels of the input tensor by mean and variance, and applies a scale ', 'gamma', ' as\nwell as offset ', 'beta', '.', '\n', 'Assume the input has more than one dimension and we normalize along axis 1.\nWe first compute the mean and variance along this axis and then\ncompute the normalized output, which has the same shape as input, as following:', '\n', '\n\\[out = \\frac{data - mean(data, axis)}{\\sqrt{var(data, axis) + \\epsilon}} * gamma + beta\\]', '\n', 'Both ', 'gamma', ' and ', 'beta', ' are learnable parameters.', '\n', 'Unlike BatchNorm and InstanceNorm,  the ', 'mean', ' and ', 'var', ' are computed along the channel dimension.', '\n', 'Assume the input has size ', 'k', ' on axis 1, then both ', 'gamma', ' and ', 'beta', '\nhave shape ', '(k,)', '. If ', 'output_mean_var', ' is set to be true, then outputs both ', 'data_mean', ' and\n', 'data_std', '. Note that no gradient will be passed through these two outputs.', '\n', 'The parameter ', 'axis', ' specifies which axis of the input shape denotes\nthe â\x80\x98channelâ\x80\x99 (separately normalized groups).  The default is -1, which sets the channel\naxis to be the last item in the input shape.', '\n', 'Defined in src/operator/nn/layer_norm.cc:L201', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.LeakyReLU(data=None, gamma=None, act_type=_Null, slope=_Null, lower_bound=_Null, upper_bound=_Null, out=None, name=None, **kwargs)Â¶","['Applies Leaky rectified linear unit activation element-wise to the input.', '\n', 'Leaky ReLUs attempt to fix the â\x80\x9cdying ReLUâ\x80\x9d problem by allowing a small ', 'slope', '\nwhen the input is negative and has a slope of one when input is positive.', '\n', 'The following modified ReLU Activation functions are supported:', '\n', '\n', 'elu', '\n', 'selu', '\n', 'leaky', '\n', 'prelu', '\n', 'rrelu', '\n', '\n', 'Defined in src/operator/leaky_relu.cc:L162', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.LinearRegressionOutput(data=None, label=None, grad_scale=_Null, out=None, name=None, **kwargs)Â¶","['Computes and optimizes for squared loss during backward propagation.\nJust outputs ', 'data', ' during forward propagation.', '\n', 'If ', '\\(\\hat{y}_i\\)', ' is the predicted value of the i-th sample, and ', '\\(y_i\\)', ' is the corresponding target value,\nthen the squared loss estimated over ', '\\(n\\)', ' samples is defined as', '\n', '\\(\\text{SquaredLoss}(\\textbf{Y}, \\hat{\\textbf{Y}} ) = \\frac{1}{n} \\sum_{i=0}^{n-1} \\lVert  \\textbf{y}_i - \\hat{\\textbf{y}}_i  \\rVert_2\\)', '\n', '\n', 'Note', '\n', 'Use the LinearRegressionOutput as the final output layer of a net.', '\n', '\n', 'The storage type of ', 'label', ' can be ', 'default', ' or ', 'csr', '\n', '\n', 'LinearRegressionOutput(default, default) = default', '\n', 'LinearRegressionOutput(default, csr) = default', '\n', '\n', 'By default, gradients of this loss function are scaled by factor ', '1/m', ', where m is the number of regression outputs of a training example.\nThe parameter ', 'grad_scale', ' can be used to change this scale to ', 'grad_scale/m', '.', '\n', 'Defined in src/operator/regression_output.cc:L92', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.LogisticRegressionOutput(data=None, label=None, grad_scale=_Null, out=None, name=None, **kwargs)Â¶","['Applies a logistic function to the input.', '\n', 'The logistic function, also known as the sigmoid function, is computed as\n', '\\(\\frac{1}{1+exp(-\\textbf{x})}\\)', '.', '\n', 'Commonly, the sigmoid is used to squash the real-valued output of a linear model\n', '\\(wTx+b\\)', ' into the [0,1] range so that it can be interpreted as a probability.\nIt is suitable for binary classification or probability prediction tasks.', '\n', '\n', 'Note', '\n', 'Use the LogisticRegressionOutput as the final output layer of a net.', '\n', '\n', 'The storage type of ', 'label', ' can be ', 'default', ' or ', 'csr', '\n', '\n', 'LogisticRegressionOutput(default, default) = default', '\n', 'LogisticRegressionOutput(default, csr) = default', '\n', '\n', 'The loss function used is the Binary Cross Entropy Loss:', '\n', '\\(-{(y\\log(p) + (1 - y)\\log(1 - p))}\\)', '\n', 'Where ', 'y', ' is the ground truth probability of positive outcome for a given example, and ', 'p', ' the probability predicted by the model. By default, gradients of this loss function are scaled by factor ', '1/m', ', where m is the number of regression outputs of a training example.\nThe parameter ', 'grad_scale', ' can be used to change this scale to ', 'grad_scale/m', '.', '\n', 'Defined in src/operator/regression_output.cc:L152', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.MAERegressionOutput(data=None, label=None, grad_scale=_Null, out=None, name=None, **kwargs)Â¶","['Computes mean absolute error of the input.', '\n', 'MAE is a risk metric corresponding to the expected value of the absolute error.', '\n', 'If ', '\\(\\hat{y}_i\\)', ' is the predicted value of the i-th sample, and ', '\\(y_i\\)', ' is the corresponding target value,\nthen the mean absolute error (MAE) estimated over ', '\\(n\\)', ' samples is defined as', '\n', '\\(\\text{MAE}(\\textbf{Y}, \\hat{\\textbf{Y}} ) = \\frac{1}{n} \\sum_{i=0}^{n-1} \\lVert \\textbf{y}_i - \\hat{\\textbf{y}}_i \\rVert_1\\)', '\n', '\n', 'Note', '\n', 'Use the MAERegressionOutput as the final output layer of a net.', '\n', '\n', 'The storage type of ', 'label', ' can be ', 'default', ' or ', 'csr', '\n', '\n', 'MAERegressionOutput(default, default) = default', '\n', 'MAERegressionOutput(default, csr) = default', '\n', '\n', 'By default, gradients of this loss function are scaled by factor ', '1/m', ', where m is the number of regression outputs of a training example.\nThe parameter ', 'grad_scale', ' can be used to change this scale to ', 'grad_scale/m', '.', '\n', 'Defined in src/operator/regression_output.cc:L120', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.MakeLoss(data=None, grad_scale=_Null, valid_thresh=_Null, normalization=_Null, out=None, name=None, **kwargs)Â¶","['Make your own loss function in network construction.', '\n', 'This operator accepts a customized loss function symbol as a terminal loss and\nthe symbol should be an operator with no backward dependency.\nThe output of this function is the gradient of loss with respect to the input data.', '\n', 'For example, if you are a making a cross entropy loss function. Assume ', 'out', ' is the\npredicted output and ', 'label', ' is the true label, then the cross entropy can be defined as:', '\n', None, '\n', '\n', 'We will need to use ', 'MakeLoss', ' when we are creating our own loss function or we want to\ncombine multiple loss functions. Also we may want to stop some variablesâ\x80\x99 gradients\nfrom backpropagation. See more detail in ', 'BlockGrad', ' or ', 'stop_gradient', '.', '\n', 'In addition, we can give a scale to the loss by setting ', 'grad_scale', ',\nso that the gradient of the loss will be rescaled in the backpropagation.', '\n', '\n', 'Note', '\n', 'This operator should be used as a Symbol instead of NDArray.', '\n', '\n', 'Defined in src/operator/make_loss.cc:L70', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.Pad(data=None, mode=_Null, pad_width=_Null, constant_value=_Null, out=None, name=None, **kwargs)Â¶","['Pads an input array with a constant or edge values of the array.', '\n', '\n', 'Note', '\n', 'Pad', '\n', '\n', '\n', 'Note', '\n', 'Current implementation only supports 4D and 5D input arrays with padding applied\nonly on axes 1, 2 and 3. Expects axes 4 and 5 in ', '\n', '\n', 'This operation pads an input array with either a ', 'constant_value', ' or edge values\nalong each axis of the input array. The amount of padding is specified by ', 'pad_width', '.', '\n', 'pad_width', ' is a tuple of integer padding widths for each axis of the format\n', '(before_1,', '. The ', 'pad_width', ' should be of length ', '2*N', '\nwhere ', 'N', ' is the number of dimensions of the array.', '\n', 'For dimension ', 'N', ' of the input array, ', 'before_N', ' and ', 'after_N', ' indicates how many values\nto add before and after the elements of the array along dimension ', 'N', '.\nThe widths of the higher two dimensions ', 'before_1', ', ', 'after_1', ', ', 'before_2', ',\n', 'after_2', ' must be 0.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/pad.cc:L765', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.Pooling(data=None, kernel=_Null, pool_type=_Null, global_pool=_Null, cudnn_off=_Null, pooling_convention=_Null, stride=_Null, pad=_Null, p_value=_Null, count_include_pad=_Null, layout=_Null, out=None, name=None, **kwargs)Â¶","['Performs pooling on the input.', '\n', 'The shapes for 1-D pooling are', '\n', '\n', 'data', '\n', '\n', 'The shapes for 2-D pooling are', '\n', '\n', 'data', '\n', '\n', 'The definition of ', 'f', ' depends on ', 'pooling_convention', ', which has two options:', '\n', '\n', 'valid', '\n', 'full', '\n', '\n', 'When ', 'global_pool', ' is set to be true, then global pooling is performed. It will reset\n', 'kernel=(height,', ' and set the appropiate padding to 0.', '\n', 'Three pooling options are supported by ', 'pool_type', ':', '\n', '\n', 'avg', '\n', 'max', '\n', 'sum', '\n', 'lp', '\n', '\n', 'For 3-D pooling, an additional ', 'depth', ' dimension is added before\n', 'height', '. Namely the input data and output will have shape ', '(batch_size, channel, depth,\nheight, width)', ' (NCDHW layout) or ', '(batch_size, depth, height, width, channel)', ' (NDHWC layout).', '\n', 'Notes on Lp pooling:', '\n', 'Lp pooling was first introduced by this paper: ', 'https://arxiv.org/pdf/1204.3968.pdf', '.\nL-1 pooling is simply sum pooling, while L-inf pooling is simply max pooling.\nWe can see that Lp pooling stands between those two, in practice the most common value for p is 2.', '\n', 'For each window ', 'X', ', the mathematical expression for Lp pooling is:', '\n', '\\(f(X) = \\sqrt[p]{\\sum_{x}^{X} x^p}\\)', '\n', 'Defined in src/operator/nn/pooling.cc:L416', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.Pooling_v1(data=None, kernel=_Null, pool_type=_Null, global_pool=_Null, pooling_convention=_Null, stride=_Null, pad=_Null, out=None, name=None, **kwargs)Â¶","['This operator is DEPRECATED.\nPerform pooling on the input.', '\n', 'The shapes for 2-D pooling is', '\n', '\n', 'data', '\n', 'out', '\n', '\n', 'The definition of ', 'f', ' depends on ', 'pooling_convention', ', which has two options:', '\n', '\n', 'valid', '\n', 'full', '\n', '\n', 'But ', 'global_pool', ' is set to be true, then do a global pooling, namely reset\n', 'kernel=(height,', '.', '\n', 'Three pooling options are supported by ', 'pool_type', ':', '\n', '\n', 'avg', '\n', 'max', '\n', 'sum', '\n', '\n', '1-D pooling is special case of 2-D pooling with ', 'weight=1', ' and\n', 'kernel[1]=1', '.', '\n', 'For 3-D pooling, an additional ', 'depth', ' dimension is added before\n', 'height', '. Namely the input data will have shape ', '(batch_size, channel, depth,\nheight, width)', '.', '\n', 'Defined in src/operator/pooling_v1.cc:L103', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.RNN(data=None, parameters=None, state=None, state_cell=None, sequence_length=None, state_size=_Null, num_layers=_Null, bidirectional=_Null, mode=_Null, p=_Null, state_outputs=_Null, projection_size=_Null, lstm_state_clip_min=_Null, lstm_state_clip_max=_Null, lstm_state_clip_nan=_Null, use_sequence_length=_Null, out=None, name=None, **kwargs)Â¶","['Applies recurrent layers to input data. Currently, vanilla RNN, LSTM and GRU are\nimplemented, with both multi-layer and bidirectional support.', '\n', 'When the input data is of type float32 and the environment variables MXNET_CUDA_ALLOW_TENSOR_CORE\nand MXNET_CUDA_TENSOR_OP_MATH_ALLOW_CONVERSION are set to 1, this operator will try to use\npseudo-float16 precision (float32 math with float16 I/O) precision in order to use\nTensor Cores on suitable NVIDIA GPUs. This can sometimes give significant speedups.', '\n', 'Vanilla RNN', '\n', 'Applies a single-gate recurrent layer to input X. Two kinds of activation function are supported:\nReLU and Tanh.', '\n', 'With ReLU activation function:', '\n', '\n\\[h_t = relu(W_{ih} * x_t + b_{ih}  +  W_{hh} * h_{(t-1)} + b_{hh})\\]', '\n', 'With Tanh activtion function:', '\n', '\n\\[h_t = \\tanh(W_{ih} * x_t + b_{ih}  +  W_{hh} * h_{(t-1)} + b_{hh})\\]', '\n', 'Reference paper: Finding structure in time - Elman, 1988.\n', 'https://crl.ucsd.edu/~elman/Papers/fsit.pdf', '\n', 'LSTM', '\n', 'Long Short-Term Memory - Hochreiter, 1997. ', 'http://www.bioinf.jku.at/publications/older/2604.pdf', '\n', '\n\\[\\begin{split}\\begin{array}{ll}\n          i_t = \\mathrm{sigmoid}(W_{ii} x_t + b_{ii} + W_{hi} h_{(t-1)} + b_{hi}) \\\\\n          f_t = \\mathrm{sigmoid}(W_{if} x_t + b_{if} + W_{hf} h_{(t-1)} + b_{hf}) \\\\\n          g_t = \\tanh(W_{ig} x_t + b_{ig} + W_{hc} h_{(t-1)} + b_{hg}) \\\\\n          o_t = \\mathrm{sigmoid}(W_{io} x_t + b_{io} + W_{ho} h_{(t-1)} + b_{ho}) \\\\\n          c_t = f_t * c_{(t-1)} + i_t * g_t \\\\\n          h_t = o_t * \\tanh(c_t)\n          \\end{array}\\end{split}\\]', '\n', 'With the projection size being set, LSTM could use the projection feature to reduce the parameters\nsize and give some speedups without significant damage to the accuracy.', '\n', 'Long Short-Term Memory Based Recurrent Neural Network Architectures for Large Vocabulary Speech\nRecognition - Sak et al. 2014. ', 'https://arxiv.org/abs/1402.1128', '\n', '\n\\[\\begin{split}\\begin{array}{ll}\n          i_t = \\mathrm{sigmoid}(W_{ii} x_t + b_{ii} + W_{ri} r_{(t-1)} + b_{ri}) \\\\\n          f_t = \\mathrm{sigmoid}(W_{if} x_t + b_{if} + W_{rf} r_{(t-1)} + b_{rf}) \\\\\n          g_t = \\tanh(W_{ig} x_t + b_{ig} + W_{rc} r_{(t-1)} + b_{rg}) \\\\\n          o_t = \\mathrm{sigmoid}(W_{io} x_t + b_{o} + W_{ro} r_{(t-1)} + b_{ro}) \\\\\n          c_t = f_t * c_{(t-1)} + i_t * g_t \\\\\n          h_t = o_t * \\tanh(c_t)\n          r_t = W_{hr} h_t\n          \\end{array}\\end{split}\\]', '\n', 'GRU', '\n', 'Gated Recurrent Unit - Cho et al. 2014. ', 'http://arxiv.org/abs/1406.1078', '\n', 'The definition of GRU here is slightly different from paper but compatible with CUDNN.', '\n', '\n\\[\\begin{split}\\begin{array}{ll}\n          r_t = \\mathrm{sigmoid}(W_{ir} x_t + b_{ir} + W_{hr} h_{(t-1)} + b_{hr}) \\\\\n          z_t = \\mathrm{sigmoid}(W_{iz} x_t + b_{iz} + W_{hz} h_{(t-1)} + b_{hz}) \\\\\n          n_t = \\tanh(W_{in} x_t + b_{in} + r_t * (W_{hn} h_{(t-1)}+ b_{hn})) \\\\\n          h_t = (1 - z_t) * n_t + z_t * h_{(t-1)} \\\\\n          \\end{array}\\end{split}\\]', '\n', 'Defined in src/operator/rnn.cc:L375', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.ROIPooling(data=None, rois=None, pooled_size=_Null, spatial_scale=_Null, out=None, name=None, **kwargs)Â¶","['Performs region of interest(ROI) pooling on the input array.', '\n', 'ROI pooling is a variant of a max pooling layer, in which the output size is fixed and\nregion of interest is a parameter. Its purpose is to perform max pooling on the inputs\nof non-uniform sizes to obtain fixed-size feature maps. ROI pooling is a neural-net\nlayer mostly used in training a ', 'Fast R-CNN', ' network for object detection.', '\n', 'This operator takes a 4D feature map as an input array and region proposals as ', 'rois', ',\nthen it pools over sub-regions of input and produces a fixed-sized output array\nregardless of the ROI size.', '\n', 'To crop the feature map accordingly, you can resize the bounding box coordinates\nby changing the parameters ', 'rois', ' and ', 'spatial_scale', '.', '\n', 'The cropped feature maps are pooled by standard max pooling operation to a fixed size output\nindicated by a ', 'pooled_size', ' parameter. batch_size will change to the number of region\nbounding boxes after ', 'ROIPooling', '.', '\n', 'The size of each region of interest doesnâ\x80\x99t have to be perfectly divisible by\nthe number of pooling sections(', 'pooled_size', ').', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/roi_pooling.cc:L224', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.Reshape(data=None, shape=_Null, reverse=_Null, target_shape=_Null, keep_highest=_Null, out=None, name=None, **kwargs)Â¶","['Reshapes the input array.\n.. note:: ', 'Reshape', ' is deprecated, use ', 'reshape', '\nGiven an array and a shape, this function returns a copy of the array in the new shape.\nThe shape is a tuple of integers such as (2,3,4). The size of the new shape should be same as the size of the input array.\nExample:', '\n', None, '\n', '\n', 'Some dimensions of the shape can take special values from the set {0, -1, -2, -3, -4}. The significance of each is explained below:\n- ', '0', '  copy this dimension from the input to the output shape.', '\n', '\n', 'Example::\n- input shape = (2,3,4), shape = (4,0,2), output shape = (4,3,2)\n- input shape = (2,3,4), shape = (2,0,0), output shape = (2,3,4)', '\n', '\n', '-1', '\n', '-2', '\n', '-3', '\n', '-4', '\n', '\n', '\n', 'If the argument ', 'Example::\n- without reverse=1, for input shape = (10,5,4), shape = (-1,0), output shape would be (40,5)\n- with reverse=1, output shape will be (50,4).', '\n', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L174', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', 'Reshapes the input array into a new shape.', '\n', None, '\n', '\n', 'You can use ', '0', ' to copy a particular dimension from the input to the output shape\nand â\x80\x98-1â\x80\x99 to infer the dimensions of the output.', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.SVMOutput(data=None, label=None, margin=_Null, regularization_coefficient=_Null, use_linear=_Null, out=None, name=None, **kwargs)Â¶","['Computes support vector machine based transformation of the input.', '\n', 'This tutorial demonstrates using SVM as output layer for classification instead of softmax:\n', 'https://github.com/apache/mxnet/tree/v1.x/example/svm_mnist', '.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.SequenceLast(data=None, sequence_length=None, use_sequence_length=_Null, axis=_Null, out=None, name=None, **kwargs)Â¶","['Takes the last element of a sequence.', '\n', 'This function takes an n-dimensional input array of the form\n[max_sequence_length, batch_size, other_feature_dims] and returns a (n-1)-dimensional array\nof the form [batch_size, other_feature_dims].', '\n', 'Parameter ', 'sequence_length', ' is used to handle variable-length sequences. ', 'sequence_length', ' should be\nan input array of positive ints of dimension [batch_size]. To use this parameter,\nset ', 'use_sequence_length', ' to ', 'True', ', otherwise each example in the batch is assumed\nto have the max sequence length.', '\n', '\n', 'Note', '\n', 'Alternatively, you can also use ', '\n', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/sequence_last.cc:L105', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.SequenceMask(data=None, sequence_length=None, use_sequence_length=_Null, value=_Null, axis=_Null, out=None, name=None, **kwargs)Â¶","['Sets all elements outside the sequence to a constant value.', '\n', 'This function takes an n-dimensional input array of the form\n[max_sequence_length, batch_size, other_feature_dims] and returns an array of the same shape.', '\n', 'Parameter ', 'sequence_length', ' is used to handle variable-length sequences. ', 'sequence_length', '\nshould be an input array of positive ints of dimension [batch_size].\nTo use this parameter, set ', 'use_sequence_length', ' to ', 'True', ',\notherwise each example in the batch is assumed to have the max sequence length and\nthis operator works as the ', 'identity', ' operator.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/sequence_mask.cc:L185', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.SequenceReverse(data=None, sequence_length=None, use_sequence_length=_Null, axis=_Null, out=None, name=None, **kwargs)Â¶","['Reverses the elements of each sequence.', '\n', 'This function takes an n-dimensional input array of the form [max_sequence_length, batch_size, other_feature_dims]\nand returns an array of the same shape.', '\n', 'Parameter ', 'sequence_length', ' is used to handle variable-length sequences.\n', 'sequence_length', ' should be an input array of positive ints of dimension [batch_size].\nTo use this parameter, set ', 'use_sequence_length', ' to ', 'True', ',\notherwise each example in the batch is assumed to have the max sequence length.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/sequence_reverse.cc:L121', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.SliceChannel(data=None, num_outputs=_Null, axis=_Null, squeeze_axis=_Null, out=None, name=None, **kwargs)Â¶","['Splits an array along a particular axis into multiple sub-arrays.', '\n', '\n', 'Note', '\n', 'SliceChannel', '\n', '\n', 'Note', ' that ', 'num_outputs', ' should evenly divide the length of the axis\nalong which to split the array.', '\n', 'Example:', '\n', None, '\n', '\n', 'squeeze_axis=1', ' removes the axis with length 1 from the shapes of the output arrays.\n', 'Note', ' that setting ', 'squeeze_axis', ' to ', '1', ' removes axis with length 1 only\nalong the ', 'axis', ' which it is split.\nAlso ', 'squeeze_axis', ' can be set to true only if ', 'input.shape[axis]', '.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/slice_channel.cc:L106', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.Softmax(data=None, label=None, grad_scale=_Null, ignore_label=_Null, multi_output=_Null, use_ignore=_Null, preserve_shape=_Null, normalization=_Null, out_grad=_Null, smooth_alpha=_Null, out=None, name=None, **kwargs)Â¶","['Computes the gradient of cross entropy loss with respect to softmax output.', '\n', '\n', 'This operator computes the gradient in two steps.\nThe cross entropy loss does not actually need to be computed.', '\n', 'The softmax function, cross entropy loss and gradient is given by:', '\n', 'During forward propagation, the softmax function is computed for each instance in the input array.', '\n', 'During backward propagation, the gradient of cross-entropy loss w.r.t softmax output array is computed.\nThe provided label can be a one-hot label array or a probability label array.', '\n', '\n', 'Defined in src/operator/softmax_output.cc:L242', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.SoftmaxActivation(data=None, mode=_Null, out=None, name=None, **kwargs)Â¶","['Applies softmax activation to input. This is intended for internal layers.', '\n', '\n', 'Note', '\n', 'This operator has been deprecated, please use ', '\n', '\n', 'If ', 'mode', ' = ', 'instance', ', this operator will compute a softmax for each instance in the batch.\nThis is the default mode.', '\n', 'If ', 'mode', ' = ', 'channel', ', this operator will compute a k-class softmax at each position\nof each instance, where ', 'k', ' = ', 'num_channel', '. This mode can only be used when the input array\nhas at least 3 dimensions.\nThis can be used for ', 'fully convolutional network', ', ', 'image segmentation', ', etc.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/nn/softmax_activation.cc:L58', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.SoftmaxOutput(data=None, label=None, grad_scale=_Null, ignore_label=_Null, multi_output=_Null, use_ignore=_Null, preserve_shape=_Null, normalization=_Null, out_grad=_Null, smooth_alpha=_Null, out=None, name=None, **kwargs)Â¶","['Computes the gradient of cross entropy loss with respect to softmax output.', '\n', '\n', 'This operator computes the gradient in two steps.\nThe cross entropy loss does not actually need to be computed.', '\n', 'The softmax function, cross entropy loss and gradient is given by:', '\n', 'During forward propagation, the softmax function is computed for each instance in the input array.', '\n', 'During backward propagation, the gradient of cross-entropy loss w.r.t softmax output array is computed.\nThe provided label can be a one-hot label array or a probability label array.', '\n', '\n', 'Defined in src/operator/softmax_output.cc:L242', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.SpatialTransformer(data=None, loc=None, target_shape=_Null, transform_type=_Null, sampler_type=_Null, cudnn_off=_Null, out=None, name=None, **kwargs)Â¶","['Applies a spatial transformer to input feature map.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.SwapAxis(data=None, dim1=_Null, dim2=_Null, out=None, name=None, **kwargs)Â¶","['Interchanges two axes of an array.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/swapaxis.cc:L69', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.UpSampling(*data, **kwargs)Â¶","['Upsamples the given input data.', '\n', 'Two algorithms (', 'sample_type', ') are available for upsampling:', '\n', '\n', 'Nearest Neighbor', '\n', 'Bilinear', '\n', '\n', 'Nearest Neighbor Upsampling', '\n', 'Input data is expected to be NCHW.', '\n', 'Example:', '\n', None, '\n', '\n', 'Bilinear Upsampling', '\n', 'Uses ', 'deconvolution', ' algorithm under the hood. You need provide both input data and the kernel.', '\n', 'Input data is expected to be NCHW.', '\n', 'num_filter', ' is expected to be same as the number of channels.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/nn/upsampling.cc:L172', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.abs(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise absolute value of the input.', '\n', 'Example:', '\n', None, '\n', '\n', 'The storage type of ', 'abs', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L720', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.adam_update(weight=None, grad=None, mean=None, var=None, lr=_Null, beta1=_Null, beta2=_Null, epsilon=_Null, wd=_Null, rescale_grad=_Null, clip_gradient=_Null, lazy_update=_Null, out=None, name=None, **kwargs)Â¶","['Update function for Adam optimizer. Adam is seen as a generalization\nof AdaGrad.', '\n', 'Adam update consists of the following steps, where g represents gradient and m, v\nare 1st and 2nd order moment estimates (mean and variance).', '\n', '\n\\[\\begin{split}g_t = \\nabla J(W_{t-1})\\\\\nm_t = \\beta_1 m_{t-1} + (1 - \\beta_1) g_t\\\\\nv_t = \\beta_2 v_{t-1} + (1 - \\beta_2) g_t^2\\\\\nW_t = W_{t-1} - \\alpha \\frac{ m_t }{ \\sqrt{ v_t } + \\epsilon }\\end{split}\\]', '\n', 'It updates the weights using:', '\n', None, '\n', '\n', 'However, if gradâ\x80\x99s storage type is ', 'row_sparse', ', ', 'lazy_update', ' is True and the storage\ntype of weight is the same as those of m and v,\nonly the row slices whose indices appear in grad.indices are updated (for w, m and v):', '\n', None, '\n', '\n', 'Defined in src/operator/optimizer_op.cc:L687', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.add_n(*args, **kwargs)Â¶","['Adds all input arguments element-wise.', '\n', '\n\\[add\\_n(a_1, a_2, ..., a_n) = a_1 + a_2 + ... + a_n\\]', '\n', 'add_n', ' is potentially more efficient than calling ', 'add', ' by ', 'n', ' times.', '\n', 'The storage type of ', 'add_n', ' output depends on storage types of inputs', '\n', '\n', 'add_n(row_sparse, row_sparse, ..) = row_sparse', '\n', 'add_n(default, csr, default) = default', '\n', 'add_n(any input combinations longer than 4 (>4) with at least one default type) = default', '\n', 'otherwise, ', '\n', '\n', 'Defined in src/operator/tensor/elemwise_sum.cc:L155', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.all_finite(data=None, init_output=_Null, out=None, name=None, **kwargs)Â¶","['Check if all the float numbers in the array are finite (used for AMP)', '\n', 'Defined in src/operator/contrib/all_finite.cc:L100', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.amp_cast(data=None, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Cast function between low precision float/FP32 used by AMP.', '\n', 'It casts only between low precision float/FP32 and does not do anything for other types.', '\n', 'Defined in src/operator/tensor/amp_cast.cc:L125', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.amp_multicast(*data, **kwargs)Â¶","['Cast function used by AMP, that casts its inputs to the common widest type.', '\n', 'It casts only between low precision float/FP32 and does not do anything for other types.', '\n', 'Defined in src/operator/tensor/amp_cast.cc:L169', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.arccos(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise inverse cosine of the input array.', '\n', 'The input should be in range ', '[-1, 1]', '.\nThe output is in the closed interval ', '\\([0, \\pi]\\)', '\n', '\n\\[arccos([-1, -.707, 0, .707, 1]) = [\\pi, 3\\pi/4, \\pi/2, \\pi/4, 0]\\]', '\n', 'The storage type of ', 'arccos', ' output is always dense', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_trig.cc:L233', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.arccosh(data=None, out=None, name=None, **kwargs)Â¶","['Returns the element-wise inverse hyperbolic cosine of the input array, computed element-wise.', '\n', 'The storage type of ', 'arccosh', ' output is always dense', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_trig.cc:L535', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.arcsin(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise inverse sine of the input array.', '\n', 'The input should be in the range ', '[-1, 1]', '.\nThe output is in the closed interval of [', '\\(-\\pi/2\\)', ', ', '\\(\\pi/2\\)', '].', '\n', '\n\\[arcsin([-1, -.707, 0, .707, 1]) = [-\\pi/2, -\\pi/4, 0, \\pi/4, \\pi/2]\\]', '\n', 'The storage type of ', 'arcsin', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_trig.cc:L187', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.arcsinh(data=None, out=None, name=None, **kwargs)Â¶","['Returns the element-wise inverse hyperbolic sine of the input array, computed element-wise.', '\n', 'The storage type of ', 'arcsinh', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_trig.cc:L494', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.arctan(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise inverse tangent of the input array.', '\n', 'The output is in the closed interval ', '\\([-\\pi/2, \\pi/2]\\)', '\n', '\n\\[arctan([-1, 0, 1]) = [-\\pi/4, 0, \\pi/4]\\]', '\n', 'The storage type of ', 'arctan', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_trig.cc:L282', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.arctanh(data=None, out=None, name=None, **kwargs)Â¶","['Returns the element-wise inverse hyperbolic tangent of the input array, computed element-wise.', '\n', 'The storage type of ', 'arctanh', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_trig.cc:L579', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.argmax(data=None, axis=_Null, keepdims=_Null, out=None, name=None, **kwargs)Â¶","['Returns indices of the maximum values along an axis.', '\n', 'In the case of multiple occurrences of maximum values, the indices corresponding to the first occurrence\nare returned.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/broadcast_reduce_op_index.cc:L51', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.argmax_channel(data=None, out=None, name=None, **kwargs)Â¶","['Returns argmax indices of each channel from the input array.', '\n', 'The result will be an NDArray of shape (num_channel,).', '\n', 'In case of multiple occurrences of the maximum values, the indices corresponding to the first occurrence\nare returned.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/broadcast_reduce_op_index.cc:L96', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.argmin(data=None, axis=_Null, keepdims=_Null, out=None, name=None, **kwargs)Â¶","['Returns indices of the minimum values along an axis.', '\n', 'In the case of multiple occurrences of minimum values, the indices corresponding to the first occurrence\nare returned.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/broadcast_reduce_op_index.cc:L76', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.argsort(data=None, axis=_Null, is_ascend=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Returns the indices that would sort an input array along the given axis.', '\n', 'This function performs sorting along the given axis and returns an array of indices having same shape\nas an input array that index data in sorted order.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/ordering_op.cc:L184', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.batch_dot(lhs=None, rhs=None, transpose_a=_Null, transpose_b=_Null, forward_stype=_Null, out=None, name=None, **kwargs)Â¶","['Batchwise dot product.', '\n', 'batch_dot', ' is used to compute dot product of ', 'x', ' and ', 'y', ' when ', 'x', ' and\n', 'y', ' are data in batch, namely N-D (N >= 3) arrays in shape of ', '(B0, â\x80¦, B_i, :, :)', '.', '\n', 'For example, given ', 'x', ' with shape ', '(B_0, â\x80¦, B_i, N, M)', ' and ', 'y', ' with shape\n', '(B_0, â\x80¦, B_i, M, K)', ', the result array will have shape ', '(B_0, â\x80¦, B_i, N, K)', ',\nwhich is computed by:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/dot.cc:L127', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.batch_take(a=None, indices=None, out=None, name=None, **kwargs)Â¶","['Takes elements from a data batch.', '\n', '\n', 'Note', '\n', 'batch_take', '\n', '\n', 'Given an input array of shape ', '(d0,', ' and indices of shape ', '(i0,)', ', the result will be\nan output array of shape ', '(i0,)', ' with:', '\n', None, '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/indexing_op.cc:L835', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_add(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise sum of the input arrays with broadcasting.', '\n', 'broadcast_plus', ' is an alias to the function ', 'broadcast_add', '.', '\n', 'Example:', '\n', None, '\n', '\n', 'Supported sparse operations:', '\n', '\n', 'broadcast_add(csr, dense(1D)) = dense\nbroadcast_add(dense(1D), csr) = dense', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_basic.cc:L57', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_axes(data=None, axis=_Null, size=_Null, out=None, name=None, **kwargs)Â¶","['Broadcasts the input array over particular axes.', '\n', 'Broadcasting is allowed on axes with size 1, such as from ', '(2,1,3,1)', ' to\n', '(2,8,3,9)', '. Elements will be duplicated on the broadcasted axes.', '\n', 'broadcast_axes', ' is an alias to the function ', 'broadcast_axis', '.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/broadcast_reduce_op_value.cc:L92', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_axis(data=None, axis=_Null, size=_Null, out=None, name=None, **kwargs)Â¶","['Broadcasts the input array over particular axes.', '\n', 'Broadcasting is allowed on axes with size 1, such as from ', '(2,1,3,1)', ' to\n', '(2,8,3,9)', '. Elements will be duplicated on the broadcasted axes.', '\n', 'broadcast_axes', ' is an alias to the function ', 'broadcast_axis', '.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/broadcast_reduce_op_value.cc:L92', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_div(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise division of the input arrays with broadcasting.', '\n', 'Example:', '\n', None, '\n', '\n', 'Supported sparse operations:', '\n', '\n', 'broadcast_div(csr, dense(1D)) = csr', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_basic.cc:L186', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_equal(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns the result of element-wise ', 'equal to', ' (==) comparison operation with broadcasting.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_logic.cc:L45', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_greater(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns the result of element-wise ', 'greater than', ' (>) comparison operation with broadcasting.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_logic.cc:L81', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_greater_equal(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns the result of element-wise ', 'greater than or equal to', ' (>=) comparison operation with broadcasting.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_logic.cc:L99', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_hypot(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns the hypotenuse of a right angled triangle, given its â\x80\x9clegsâ\x80\x9d\nwith broadcasting.', '\n', 'It is equivalent to doing ', '\\(sqrt(x_1^2 + x_2^2)\\)', '.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_extended.cc:L157', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_lesser(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns the result of element-wise ', 'lesser than', ' (<) comparison operation with broadcasting.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_logic.cc:L117', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_lesser_equal(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns the result of element-wise ', 'lesser than or equal to', ' (<=) comparison operation with broadcasting.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_logic.cc:L135', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_like(lhs=None, rhs=None, lhs_axes=_Null, rhs_axes=_Null, out=None, name=None, **kwargs)Â¶","['Broadcasts lhs to have the same shape as rhs.', '\n', 'Broadcasting is a mechanism that allows NDArrays to perform arithmetic operations\nwith arrays of different shapes efficiently without creating multiple copies of arrays.\nAlso see, ', 'Broadcasting', ' for more explanation.', '\n', 'Broadcasting is allowed on axes with size 1, such as from ', '(2,1,3,1)', ' to\n', '(2,8,3,9)', '. Elements will be duplicated on the broadcasted axes.', '\n', 'For example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/broadcast_reduce_op_value.cc:L178', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_logical_and(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns the result of element-wise ', 'logical and', ' with broadcasting.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_logic.cc:L153', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_logical_or(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns the result of element-wise ', 'logical or', ' with broadcasting.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_logic.cc:L171', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_logical_xor(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns the result of element-wise ', 'logical xor', ' with broadcasting.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_logic.cc:L189', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_maximum(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise maximum of the input arrays with broadcasting.', '\n', 'This function compares two input arrays and returns a new array having the element-wise maxima.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_extended.cc:L80', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_minimum(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise minimum of the input arrays with broadcasting.', '\n', 'This function compares two input arrays and returns a new array having the element-wise minima.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_extended.cc:L116', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_minus(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise difference of the input arrays with broadcasting.', '\n', 'broadcast_minus', ' is an alias to the function ', 'broadcast_sub', '.', '\n', 'Example:', '\n', None, '\n', '\n', 'Supported sparse operations:', '\n', '\n', 'broadcast_sub/minus(csr, dense(1D)) = dense\nbroadcast_sub/minus(dense(1D), csr) = dense', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_basic.cc:L105', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_mod(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise modulo of the input arrays with broadcasting.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_basic.cc:L221', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_mul(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise product of the input arrays with broadcasting.', '\n', 'Example:', '\n', None, '\n', '\n', 'Supported sparse operations:', '\n', '\n', 'broadcast_mul(csr, dense(1D)) = csr', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_basic.cc:L145', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_not_equal(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns the result of element-wise ', 'not equal to', ' (!=) comparison operation with broadcasting.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_logic.cc:L63', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_plus(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise sum of the input arrays with broadcasting.', '\n', 'broadcast_plus', ' is an alias to the function ', 'broadcast_add', '.', '\n', 'Example:', '\n', None, '\n', '\n', 'Supported sparse operations:', '\n', '\n', 'broadcast_add(csr, dense(1D)) = dense\nbroadcast_add(dense(1D), csr) = dense', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_basic.cc:L57', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_power(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns result of first array elements raised to powers from second array, element-wise with broadcasting.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_extended.cc:L44', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_sub(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise difference of the input arrays with broadcasting.', '\n', 'broadcast_minus', ' is an alias to the function ', 'broadcast_sub', '.', '\n', 'Example:', '\n', None, '\n', '\n', 'Supported sparse operations:', '\n', '\n', 'broadcast_sub/minus(csr, dense(1D)) = dense\nbroadcast_sub/minus(dense(1D), csr) = dense', '\n', 'Defined in src/operator/tensor/elemwise_binary_broadcast_op_basic.cc:L105', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.broadcast_to(data=None, shape=_Null, out=None, name=None, **kwargs)Â¶","['Broadcasts the input array to a new shape.', '\n', 'Broadcasting is a mechanism that allows NDArrays to perform arithmetic operations\nwith arrays of different shapes efficiently without creating multiple copies of arrays.\nAlso see, ', 'Broadcasting', ' for more explanation.', '\n', 'Broadcasting is allowed on axes with size 1, such as from ', '(2,1,3,1)', ' to\n', '(2,8,3,9)', '. Elements will be duplicated on the broadcasted axes.', '\n', 'For example:', '\n', None, '\n', '\n', 'The dimension which you do not want to change can also be kept as ', '0', ' which means copy the original value.\nSo with ', 'shape=(2,0)', ', we will obtain the same result as in the above example.', '\n', 'Defined in src/operator/tensor/broadcast_reduce_op_value.cc:L116', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.cast(data=None, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Casts all elements of the input to a new type.', '\n', '\n', 'Note', '\n', 'Cast', '\n', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L664', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.cast_storage(data=None, stype=_Null, out=None, name=None, **kwargs)Â¶","['Casts tensor storage type to the new type.', '\n', 'When an NDArray with default storage type is cast to csr or row_sparse storage,\nthe result is compact, which means:', '\n', '\n', 'for csr, zero values will not be retained', '\n', 'for row_sparse, row slices of all zeros will not be retained', '\n', '\n', 'The storage type of ', 'cast_storage', ' output depends on stype parameter:', '\n', '\n', 'cast_storage(csr, â\x80\x98defaultâ\x80\x99) = default', '\n', 'cast_storage(row_sparse, â\x80\x98defaultâ\x80\x99) = default', '\n', 'cast_storage(default, â\x80\x98csrâ\x80\x99) = csr', '\n', 'cast_storage(default, â\x80\x98row_sparseâ\x80\x99) = row_sparse', '\n', 'cast_storage(csr, â\x80\x98csrâ\x80\x99) = csr', '\n', 'cast_storage(row_sparse, â\x80\x98row_sparseâ\x80\x99) = row_sparse', '\n', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/cast_storage.cc:L71', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.cbrt(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise cube-root value of the input.', '\n', '\n\\[cbrt(x) = \\sqrt[3]{x}\\]', '\n', 'Example:', '\n', None, '\n', '\n', 'The storage type of ', 'cbrt', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_pow.cc:L270', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.ceil(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise ceiling of the input.', '\n', 'The ceil of the scalar x is the smallest integer i, such that i >= x.', '\n', 'Example:', '\n', None, '\n', '\n', 'The storage type of ', 'ceil', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L817', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.choose_element_0index(data=None, index=None, axis=_Null, keepdims=_Null, mode=_Null, out=None, name=None, **kwargs)Â¶","['Picks elements from an input array according to the input indices along the given axis.', '\n', 'Given an input array of shape ', '(d0,', ' and indices of shape ', '(i0,)', ', the result will be\nan output array of shape ', '(i0,)', ' with:', '\n', None, '\n', '\n', 'By default, if any index mentioned is too large, it is replaced by the index that addresses\nthe last element along an axis (the ', 'clip', ' mode).', '\n', 'This function supports n-dimensional input and (n-1)-dimensional indices arrays.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/broadcast_reduce_op_index.cc:L150', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.clip(data=None, a_min=_Null, a_max=_Null, out=None, name=None, **kwargs)Â¶","['Clips (limits) the values in an array.\nGiven an interval, values outside the interval are clipped to the interval edges.\nClipping ', 'x', ' between ', 'a_min', ' and ', 'a_max', ' would be::\n.. math:', '\n', None, '\n', '\n', '\n', 'Example::', 'x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nclip(x,1,8) = [ 1.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  8.]', '\n', '\n', 'The storage type of ', 'clip', ' output depends on storage types of inputs and the a_min, a_max parameter values:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L676', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.col2im(data=None, output_size=_Null, kernel=_Null, stride=_Null, dilate=_Null, pad=_Null, out=None, name=None, **kwargs)Â¶","['Combining the output column matrix of im2col back to image array.', '\n', 'Like ', 'im2col', ', this operator is also used in the vanilla convolution\nimplementation. Despite the name, col2im is not the reverse operation of im2col. Since there\nmay be overlaps between neighbouring sliding blocks, the column elements cannot be directly\nput back into image. Instead, they are accumulated (i.e., summed) in the input image\njust like the gradient computation, so col2im is the gradient of im2col and vice versa.', '\n', 'Using the notation in im2col, given an input column array of shape\n', '\\((N, C \\times  \\prod(\\text{kernel}), W)\\)', ', this operator accumulates the column elements\ninto output array of shape ', '\\((N, C, \\text{output_size}[0], \\text{output_size}[1], \\dots)\\)', '.\nOnly 1-D, 2-D and 3-D of spatial dimension is supported in this operator.', '\n', 'Defined in src/operator/nn/im2col.cc:L181', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.concat(*data, **kwargs)Â¶","['Joins input arrays along a given axis.', '\n', '\n', 'Note', '\n', 'Concat', '\n', '\n', 'The dimensions of the input arrays should be the same except the axis along\nwhich they will be concatenated.\nThe dimension of the output array along the concatenated axis will be equal\nto the sum of the corresponding dimensions of the input arrays.', '\n', 'The storage type of ', 'concat', ' output depends on storage types of inputs', '\n', '\n', 'concat(csr, csr, â\x80¦, csr, dim=0) = csr', '\n', 'otherwise, ', '\n', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/nn/concat.cc:L384', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.cos(data=None, out=None, name=None, **kwargs)Â¶","['Computes the element-wise cosine of the input array.', '\n', 'The input should be in radians (', '\\(2\\pi\\)', ' rad equals 360 degrees).', '\n', '\n\\[cos([0, \\pi/4, \\pi/2]) = [1, 0.707, 0]\\]', '\n', 'The storage type of ', 'cos', ' output is always dense', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_trig.cc:L90', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.cosh(data=None, out=None, name=None, **kwargs)Â¶","['Returns the hyperbolic cosine  of the input array, computed element-wise.', '\n', '\n\\[cosh(x) = 0.5\\times(exp(x) + exp(-x))\\]', '\n', 'The storage type of ', 'cosh', ' output is always dense', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_trig.cc:L409', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.crop(data=None, begin=_Null, end=_Null, step=_Null, out=None, name=None, **kwargs)Â¶","['Slices a region of the array.\n.. note:: ', 'crop', ' is deprecated. Use ', 'slice', ' instead.\nThis function returns a sliced array between the indices given\nby ', 'begin', ' and ', 'end', ' with the corresponding ', 'step', '.\nFor an input array of ', 'shape=(d_0,', ',\nslice operation with ', 'begin=(b_0,', ',\n', 'end=(e_0,', ', and ', 'step=(s_0,', ',\nwhere m <= n, results in an array with the shape\n', '(|e_0-b_0|/|s_0|,', '.\nThe resulting arrayâ\x80\x99s ', 'k', '-th dimension contains elements\nfrom the ', 'k', '-th dimension of the input array starting\nfrom index ', 'b_k', ' (inclusive) with step ', 's_k', '\nuntil reaching ', 'e_k', ' (exclusive).\nIf the ', 'k', '-th elements are ', 'None', ' in the sequence of ', 'begin', ', ', 'end', ',\nand ', 'step', ', the following rule will be used to set default values.\nIf ', 's_k', ' is ', 'None', ', set ', 's_k=1', '. If ', 's_k > 0', ', set ', 'b_k=0', ', ', 'e_k=d_k', ';\nelse, set ', 'b_k=d_k-1', ', ', 'e_k=-1', '.\nThe storage type of ', 'slice', ' output depends on storage types of inputs\n- slice(csr) = csr\n- otherwise, ', 'slice', ' generates output with default storage\n.. note:: When input data storage type is csr, it only supports', '\n', '\n', 'step=(), or step=(None,), or step=(1,) to generate a csr output.\nFor other step parameter values, it falls back to slicing\na dense tensor.', '\n', '\n', 'Example::', '\n', '\n', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L481', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.ctc_loss(data=None, label=None, data_lengths=None, label_lengths=None, use_data_lengths=_Null, use_label_lengths=_Null, blank_label=_Null, out=None, name=None, **kwargs)Â¶","['Connectionist Temporal Classification Loss.', '\n', '\n', 'Note', '\n', 'The existing alias ', '\n', '\n', 'The shapes of the inputs and outputs:', '\n', '\n', 'data', '\n', 'label', '\n', 'out', '\n', '\n', 'The ', 'data', ' tensor consists of sequences of activation vectors (without applying softmax),\nwith i-th channel in the last dimension corresponding to i-th label\nfor i between 0 and alphabet_size-1 (i.e always 0-indexed).\nAlphabet size should include one additional value reserved for blank label.\nWhen ', 'blank_label', ' is ', '""first""', ', the ', '0', '-th channel is be reserved for\nactivation of blank label, or otherwise if it is â\x80\x9clastâ\x80\x9d, ', '(alphabet_size-1)', '-th channel should be\nreserved for blank label.', '\n', 'label', ' is an index matrix of integers. When ', 'blank_label', ' is ', '""first""', ',\nthe value 0 is then reserved for blank label, and should not be passed in this matrix. Otherwise,\nwhen ', 'blank_label', ' is ', '""last""', ', the value ', '(alphabet_size-1)', ' is reserved for blank label.', '\n', 'If a sequence of labels is shorter than ', 'label_sequence_length', ', use the special\npadding value at the end of the sequence to conform it to the correct\nlength. The padding value is ', '0', ' when ', 'blank_label', ' is ', '""first""', ', and ', '-1', ' otherwise.', '\n', 'For example, suppose the vocabulary is ', '[a, b, c]', ', and in one batch we have three sequences\nâ\x80\x98baâ\x80\x99, â\x80\x98cbbâ\x80\x99, and â\x80\x98abacâ\x80\x99. When ', 'blank_label', ' is ', '""first""', ', we can index the labels as\n', '{â\x80\x98aâ\x80\x99: 1, â\x80\x98bâ\x80\x99: 2, â\x80\x98câ\x80\x99: 3}', ', and we reserve the 0-th channel for blank label in data tensor.\nThe resulting ', 'label', ' tensor should be padded to be:', '\n', None, '\n', '\n', 'When ', 'blank_label', ' is ', '""last""', ', we can index the labels as\n', '{â\x80\x98aâ\x80\x99: 0, â\x80\x98bâ\x80\x99: 1, â\x80\x98câ\x80\x99: 2}', ', and we reserve the channel index 3 for blank label in data tensor.\nThe resulting ', 'label', ' tensor should be padded to be:', '\n', None, '\n', '\n', 'out', ' is a list of CTC loss values, one per example in the batch.', '\n', 'See ', 'Connectionist Temporal Classification: Labelling Unsegmented\nSequence Data with Recurrent Neural Networks', ', A. Graves ', 'et al', '. for more\ninformation on the definition and the algorithm.', '\n', 'Defined in src/operator/nn/ctc_loss.cc:L100', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.cumsum(a=None, axis=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Return the cumulative sum of the elements along a given axis.', '\n', 'Defined in src/operator/numpy/np_cumsum.cc:L70', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.degrees(data=None, out=None, name=None, **kwargs)Â¶","['Converts each element of the input array from radians to degrees.', '\n', '\n\\[degrees([0, \\pi/2, \\pi, 3\\pi/2, 2\\pi]) = [0, 90, 180, 270, 360]\\]', '\n', 'The storage type of ', 'degrees', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_trig.cc:L332', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.depth_to_space(data=None, block_size=_Null, out=None, name=None, **kwargs)Â¶","['Rearranges(permutes) data from depth into blocks of spatial data.\nSimilar to ONNX DepthToSpace operator:\n', 'https://github.com/onnx/onnx/blob/master/docs/Operators.md#DepthToSpace', '.\nThe output is a new tensor where the values from depth dimension are moved in spatial blocks\nto height and width dimension. The reverse of this operation is ', 'space_to_depth', '.\n.. math:', '\n', None, '\n', '\n', 'where ', '\\(x\\)', ' is an input tensor with default layout as ', '\\([N, C, H, W]\\)', ': [batch, channels, height, width]\nand ', '\\(y\\)', ' is the output tensor of layout ', '\\([N, C / (block\\_size ^ 2), H * block\\_size, W * block\\_size]\\)', '\nExample:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L971', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.diag(data=None, k=_Null, axis1=_Null, axis2=_Null, out=None, name=None, **kwargs)Â¶","['Extracts a diagonal or constructs a diagonal array.', '\n', 'diag', 'â\x80\x99s behavior depends on the input array dimensions:', '\n', '\n', '1-D arrays: constructs a 2-D array with the input as its diagonal, all other elements are zero.', '\n', 'N-D arrays: extracts the diagonals of the sub-arrays with axes specified by ', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/diag_op.cc:L86', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.dot(lhs=None, rhs=None, transpose_a=_Null, transpose_b=_Null, forward_stype=_Null, out=None, name=None, **kwargs)Â¶","['Dot product of two arrays.', '\n', 'dot', 'â\x80\x99s behavior depends on the input array dimensions:', '\n', '\n', '1-D arrays: inner product of vectors', '\n', '2-D arrays: matrix multiplication', '\n', 'N-D arrays: a sum product over the last axis of the first input and the first\naxis of the second input', '\n', '\n', 'The storage type of ', 'dot', ' output depends on storage types of inputs, transpose option and\nforward_stype option for output storage type. Implemented sparse operations include:', '\n', '\n', 'dot(default, default, transpose_a=True/False, transpose_b=True/False) = default', '\n', 'dot(csr, default, transpose_a=True) = default', '\n', 'dot(csr, default, transpose_a=True) = row_sparse', '\n', 'dot(csr, default) = default', '\n', 'dot(csr, row_sparse) = default', '\n', 'dot(default, csr) = csr (CPU only)', '\n', 'dot(default, csr, forward_stype=â\x80\x99defaultâ\x80\x99) = default', '\n', 'dot(default, csr, transpose_b=True, forward_stype=â\x80\x99defaultâ\x80\x99) = default', '\n', '\n', 'If the combination of input storage types and forward_stype does not match any of the\nabove patterns, ', 'dot', ' will fallback and generate output with default storage.', '\n', '\n', 'Note', '\n', 'If the storage type of the lhs is â\x80\x9ccsrâ\x80\x9d, the storage type of gradient w.r.t rhs will be\nâ\x80\x9crow_sparseâ\x80\x9d. Only a subset of optimizers support sparse gradients, including SGD, AdaGrad\nand Adam. Note that by default lazy updates is turned on, which may perform differently\nfrom standard updates. For more details, please check the Optimization API at:\n', '\n', '\n', 'Defined in src/operator/tensor/dot.cc:L77', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.elemwise_add(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Adds arguments element-wise.', '\n', 'The storage type of ', 'elemwise_add', ' output depends on storage types of inputs', '\n', '\n', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Example', '\n', None, '\n', '\n', '\n']",">>> x=mx.nd.array([1,2,3,4])
>>> y=mx.nd.array([1.1,2.1,3.1,4.1])
>>> mx.nd.elemwise_add(x,y).asnumpy()
array([ 2.0999999 ,  4.0999999 ,  6.0999999 ,  8.10000038], dtype=float32)
"
"
mxnet.ndarray.elemwise_div(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Divides arguments element-wise.', '\n', 'The storage type of ', 'elemwise_div', ' output is always dense', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.elemwise_mul(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Multiplies arguments element-wise.', '\n', 'The storage type of ', 'elemwise_mul', ' output depends on storage types of inputs', '\n', '\n', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.elemwise_sub(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Subtracts arguments element-wise.', '\n', 'The storage type of ', 'elemwise_sub', ' output depends on storage types of inputs', '\n', '\n', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.erf(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise gauss error function of the input.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L886', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.erfinv(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise inverse gauss error function of the input.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L908', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.exp(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise exponential value of the input.', '\n', '\n\\[exp(x) = e^x \\approx 2.718^x\\]', '\n', 'Example:', '\n', None, '\n', '\n', 'The storage type of ', 'exp', ' output is always dense', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_logexp.cc:L64', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.expand_dims(data=None, axis=_Null, out=None, name=None, **kwargs)Â¶","['Inserts a new axis of size 1 into the array shape\nFor example, given ', 'x', ' with shape ', '(2,3,4)', ', then ', 'expand_dims(x,', '\nwill return a new array with shape ', '(2,1,3,4)', '.', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L394', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.expm1(data=None, out=None, name=None, **kwargs)Â¶","['Returns ', 'exp(x)', ' computed element-wise on the input.', '\n', 'This function provides greater precision than ', 'exp(x)', ' for small values of ', 'x', '.', '\n', 'The storage type of ', 'expm1', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_logexp.cc:L244', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.fill_element_0index(lhs=None, mhs=None, rhs=None, out=None, name=None, **kwargs)Â¶","['Fill one element of each line(row for python, column for R/Julia) in lhs according to index indicated by rhs and values indicated by mhs. This function assume rhs uses 0-based index.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.fix(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise rounded value to the nearest integer towards zero of the input.', '\n', 'Example:', '\n', None, '\n', '\n', 'The storage type of ', 'fix', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L874', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.flatten(data=None, out=None, name=None, **kwargs)Â¶","['Flattens the input array into a 2-D array by collapsing the higher dimensions.\n.. note:: ', 'Flatten', ' is deprecated. Use ', 'flatten', ' instead.\nFor an input array with shape ', '(d1,', ', ', 'flatten', ' operation reshapes\nthe input array into an output array of shape ', '(d1,', '.\nNote that the behavior of this function is different from numpy.ndarray.flatten,\nwhich behaves similar to mxnet.ndarray.reshape((-1,)).\nExample:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L249', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.flip(data=None, axis=_Null, out=None, name=None, **kwargs)Â¶","['Reverses the order of elements along given axis while preserving array shape.\nNote: reverse and flip are equivalent. We use reverse in the following examples.\nExamples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L831', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.floor(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise floor of the input.', '\n', 'The floor of the scalar x is the largest integer i, such that i <= x.', '\n', 'Example:', '\n', None, '\n', '\n', 'The storage type of ', 'floor', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L836', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.ftml_update(weight=None, grad=None, d=None, v=None, z=None, lr=_Null, beta1=_Null, beta2=_Null, epsilon=_Null, t=_Null, wd=_Null, rescale_grad=_Null, clip_grad=_Null, out=None, name=None, **kwargs)Â¶","['The FTML optimizer described in\n', 'FTML - Follow the Moving Leader in Deep Learning', ',\navailable at ', 'http://proceedings.mlr.press/v70/zheng17a/zheng17a.pdf', '.', '\n', '\n\\[\\begin{split}g_t = \\nabla J(W_{t-1})\\\\\nv_t = \\beta_2 v_{t-1} + (1 - \\beta_2) g_t^2\\\\\nd_t = \\frac{ 1 - \\beta_1^t }{ \\eta_t } (\\sqrt{ \\frac{ v_t }{ 1 - \\beta_2^t } } + \\epsilon)\n\\sigma_t = d_t - \\beta_1 d_{t-1}\nz_t = \\beta_1 z_{ t-1 } + (1 - \\beta_1^t) g_t - \\sigma_t W_{t-1}\nW_t = - \\frac{ z_t }{ d_t }\\end{split}\\]', '\n', 'Defined in src/operator/optimizer_op.cc:L639', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.ftrl_update(weight=None, grad=None, z=None, n=None, lr=_Null, lamda1=_Null, beta=_Null, wd=_Null, rescale_grad=_Null, clip_gradient=_Null, out=None, name=None, **kwargs)Â¶","['Update function for Ftrl optimizer.\nReferenced from ', 'Ad Click Prediction: a View from the Trenches', ', available at\n', 'http://dl.acm.org/citation.cfm?id=2488200', '.', '\n', 'It updates the weights using:', '\n', None, '\n', '\n', 'If w, z and n are all of ', 'row_sparse', ' storage type,\nonly the row slices whose indices appear in grad.indices are updated (for w, z and n):', '\n', None, '\n', '\n', 'Defined in src/operator/optimizer_op.cc:L875', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.gamma(data=None, out=None, name=None, **kwargs)Â¶","['Returns the gamma function (extension of the factorial function to the reals), computed element-wise on the input array.', '\n', 'The storage type of ', 'gamma', ' output is always dense', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.gammaln(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise log of the absolute value of the gamma function of the input.', '\n', 'The storage type of ', 'gammaln', ' output is always dense', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.gather_nd(data=None, indices=None, out=None, name=None, **kwargs)Â¶","['Gather elements or slices from ', 'data', ' and store to a tensor whose\nshape is defined by ', 'indices', '.', '\n', 'Given ', 'data', ' with shape ', '(X_0, X_1, â\x80¦, X_{N-1})', ' and indices with shape\n', '(M, Y_0, â\x80¦, Y_{K-1})', ', the output will have shape ', '(Y_0, â\x80¦, Y_{K-1}, X_M, â\x80¦, X_{N-1})', ',\nwhere ', 'M <= N', '. If ', 'M == N', ', output shape will simply be ', '(Y_0, â\x80¦, Y_{K-1})', '.', '\n', 'The elements in output is defined as follows:', '\n', None, '\n', '\n', 'Examples:', '\n', None, '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.hard_sigmoid(data=None, alpha=_Null, beta=_Null, out=None, name=None, **kwargs)Â¶","['Computes hard sigmoid of x element-wise.', '\n', '\n\\[y = max(0, min(1, alpha * x + beta))\\]', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L161', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.identity(data=None, out=None, name=None, **kwargs)Â¶","['Returns a copy of the input.', '\n', 'From:src/operator/tensor/elemwise_unary_op_basic.cc:244', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.im2col(data=None, kernel=_Null, stride=_Null, dilate=_Null, pad=_Null, out=None, name=None, **kwargs)Â¶","['Extract sliding blocks from input array.', '\n', 'This operator is used in vanilla convolution implementation to transform the sliding\nblocks on image to column matrix, then the convolution operation can be computed\nby matrix multiplication between column and convolution weight. Due to the close\nrelation between im2col and convolution, the concept of ', 'kernel', ', ', 'stride', ',\n', 'dilate', ' and ', 'pad', ' in this operator are inherited from convolution operation.', '\n', 'Given the input data of shape ', '\\((N, C, *)\\)', ', where ', '\\(N\\)', ' is the batch size,\n', '\\(C\\)', ' is the channel size, and ', '\\(*\\)', ' is the arbitrary spatial dimension,\nthe output column array is always with shape ', '\\((N, C \\times \\prod(\\text{kernel}), W)\\)', ',\nwhere ', '\\(C \\times \\prod(\\text{kernel})\\)', ' is the block size, and ', '\\(W\\)', ' is the\nblock number which is the spatial size of the convolution output with same input parameters.\nOnly 1-D, 2-D and 3-D of spatial dimension is supported in this operator.', '\n', 'Defined in src/operator/nn/im2col.cc:L99', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.khatri_rao(*args, **kwargs)Â¶","['Computes the Khatri-Rao product of the input matrices.', '\n', 'Given a collection of ', '\\(n\\)', ' input matrices,', '\n', '\n\\[A_1 \\in \\mathbb{R}^{M_1 \\times M}, \\ldots, A_n \\in \\mathbb{R}^{M_n \\times N},\\]', '\n', 'the (column-wise) Khatri-Rao product is defined as the matrix,', '\n', '\n\\[X = A_1 \\otimes \\cdots \\otimes A_n \\in \\mathbb{R}^{(M_1 \\cdots M_n) \\times N},\\]', '\n', 'where the ', '\\(k\\)', ' th column is equal to the column-wise outer product\n', '\\({A_1}_k \\otimes \\cdots \\otimes {A_n}_k\\)', ' where ', '\\({A_i}_k\\)', ' is the kth\ncolumn of the ith matrix.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/contrib/krprod.cc:L108', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.lamb_update_phase1(weight=None, grad=None, mean=None, var=None, beta1=_Null, beta2=_Null, epsilon=_Null, t=_Null, bias_correction=_Null, wd=_Null, rescale_grad=_Null, clip_gradient=_Null, out=None, name=None, **kwargs)Â¶","['Phase I of lamb update it performs the following operations and returns g:.', '\n', 'Link to paper: ', 'https://arxiv.org/pdf/1904.00962.pdf', '\n', '\n\\[ \\begin{align}\\begin{aligned}\\begin{gather*}\ngrad = grad * rescale_grad\nif (grad < -clip_gradient)\nthen\n     grad = -clip_gradient\nif (grad > clip_gradient)\nthen\n     grad = clip_gradient\\\\mean = beta1 * mean + (1 - beta1) * grad;\nvariance = beta2 * variance + (1. - beta2) * grad ^ 2;\\\\if (bias_correction)\nthen\n     mean_hat = mean / (1. - beta1^t);\n     var_hat = var / (1 - beta2^t);\n     g = mean_hat / (var_hat^(1/2) + epsilon) + wd * weight;\nelse\n     g = mean / (var_data^(1/2) + epsilon) + wd * weight;\n\\end{gather*}\\end{aligned}\\end{align} \\]', '\n', 'Defined in src/operator/optimizer_op.cc:L952', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.lamb_update_phase2(weight=None, g=None, r1=None, r2=None, lr=_Null, lower_bound=_Null, upper_bound=_Null, out=None, name=None, **kwargs)Â¶","['Phase II of lamb update it performs the following operations and updates grad.', '\n', 'Link to paper: ', 'https://arxiv.org/pdf/1904.00962.pdf', '\n', '\n\\[ \\begin{align}\\begin{aligned}\\begin{gather*}\nif (lower_bound >= 0)\nthen\n     r1 = max(r1, lower_bound)\nif (upper_bound >= 0)\nthen\n     r1 = max(r1, upper_bound)\\\\if (r1 == 0 or r2 == 0)\nthen\n     lr = lr\nelse\n     lr = lr * (r1/r2)\nweight = weight - lr * g\n\\end{gather*}\\end{aligned}\\end{align} \\]', '\n', 'Defined in src/operator/optimizer_op.cc:L991', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg_det(A=None, out=None, name=None, **kwargs)Â¶","['Compute the determinant of a matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', ', 'A', ' is a square matrix. We compute:', '\n', '\n', 'out', '\n', 'If ', 'n>2', ', ', 'det', ' is performed separately on the trailing two dimensions\nfor all inputs (batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', '\n', 'Note', '\n', 'There is no gradient backwarded when A is non-invertible (which is\nequivalent to det(A) = 0) because zero is rarely hit upon in float\npoint computation and the Jacobiâ\x80\x99s formula on determinant gradient\nis not computationally efficient when A is non-invertible.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L974', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg_extractdiag(A=None, offset=_Null, out=None, name=None, **kwargs)Â¶","['Extracts the diagonal entries of a square matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', then ', 'A', ' represents a single square matrix which diagonal elements get extracted as a 1-dimensional tensor.', '\n', 'If ', 'n>2', ', then ', 'A', ' represents a batch of square matrices on the trailing two dimensions. The extracted diagonals are returned as an ', 'n-1', '-dimensional tensor.', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L494', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg_extracttrian(A=None, offset=_Null, lower=_Null, out=None, name=None, **kwargs)Â¶","['Extracts a triangular sub-matrix from a square matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', then ', 'A', ' represents a single square matrix from which a triangular sub-matrix is extracted as a 1-dimensional tensor.', '\n', 'If ', 'n>2', ', then ', 'A', ' represents a batch of square matrices on the trailing two dimensions. The extracted triangular sub-matrices are returned as an ', 'n-1', '-dimensional tensor.', '\n', 'The ', 'offset', ' and ', 'lower', ' parameters determine the triangle to be extracted:', '\n', '\n', 'When ', '\n', 'When ', '\n', 'When ', '\n', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L604', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg_gelqf(A=None, out=None, name=None, **kwargs)Â¶","['LQ factorization for general matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', we compute the LQ factorization (LAPACK ', 'gelqf', ', followed by ', 'orglq', '). ', 'A', '\nmust have shape ', '(x, y)', ' with ', 'x <= y', ', and must have full rank ', '=x', '. The LQ\nfactorization consists of ', 'L', ' with shape ', '(x, x)', ' and ', 'Q', ' with shape ', '(x, y)', ', so\nthat:', '\n', '\n', 'A', '\n', 'Here, ', 'L', ' is lower triangular (upper triangle equal to zero) with nonzero diagonal,\nand ', 'Q', ' is row-orthonormal, meaning that', '\n', '\n', 'Q', '\n', 'is equal to the identity matrix of shape ', '(x, x)', '.', '\n', 'If ', 'n>2', ', ', 'gelqf', ' is performed separately on the trailing two dimensions for all\ninputs (batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L797', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg_gemm(A=None, B=None, C=None, transpose_a=_Null, transpose_b=_Null, alpha=_Null, beta=_Null, axis=_Null, out=None, name=None, **kwargs)Â¶","['Performs general matrix multiplication and accumulation.\nInput are tensors ', 'A', ', ', 'B', ', ', 'C', ', each of dimension ', 'n >= 2', ' and having the same shape\non the leading ', 'n-2', ' dimensions.', '\n', 'If ', 'n=2', ', the BLAS3 function ', 'gemm', ' is performed:', '\n', '\n', 'out', '\n', 'Here, ', 'alpha', ' and ', 'beta', ' are scalar parameters, and ', 'op()', ' is either the identity or\nmatrix transposition (depending on ', 'transpose_a', ', ', 'transpose_b', ').', '\n', 'If ', 'n>2', ', ', 'gemm', ' is performed separately for a batch of matrices. The column indices of the matrices\nare given by the last dimensions of the tensors, the row indices by the axis specified with the ', 'axis', '\nparameter. By default, the trailing two dimensions will be used for matrix encoding.', '\n', 'For a non-default axis parameter, the operation performed is equivalent to a series of swapaxes/gemm/swapaxes\ncalls. For example let ', 'A', ', ', 'B', ', ', 'C', ' be 5 dimensional tensors. Then gemm(', 'A', ', ', 'B', ', ', 'C', ', axis=1) is equivalent\nto the following without the overhead of the additional swapaxis operations:', '\n', None, '\n', '\n', 'When the input data is of type float32 and the environment variables MXNET_CUDA_ALLOW_TENSOR_CORE\nand MXNET_CUDA_TENSOR_OP_MATH_ALLOW_CONVERSION are set to 1, this operator will try to use\npseudo-float16 precision (float32 math with float16 I/O) precision in order to use\nTensor Cores on suitable NVIDIA GPUs. This can sometimes give significant speedups.', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L88', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg_gemm2(A=None, B=None, transpose_a=_Null, transpose_b=_Null, alpha=_Null, axis=_Null, out=None, name=None, **kwargs)Â¶","['Performs general matrix multiplication.\nInput are tensors ', 'A', ', ', 'B', ', each of dimension ', 'n >= 2', ' and having the same shape\non the leading ', 'n-2', ' dimensions.', '\n', 'If ', 'n=2', ', the BLAS3 function ', 'gemm', ' is performed:', '\n', '\n', 'out', '\n', 'Here ', 'alpha', ' is a scalar parameter and ', 'op()', ' is either the identity or the matrix\ntransposition (depending on ', 'transpose_a', ', ', 'transpose_b', ').', '\n', 'If ', 'n>2', ', ', 'gemm', ' is performed separately for a batch of matrices. The column indices of the matrices\nare given by the last dimensions of the tensors, the row indices by the axis specified with the ', 'axis', '\nparameter. By default, the trailing two dimensions will be used for matrix encoding.', '\n', 'For a non-default axis parameter, the operation performed is equivalent to a series of swapaxes/gemm/swapaxes\ncalls. For example let ', 'A', ', ', 'B', ' be 5 dimensional tensors. Then gemm(', 'A', ', ', 'B', ', axis=1) is equivalent to\nthe following without the overhead of the additional swapaxis operations:', '\n', None, '\n', '\n', 'When the input data is of type float32 and the environment variables MXNET_CUDA_ALLOW_TENSOR_CORE\nand MXNET_CUDA_TENSOR_OP_MATH_ALLOW_CONVERSION are set to 1, this operator will try to use\npseudo-float16 precision (float32 math with float16 I/O) precision in order to use\nTensor Cores on suitable NVIDIA GPUs. This can sometimes give significant speedups.', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L162', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg_inverse(A=None, out=None, name=None, **kwargs)Â¶","['Compute the inverse of a matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', ', 'A', ' is a square matrix. We compute:', '\n', '\n', 'out', '\n', 'If ', 'n>2', ', ', 'inverse', ' is performed separately on the trailing two dimensions\nfor all inputs (batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L919', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg_makediag(A=None, offset=_Null, out=None, name=None, **kwargs)Â¶","['Constructs a square matrix with the input as diagonal.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 1', '.', '\n', 'If ', 'n=1', ', then ', 'A', ' represents the diagonal entries of a single square matrix. This matrix will be returned as a 2-dimensional tensor.\nIf ', 'n>1', ', then ', 'A', ' represents a batch of diagonals of square matrices. The batch of diagonal matrices will be returned as an ', 'n+1', '-dimensional tensor.', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L546', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg_maketrian(A=None, offset=_Null, lower=_Null, out=None, name=None, **kwargs)Â¶","['Constructs a square matrix with the input representing a specific triangular sub-matrix.\nThis is basically the inverse of ', 'linalg.extracttrian', '. Input is a tensor ', 'A', ' of dimension ', 'n >= 1', '.', '\n', 'If ', 'n=1', ', then ', 'A', ' represents the entries of a triangular matrix which is lower triangular if ', 'offset<0', ' or ', 'offset=0', ', ', 'lower=true', '. The resulting matrix is derived by first constructing the square\nmatrix with the entries outside the triangle set to zero and then adding ', 'offset', '-times an additional\ndiagonal with zero entries to the square matrix.', '\n', 'If ', 'n>1', ', then ', 'A', ' represents a batch of triangular sub-matrices. The batch of corresponding square matrices is returned as an ', 'n+1', '-dimensional tensor.', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L672', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg_potrf(A=None, out=None, name=None, **kwargs)Â¶","['Performs Cholesky factorization of a symmetric positive-definite matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', the Cholesky factor ', 'B', ' of the symmetric, positive definite matrix ', 'A', ' is\ncomputed. ', 'B', ' is triangular (entries of upper or lower triangle are all zero), has\npositive diagonal entries, and:', '\n', '\n', 'A', '\n', 'If ', 'n>2', ', ', 'potrf', ' is performed separately on the trailing two dimensions for all inputs\n(batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L213', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg_potri(A=None, out=None, name=None, **kwargs)Â¶","['Performs matrix inversion from a Cholesky factorization.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', ', 'A', ' is a triangular matrix (entries of upper or lower triangle are all zero)\nwith positive diagonal. We compute:', '\n', '\n', 'out', '\n', 'In other words, if ', 'A', ' is the Cholesky factor of a symmetric positive definite matrix\n', 'B', ' (obtained by ', 'potrf', '), then', '\n', '\n', 'out', '\n', 'If ', 'n>2', ', ', 'potri', ' is performed separately on the trailing two dimensions for all inputs\n(batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', '\n', 'Note', '\n', 'Use this operator only if you are certain you need the inverse of ', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L274', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg_slogdet(A=None, out=None, name=None, **kwargs)Â¶","['Compute the sign and log of the determinant of a matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', ', 'A', ' is a square matrix. We compute:', '\n', '\n', 'sign', '\n', 'If ', 'n>2', ', ', 'slogdet', ' is performed separately on the trailing two dimensions\nfor all inputs (batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', '\n', 'Note', '\n', 'The gradient is not properly defined on sign, so the gradient of\nit is not backwarded.', '\n', '\n', '\n', 'Note', '\n', 'No gradient is backwarded when A is non-invertible. Please see\nthe docs of operator det for detail.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L1033', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg_sumlogdiag(A=None, out=None, name=None, **kwargs)Â¶","['Computes the sum of the logarithms of the diagonal elements of a square matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', ', 'A', ' must be square with positive diagonal entries. We sum the natural\nlogarithms of the diagonal elements, the result has shape (1,).', '\n', 'If ', 'n>2', ', ', 'sumlogdiag', ' is performed separately on the trailing two dimensions for all\ninputs (batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L444', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg_syrk(A=None, transpose=_Null, alpha=_Null, out=None, name=None, **kwargs)Â¶","['Multiplication of matrix with its transpose.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', the operator performs the BLAS3 function ', 'syrk', ':', '\n', '\n', 'out', '\n', 'if ', 'transpose=False', ', or', '\n', '\n', 'out', '\n', 'if ', 'transpose=True', '.', '\n', 'If ', 'n>2', ', ', 'syrk', ' is performed separately on the trailing two dimensions for all\ninputs (batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L729', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg_trmm(A=None, B=None, transpose=_Null, rightside=_Null, lower=_Null, alpha=_Null, out=None, name=None, **kwargs)Â¶","['Performs multiplication with a lower triangular matrix.\nInput are tensors ', 'A', ', ', 'B', ', each of dimension ', 'n >= 2', ' and having the same shape\non the leading ', 'n-2', ' dimensions.', '\n', 'If ', 'n=2', ', ', 'A', ' must be triangular. The operator performs the BLAS3 function\n', 'trmm', ':', '\n', '\n', 'out', '\n', 'if ', 'rightside=False', ', or', '\n', '\n', 'out', '\n', 'if ', 'rightside=True', '. Here, ', 'alpha', ' is a scalar parameter, and ', 'op()', ' is either the\nidentity or the matrix transposition (depending on ', 'transpose', ').', '\n', 'If ', 'n>2', ', ', 'trmm', ' is performed separately on the trailing two dimensions for all inputs\n(batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L332', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg_trsm(A=None, B=None, transpose=_Null, rightside=_Null, lower=_Null, alpha=_Null, out=None, name=None, **kwargs)Â¶","['Solves matrix equation involving a lower triangular matrix.\nInput are tensors ', 'A', ', ', 'B', ', each of dimension ', 'n >= 2', ' and having the same shape\non the leading ', 'n-2', ' dimensions.', '\n', 'If ', 'n=2', ', ', 'A', ' must be triangular. The operator performs the BLAS3 function\n', 'trsm', ', solving for ', 'out', ' in:', '\n', '\n', 'op', '\n', 'if ', 'rightside=False', ', or', '\n', '\n', 'out', '\n', 'if ', 'rightside=True', '. Here, ', 'alpha', ' is a scalar parameter, and ', 'op()', ' is either the\nidentity or the matrix transposition (depending on ', 'transpose', ').', '\n', 'If ', 'n>2', ', ', 'trsm', ' is performed separately on the trailing two dimensions for all inputs\n(batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L395', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.log(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise Natural logarithmic value of the input.', '\n', 'The natural logarithm is logarithm in base ', 'e', ', so that ', 'log(exp(x))', '\n', 'The storage type of ', 'log', ' output is always dense', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_logexp.cc:L77', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.log10(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise Base-10 logarithmic value of the input.', '\n', '10**log10(x)', '\n', 'The storage type of ', 'log10', ' output is always dense', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_logexp.cc:L94', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.log1p(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise ', 'log(1', ' value of the input.', '\n', 'This function is more accurate than ', 'log(1', '  for small ', 'x', ' so that\n', '\\(1+x\\approx 1\\)', '\n', 'The storage type of ', 'log1p', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_logexp.cc:L199', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.log2(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise Base-2 logarithmic value of the input.', '\n', '2**log2(x)', '\n', 'The storage type of ', 'log2', ' output is always dense', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_logexp.cc:L106', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.log_softmax(data=None, axis=_Null, temperature=_Null, dtype=_Null, use_length=_Null, out=None, name=None, **kwargs)Â¶","['Computes the log softmax of the input.\nThis is equivalent to computing softmax followed by log.', '\n', 'Examples:', '\n', None, '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.logical_not(data=None, out=None, name=None, **kwargs)Â¶","['Returns the result of logical NOT (!) function', '\n', 'Example', '\n', 'logical_not([-2., 0., 1.]) = [0., 1., 0.]', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.make_loss(data=None, out=None, name=None, **kwargs)Â¶","['Make your own loss function in network construction.', '\n', 'This operator accepts a customized loss function symbol as a terminal loss and\nthe symbol should be an operator with no backward dependency.\nThe output of this function is the gradient of loss with respect to the input data.', '\n', 'For example, if you are a making a cross entropy loss function. Assume ', 'out', ' is the\npredicted output and ', 'label', ' is the true label, then the cross entropy can be defined as:', '\n', None, '\n', '\n', 'We will need to use ', 'make_loss', ' when we are creating our own loss function or we want to\ncombine multiple loss functions. Also we may want to stop some variablesâ\x80\x99 gradients\nfrom backpropagation. See more detail in ', 'BlockGrad', ' or ', 'stop_gradient', '.', '\n', 'The storage type of ', 'make_loss', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L358', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.max(data=None, axis=_Null, keepdims=_Null, exclude=_Null, out=None, name=None, **kwargs)Â¶","['Computes the max of array elements over given axes.', '\n', 'Defined in src/operator/tensor/./broadcast_reduce_op.h:L31', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.max_axis(data=None, axis=_Null, keepdims=_Null, exclude=_Null, out=None, name=None, **kwargs)Â¶","['Computes the max of array elements over given axes.', '\n', 'Defined in src/operator/tensor/./broadcast_reduce_op.h:L31', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.mean(data=None, axis=_Null, keepdims=_Null, exclude=_Null, out=None, name=None, **kwargs)Â¶","['Computes the mean of array elements over given axes.', '\n', 'Defined in src/operator/tensor/./broadcast_reduce_op.h:L83', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.min(data=None, axis=_Null, keepdims=_Null, exclude=_Null, out=None, name=None, **kwargs)Â¶","['Computes the min of array elements over given axes.', '\n', 'Defined in src/operator/tensor/./broadcast_reduce_op.h:L46', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.min_axis(data=None, axis=_Null, keepdims=_Null, exclude=_Null, out=None, name=None, **kwargs)Â¶","['Computes the min of array elements over given axes.', '\n', 'Defined in src/operator/tensor/./broadcast_reduce_op.h:L46', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.moments(data=None, axes=_Null, keepdims=_Null, out=None, name=None, **kwargs)Â¶","['Calculate the mean and variance of ', 'data', '.', '\n', 'The mean and variance are calculated by aggregating the contents of data across axes.\nIf x is 1-D and axes = [0] this is just the mean and variance of a vector.', '\n', 'Example', '\n', 'x = [[1, 2, 3], [4, 5, 6]]\nmean, var = moments(data=x, axes=[0])\nmean = [2.5, 3.5, 4.5]\nvar = [2.25, 2.25, 2.25]\nmean, var = moments(data=x, axes=[1])\nmean = [2.0, 5.0]\nvar = [0.66666667, 0.66666667]\nmean, var = moments(data=x, axis=[0, 1])\nmean = [3.5]\nvar = [2.9166667]', '\n', 'Defined in src/operator/nn/moments.cc:L53', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.mp_lamb_update_phase1(weight=None, grad=None, mean=None, var=None, weight32=None, beta1=_Null, beta2=_Null, epsilon=_Null, t=_Null, bias_correction=_Null, wd=_Null, rescale_grad=_Null, clip_gradient=_Null, out=None, name=None, **kwargs)Â¶","['Mixed Precision version of Phase I of lamb update\nit performs the following operations and returns g:.', '\n', '\n', 'Link to paper: ', '\n', 'Defined in src/operator/optimizer_op.cc:L1032', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.mp_lamb_update_phase2(weight=None, g=None, r1=None, r2=None, weight32=None, lr=_Null, lower_bound=_Null, upper_bound=_Null, out=None, name=None, **kwargs)Â¶","['Mixed Precision version Phase II of lamb update\nit performs the following operations and updates grad.', '\n', '\n', 'Link to paper: ', '\n', 'Defined in src/operator/optimizer_op.cc:L1074', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.mp_nag_mom_update(weight=None, grad=None, mom=None, weight32=None, lr=_Null, momentum=_Null, wd=_Null, rescale_grad=_Null, clip_gradient=_Null, out=None, name=None, **kwargs)Â¶","['Update function for multi-precision Nesterov Accelerated Gradient( NAG) optimizer.', '\n', 'Defined in src/operator/optimizer_op.cc:L744', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.mp_sgd_mom_update(weight=None, grad=None, mom=None, weight32=None, lr=_Null, momentum=_Null, wd=_Null, rescale_grad=_Null, clip_gradient=_Null, lazy_update=_Null, out=None, name=None, **kwargs)Â¶","['Updater function for multi-precision sgd optimizer', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.mp_sgd_update(weight=None, grad=None, weight32=None, lr=_Null, wd=_Null, rescale_grad=_Null, clip_gradient=_Null, lazy_update=_Null, out=None, name=None, **kwargs)Â¶","['Updater function for multi-precision sgd optimizer', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.multi_all_finite(*data, **kwargs)Â¶","['Check if all the float numbers in all the arrays are finite (used for AMP)', '\n', 'Defined in src/operator/contrib/all_finite.cc:L132', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.multi_lars(lrs=None, weights_sum_sq=None, grads_sum_sq=None, wds=None, eta=_Null, eps=_Null, rescale_grad=_Null, out=None, name=None, **kwargs)Â¶","['Compute the LARS coefficients of multiple weights and grads from their sums of squareâ\x80\x9d', '\n', 'Defined in src/operator/contrib/multi_lars.cc:L36', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.multi_mp_sgd_mom_update(*data, **kwargs)Â¶","['Momentum update function for multi-precision Stochastic Gradient Descent (SGD) optimizer.', '\n', 'Momentum update has better convergence rates on neural networks. Mathematically it looks\nlike below:', '\n', '\n\\[\\begin{split}v_1 = \\alpha * \\nabla J(W_0)\\\\\nv_t = \\gamma v_{t-1} - \\alpha * \\nabla J(W_{t-1})\\\\\nW_t = W_{t-1} + v_t\\end{split}\\]', '\n', 'It updates the weights using:', '\n', None, '\n', '\n', 'Where the parameter ', 'momentum', ' is the decay rate of momentum estimates at each epoch.', '\n', 'Defined in src/operator/optimizer_op.cc:L471', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.multi_mp_sgd_update(*data, **kwargs)Â¶","['Update function for multi-precision Stochastic Gradient Descent (SDG) optimizer.', '\n', 'It updates the weights using:', '\n', None, '\n', '\n', 'Defined in src/operator/optimizer_op.cc:L416', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.multi_sgd_mom_update(*data, **kwargs)Â¶","['Momentum update function for Stochastic Gradient Descent (SGD) optimizer.', '\n', 'Momentum update has better convergence rates on neural networks. Mathematically it looks\nlike below:', '\n', '\n\\[\\begin{split}v_1 = \\alpha * \\nabla J(W_0)\\\\\nv_t = \\gamma v_{t-1} - \\alpha * \\nabla J(W_{t-1})\\\\\nW_t = W_{t-1} + v_t\\end{split}\\]', '\n', 'It updates the weights using:', '\n', None, '\n', '\n', 'Where the parameter ', 'momentum', ' is the decay rate of momentum estimates at each epoch.', '\n', 'Defined in src/operator/optimizer_op.cc:L373', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.multi_sgd_update(*data, **kwargs)Â¶","['Update function for Stochastic Gradient Descent (SDG) optimizer.', '\n', 'It updates the weights using:', '\n', None, '\n', '\n', 'Defined in src/operator/optimizer_op.cc:L328', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.multi_sum_sq(*data, **kwargs)Â¶","['Compute the sums of squares of multiple arrays', '\n', 'Defined in src/operator/contrib/multi_sum_sq.cc:L35', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.nag_mom_update(weight=None, grad=None, mom=None, lr=_Null, momentum=_Null, wd=_Null, rescale_grad=_Null, clip_gradient=_Null, out=None, name=None, **kwargs)Â¶","['Update function for Nesterov Accelerated Gradient( NAG) optimizer.\nIt updates the weights using the following formula,', '\n', '\n\\[\\begin{split}v_t = \\gamma v_{t-1} + \\eta * \\nabla J(W_{t-1} - \\gamma v_{t-1})\\\\\nW_t = W_{t-1} - v_t\\end{split}\\]', '\n', 'Where\n', '\\(\\eta\\)', ' is the learning rate of the optimizer\n', '\\(\\gamma\\)', ' is the decay rate of the momentum estimate\n', '\\(\\v_t\\)', ' is the update vector at time step ', 't', '\n', '\\(\\W_t\\)', ' is the weight vector at time step ', 't', '\n', 'Defined in src/operator/optimizer_op.cc:L725', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.nanprod(data=None, axis=_Null, keepdims=_Null, exclude=_Null, out=None, name=None, **kwargs)Â¶","['Computes the product of array elements over given axes treating Not a Numbers (', 'NaN', ') as one.', '\n', 'Defined in src/operator/tensor/broadcast_reduce_prod_value.cc:L46', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.nansum(data=None, axis=_Null, keepdims=_Null, exclude=_Null, out=None, name=None, **kwargs)Â¶","['Computes the sum of array elements over given axes treating Not a Numbers (', 'NaN', ') as zero.', '\n', 'Defined in src/operator/tensor/broadcast_reduce_sum_value.cc:L101', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.negative(data=None, out=None, name=None, **kwargs)Â¶","['Numerical negative of the argument, element-wise.', '\n', 'The storage type of ', 'negative', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.norm(data=None, ord=_Null, axis=_Null, out_dtype=_Null, keepdims=_Null, out=None, name=None, **kwargs)Â¶","['Computes the norm on an NDArray.', '\n', 'This operator computes the norm on an NDArray with the specified axis, depending\non the value of the ord parameter. By default, it computes the L2 norm on the entire\narray. Currently only ord=2 supports sparse ndarrays.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/broadcast_reduce_norm_value.cc:L88', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.normal(loc=_Null, scale=_Null, shape=_Null, ctx=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Draw random samples from a normal (Gaussian) distribution.', '\n', '\n', 'Note', '\n', 'The existing alias ', '\n', '\n', 'Samples are distributed according to a normal distribution parametrized by ', 'loc', ' (mean) and ', 'scale', '\n(standard deviation).', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/random/sample_op.cc:L112', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.one_hot(indices=None, depth=_Null, on_value=_Null, off_value=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Returns a one-hot array.', '\n', 'The locations represented by ', 'indices', ' take value ', 'on_value', ', while all\nother locations take value ', 'off_value', '.', '\n', 'one_hot', ' operation with ', 'indices', ' of shape ', '(i0,', ' and ', 'depth', '  of ', 'd', ' would result\nin an output array of shape ', '(i0,', ' with:', '\n', None, '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/indexing_op.cc:L882', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.ones_like(data=None, out=None, name=None, **kwargs)Â¶","['Return an array of ones with the same shape and type\nas the input array.', '\n', 'Examples:', '\n', None, '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.pad(data=None, mode=_Null, pad_width=_Null, constant_value=_Null, out=None, name=None, **kwargs)Â¶","['Pads an input array with a constant or edge values of the array.', '\n', '\n', 'Note', '\n', 'Pad', '\n', '\n', '\n', 'Note', '\n', 'Current implementation only supports 4D and 5D input arrays with padding applied\nonly on axes 1, 2 and 3. Expects axes 4 and 5 in ', '\n', '\n', 'This operation pads an input array with either a ', 'constant_value', ' or edge values\nalong each axis of the input array. The amount of padding is specified by ', 'pad_width', '.', '\n', 'pad_width', ' is a tuple of integer padding widths for each axis of the format\n', '(before_1,', '. The ', 'pad_width', ' should be of length ', '2*N', '\nwhere ', 'N', ' is the number of dimensions of the array.', '\n', 'For dimension ', 'N', ' of the input array, ', 'before_N', ' and ', 'after_N', ' indicates how many values\nto add before and after the elements of the array along dimension ', 'N', '.\nThe widths of the higher two dimensions ', 'before_1', ', ', 'after_1', ', ', 'before_2', ',\n', 'after_2', ' must be 0.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/pad.cc:L765', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.pick(data=None, index=None, axis=_Null, keepdims=_Null, mode=_Null, out=None, name=None, **kwargs)Â¶","['Picks elements from an input array according to the input indices along the given axis.', '\n', 'Given an input array of shape ', '(d0,', ' and indices of shape ', '(i0,)', ', the result will be\nan output array of shape ', '(i0,)', ' with:', '\n', None, '\n', '\n', 'By default, if any index mentioned is too large, it is replaced by the index that addresses\nthe last element along an axis (the ', 'clip', ' mode).', '\n', 'This function supports n-dimensional input and (n-1)-dimensional indices arrays.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/broadcast_reduce_op_index.cc:L150', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.preloaded_multi_mp_sgd_mom_update(*data, **kwargs)Â¶","['Momentum update function for multi-precision Stochastic Gradient Descent (SGD) optimizer.', '\n', 'Momentum update has better convergence rates on neural networks. Mathematically it looks\nlike below:', '\n', '\n\\[\\begin{split}v_1 = \\alpha * \\nabla J(W_0)\\\\\nv_t = \\gamma v_{t-1} - \\alpha * \\nabla J(W_{t-1})\\\\\nW_t = W_{t-1} + v_t\\end{split}\\]', '\n', 'It updates the weights using:', '\n', None, '\n', '\n', 'Where the parameter ', 'momentum', ' is the decay rate of momentum estimates at each epoch.', '\n', 'Defined in src/operator/contrib/preloaded_multi_sgd.cc:L199', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.preloaded_multi_mp_sgd_update(*data, **kwargs)Â¶","['Update function for multi-precision Stochastic Gradient Descent (SDG) optimizer.', '\n', 'It updates the weights using:', '\n', None, '\n', '\n', 'Defined in src/operator/contrib/preloaded_multi_sgd.cc:L139', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.preloaded_multi_sgd_mom_update(*data, **kwargs)Â¶","['Momentum update function for Stochastic Gradient Descent (SGD) optimizer.', '\n', 'Momentum update has better convergence rates on neural networks. Mathematically it looks\nlike below:', '\n', '\n\\[\\begin{split}v_1 = \\alpha * \\nabla J(W_0)\\\\\nv_t = \\gamma v_{t-1} - \\alpha * \\nabla J(W_{t-1})\\\\\nW_t = W_{t-1} + v_t\\end{split}\\]', '\n', 'It updates the weights using:', '\n', None, '\n', '\n', 'Where the parameter ', 'momentum', ' is the decay rate of momentum estimates at each epoch.', '\n', 'Defined in src/operator/contrib/preloaded_multi_sgd.cc:L90', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.preloaded_multi_sgd_update(*data, **kwargs)Â¶","['Update function for Stochastic Gradient Descent (SDG) optimizer.', '\n', 'It updates the weights using:', '\n', None, '\n', '\n', 'Defined in src/operator/contrib/preloaded_multi_sgd.cc:L41', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.prod(data=None, axis=_Null, keepdims=_Null, exclude=_Null, out=None, name=None, **kwargs)Â¶","['Computes the product of array elements over given axes.', '\n', 'Defined in src/operator/tensor/./broadcast_reduce_op.h:L30', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.radians(data=None, out=None, name=None, **kwargs)Â¶","['Converts each element of the input array from degrees to radians.', '\n', '\n\\[radians([0, 90, 180, 270, 360]) = [0, \\pi/2, \\pi, 3\\pi/2, 2\\pi]\\]', '\n', 'The storage type of ', 'radians', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_trig.cc:L351', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.random_exponential(lam=_Null, shape=_Null, ctx=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Draw random samples from an exponential distribution.', '\n', 'Samples are distributed according to an exponential distribution parametrized by ', 'lambda', ' (rate).', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/random/sample_op.cc:L136', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.random_gamma(alpha=_Null, beta=_Null, shape=_Null, ctx=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Draw random samples from a gamma distribution.', '\n', 'Samples are distributed according to a gamma distribution parametrized by ', 'alpha', ' (shape) and ', 'beta', ' (scale).', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/random/sample_op.cc:L124', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.random_generalized_negative_binomial(mu=_Null, alpha=_Null, shape=_Null, ctx=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Draw random samples from a generalized negative binomial distribution.', '\n', 'Samples are distributed according to a generalized negative binomial distribution parametrized by\n', 'mu', ' (mean) and ', 'alpha', ' (dispersion). ', 'alpha', ' is defined as ', '1/k', ' where ', 'k', ' is the failure limit of the\nnumber of unsuccessful experiments (generalized to real numbers).\nSamples will always be returned as a floating point data type.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/random/sample_op.cc:L178', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.random_negative_binomial(k=_Null, p=_Null, shape=_Null, ctx=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Draw random samples from a negative binomial distribution.', '\n', 'Samples are distributed according to a negative binomial distribution parametrized by\n', 'k', ' (limit of unsuccessful experiments) and ', 'p', ' (failure probability in each experiment).\nSamples will always be returned as a floating point data type.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/random/sample_op.cc:L163', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.random_normal(loc=_Null, scale=_Null, shape=_Null, ctx=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Draw random samples from a normal (Gaussian) distribution.', '\n', '\n', 'Note', '\n', 'The existing alias ', '\n', '\n', 'Samples are distributed according to a normal distribution parametrized by ', 'loc', ' (mean) and ', 'scale', '\n(standard deviation).', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/random/sample_op.cc:L112', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.random_pdf_dirichlet(sample=None, alpha=None, is_log=_Null, out=None, name=None, **kwargs)Â¶","['Computes the value of the PDF of ', 'sample', ' of\nDirichlet distributions with parameter ', 'alpha', '.', '\n', 'The shape of ', 'alpha', ' must match the leftmost subshape of ', 'sample', '.  That is, ', 'sample', '\ncan have the same shape as ', 'alpha', ', in which case the output contains one density per\ndistribution, or ', 'sample', ' can be a tensor of tensors with that shape, in which case\nthe output is a tensor of densities such that the densities at index ', 'i', ' in the output\nare given by the samples at index ', 'i', ' in ', 'sample', ' parameterized by the value of ', 'alpha', '\nat index ', 'i', '.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/random/pdf_op.cc:L315', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.random_pdf_exponential(sample=None, lam=None, is_log=_Null, out=None, name=None, **kwargs)Â¶","['Computes the value of the PDF of ', 'sample', ' of\nexponential distributions with parameters ', 'lam', ' (rate).', '\n', 'The shape of ', 'lam', ' must match the leftmost subshape of ', 'sample', '.  That is, ', 'sample', '\ncan have the same shape as ', 'lam', ', in which case the output contains one density per\ndistribution, or ', 'sample', ' can be a tensor of tensors with that shape, in which case\nthe output is a tensor of densities such that the densities at index ', 'i', ' in the output\nare given by the samples at index ', 'i', ' in ', 'sample', ' parameterized by the value of ', 'lam', '\nat index ', 'i', '.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/random/pdf_op.cc:L304', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.random_pdf_gamma(sample=None, alpha=None, beta=None, is_log=_Null, out=None, name=None, **kwargs)Â¶","['Computes the value of the PDF of ', 'sample', ' of\ngamma distributions with parameters ', 'alpha', ' (shape) and ', 'beta', ' (rate).', '\n', 'alpha', ' and ', 'beta', ' must have the same shape, which must match the leftmost subshape\nof ', 'sample', '.  That is, ', 'sample', ' can have the same shape as ', 'alpha', ' and ', 'beta', ', in which\ncase the output contains one density per distribution, or ', 'sample', ' can be a tensor\nof tensors with that shape, in which case the output is a tensor of densities such that\nthe densities at index ', 'i', ' in the output are given by the samples at index ', 'i', ' in ', 'sample', '\nparameterized by the values of ', 'alpha', ' and ', 'beta', ' at index ', 'i', '.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/random/pdf_op.cc:L302', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.random_pdf_generalized_negative_binomial(sample=None, mu=None, alpha=None, is_log=_Null, out=None, name=None, **kwargs)Â¶","['Computes the value of the PDF of ', 'sample', ' of\ngeneralized negative binomial distributions with parameters ', 'mu', ' (mean)\nand ', 'alpha', ' (dispersion).  This can be understood as a reparameterization of\nthe negative binomial, where ', 'k', ' = ', '1 / alpha', ' and ', 'p', ' = ', '1 / (mu * alpha + 1)', '.', '\n', 'mu', ' and ', 'alpha', ' must have the same shape, which must match the leftmost subshape\nof ', 'sample', '.  That is, ', 'sample', ' can have the same shape as ', 'mu', ' and ', 'alpha', ', in which\ncase the output contains one density per distribution, or ', 'sample', ' can be a tensor\nof tensors with that shape, in which case the output is a tensor of densities such that\nthe densities at index ', 'i', ' in the output are given by the samples at index ', 'i', ' in ', 'sample', '\nparameterized by the values of ', 'mu', ' and ', 'alpha', ' at index ', 'i', '.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/random/pdf_op.cc:L313', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.random_pdf_negative_binomial(sample=None, k=None, p=None, is_log=_Null, out=None, name=None, **kwargs)Â¶","['Computes the value of the PDF of samples of\nnegative binomial distributions with parameters ', 'k', ' (failure limit) and ', 'p', ' (failure probability).', '\n', 'k', ' and ', 'p', ' must have the same shape, which must match the leftmost subshape\nof ', 'sample', '.  That is, ', 'sample', ' can have the same shape as ', 'k', ' and ', 'p', ', in which\ncase the output contains one density per distribution, or ', 'sample', ' can be a tensor\nof tensors with that shape, in which case the output is a tensor of densities such that\nthe densities at index ', 'i', ' in the output are given by the samples at index ', 'i', ' in ', 'sample', '\nparameterized by the values of ', 'k', ' and ', 'p', ' at index ', 'i', '.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/random/pdf_op.cc:L309', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.random_pdf_normal(sample=None, mu=None, sigma=None, is_log=_Null, out=None, name=None, **kwargs)Â¶","['Computes the value of the PDF of ', 'sample', ' of\nnormal distributions with parameters ', 'mu', ' (mean) and ', 'sigma', ' (standard deviation).', '\n', 'mu', ' and ', 'sigma', ' must have the same shape, which must match the leftmost subshape\nof ', 'sample', '.  That is, ', 'sample', ' can have the same shape as ', 'mu', ' and ', 'sigma', ', in which\ncase the output contains one density per distribution, or ', 'sample', ' can be a tensor\nof tensors with that shape, in which case the output is a tensor of densities such that\nthe densities at index ', 'i', ' in the output are given by the samples at index ', 'i', ' in ', 'sample', '\nparameterized by the values of ', 'mu', ' and ', 'sigma', ' at index ', 'i', '.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/random/pdf_op.cc:L299', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.random_pdf_poisson(sample=None, lam=None, is_log=_Null, out=None, name=None, **kwargs)Â¶","['Computes the value of the PDF of ', 'sample', ' of\nPoisson distributions with parameters ', 'lam', ' (rate).', '\n', 'The shape of ', 'lam', ' must match the leftmost subshape of ', 'sample', '.  That is, ', 'sample', '\ncan have the same shape as ', 'lam', ', in which case the output contains one density per\ndistribution, or ', 'sample', ' can be a tensor of tensors with that shape, in which case\nthe output is a tensor of densities such that the densities at index ', 'i', ' in the output\nare given by the samples at index ', 'i', ' in ', 'sample', ' parameterized by the value of ', 'lam', '\nat index ', 'i', '.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/random/pdf_op.cc:L306', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.random_pdf_uniform(sample=None, low=None, high=None, is_log=_Null, out=None, name=None, **kwargs)Â¶","['Computes the value of the PDF of ', 'sample', ' of\nuniform distributions on the intervals given by ', '[low,high)', '.', '\n', 'low', ' and ', 'high', ' must have the same shape, which must match the leftmost subshape\nof ', 'sample', '.  That is, ', 'sample', ' can have the same shape as ', 'low', ' and ', 'high', ', in which\ncase the output contains one density per distribution, or ', 'sample', ' can be a tensor\nof tensors with that shape, in which case the output is a tensor of densities such that\nthe densities at index ', 'i', ' in the output are given by the samples at index ', 'i', ' in ', 'sample', '\nparameterized by the values of ', 'low', ' and ', 'high', ' at index ', 'i', '.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/random/pdf_op.cc:L297', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.random_poisson(lam=_Null, shape=_Null, ctx=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Draw random samples from a Poisson distribution.', '\n', 'Samples are distributed according to a Poisson distribution parametrized by ', 'lambda', ' (rate).\nSamples will always be returned as a floating point data type.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/random/sample_op.cc:L149', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.random_randint(low=_Null, high=_Null, shape=_Null, ctx=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Draw random samples from a discrete uniform distribution.', '\n', 'Samples are uniformly distributed over the half-open interval ', '[low, high)', '\n(includes ', 'low', ', but excludes ', 'high', ').', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/random/sample_op.cc:L193', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.random_uniform(low=_Null, high=_Null, shape=_Null, ctx=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Draw random samples from a uniform distribution.', '\n', '\n', 'Note', '\n', 'The existing alias ', '\n', '\n', 'Samples are uniformly distributed over the half-open interval ', '[low, high)', '\n(includes ', 'low', ', but excludes ', 'high', ').', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/random/sample_op.cc:L95', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.ravel_multi_index(data=None, shape=_Null, out=None, name=None, **kwargs)Â¶","['Converts a batch of index arrays into an array of flat indices. The operator follows numpy conventions so a single multi index is given by a column of the input matrix. The leading dimension may be left unspecified by using -1 as placeholder.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/ravel.cc:L41', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.rcbrt(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise inverse cube-root value of the input.', '\n', '\n\\[rcbrt(x) = 1/\\sqrt[3]{x}\\]', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_pow.cc:L323', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.reciprocal(data=None, out=None, name=None, **kwargs)Â¶","['Returns the reciprocal of the argument, element-wise.', '\n', 'Calculates 1/x.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_pow.cc:L43', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.relu(data=None, out=None, name=None, **kwargs)Â¶","['Computes rectified linear activation.', '\n', '\n\\[max(features, 0)\\]', '\n', 'The storage type of ', 'relu', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L85', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.repeat(data=None, repeats=_Null, axis=_Null, out=None, name=None, **kwargs)Â¶","['Repeats elements of an array.\nBy default, ', 'repeat', ' flattens the input array into 1-D and then repeats the\nelements:', '\n', None, '\n', '\n', '\n', 'The parameter ', '\n', '\n', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L743', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.reset_arrays(*data, **kwargs)Â¶","['Set to zero multiple arrays', '\n', 'Defined in src/operator/contrib/reset_arrays.cc:L35', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.reshape(data=None, shape=_Null, reverse=_Null, target_shape=_Null, keep_highest=_Null, out=None, name=None, **kwargs)Â¶","['Reshapes the input array.\n.. note:: ', 'Reshape', ' is deprecated, use ', 'reshape', '\nGiven an array and a shape, this function returns a copy of the array in the new shape.\nThe shape is a tuple of integers such as (2,3,4). The size of the new shape should be same as the size of the input array.\nExample:', '\n', None, '\n', '\n', 'Some dimensions of the shape can take special values from the set {0, -1, -2, -3, -4}. The significance of each is explained below:\n- ', '0', '  copy this dimension from the input to the output shape.', '\n', '\n', 'Example::\n- input shape = (2,3,4), shape = (4,0,2), output shape = (4,3,2)\n- input shape = (2,3,4), shape = (2,0,0), output shape = (2,3,4)', '\n', '\n', '-1', '\n', '-2', '\n', '-3', '\n', '-4', '\n', '\n', '\n', 'If the argument ', 'Example::\n- without reverse=1, for input shape = (10,5,4), shape = (-1,0), output shape would be (40,5)\n- with reverse=1, output shape will be (50,4).', '\n', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L174', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.reshape_like(lhs=None, rhs=None, lhs_begin=_Null, lhs_end=_Null, rhs_begin=_Null, rhs_end=_Null, out=None, name=None, **kwargs)Â¶","['Reshape some or all dimensions of ', 'lhs', ' to have the same shape as some or all dimensions of ', 'rhs', '.', '\n', 'Returns a ', 'view', ' of the ', 'lhs', ' array with a new shape without altering any data.', '\n', 'Example:', '\n', None, '\n', '\n', 'More precise control over how dimensions are inherited is achieved by specifying slices over the ', 'lhs', ' and ', 'rhs', ' array dimensions. Only the sliced ', 'lhs', ' dimensions are reshaped to the ', 'rhs', ' sliced dimensions, with the non-sliced ', 'lhs', ' dimensions staying the same.', '\n', '\n', 'Examples:', '\n', 'Negative indices are supported, and ', 'None', ' can be used for either ', 'lhs_end', ' or ', 'rhs_end', ' to indicate the end of the range.', '\n', '\n', 'Example:', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L511', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.reverse(data=None, axis=_Null, out=None, name=None, **kwargs)Â¶","['Reverses the order of elements along given axis while preserving array shape.\nNote: reverse and flip are equivalent. We use reverse in the following examples.\nExamples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L831', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.rint(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise rounded value to the nearest integer of the input.', '\n', '\n', 'Note', '\n', '\n', '\n', '\n', 'Example:', '\n', None, '\n', '\n', 'The storage type of ', 'rint', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L798', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.rmsprop_update(weight=None, grad=None, n=None, lr=_Null, gamma1=_Null, epsilon=_Null, wd=_Null, rescale_grad=_Null, clip_gradient=_Null, clip_weights=_Null, out=None, name=None, **kwargs)Â¶","['Update function for ', 'RMSProp', ' optimizer.', '\n', 'RMSprop', ' is a variant of stochastic gradient descent where the gradients are\ndivided by a cache which grows with the sum of squares of recent gradients?', '\n', 'RMSProp', ' is similar to ', 'AdaGrad', ', a popular variant of ', 'SGD', ' which adaptively\ntunes the learning rate of each parameter. ', 'AdaGrad', ' lowers the learning rate for\neach parameter monotonically over the course of training.\nWhile this is analytically motivated for convex optimizations, it may not be ideal\nfor non-convex problems. ', 'RMSProp', ' deals with this heuristically by allowing the\nlearning rates to rebound as the denominator decays over time.', '\n', 'Define the Root Mean Square (RMS) error criterion of the gradient as\n', '\\(RMS[g]_t = \\sqrt{E[g^2]_t + \\epsilon}\\)', ', where ', '\\(g\\)', ' represents\ngradient and ', '\\(E[g^2]_t\\)', ' is the decaying average over past squared gradient.', '\n', 'The ', '\\(E[g^2]_t\\)', ' is given by:', '\n', '\n\\[E[g^2]_t = \\gamma * E[g^2]_{t-1} + (1-\\gamma) * g_t^2\\]', '\n', 'The update step is', '\n', '\n\\[\\theta_{t+1} = \\theta_t - \\frac{\\eta}{RMS[g]_t} g_t\\]', '\n', 'The RMSProp code follows the version in\n', 'http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf', '\nTieleman & Hinton, 2012.', '\n', 'Hinton suggests the momentum term ', '\\(\\gamma\\)', ' to be 0.9 and the learning rate\n', '\\(\\eta\\)', ' to be 0.001.', '\n', 'Defined in src/operator/optimizer_op.cc:L796', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.rmspropalex_update(weight=None, grad=None, n=None, g=None, delta=None, lr=_Null, gamma1=_Null, gamma2=_Null, epsilon=_Null, wd=_Null, rescale_grad=_Null, clip_gradient=_Null, clip_weights=_Null, out=None, name=None, **kwargs)Â¶","['Update function for RMSPropAlex optimizer.', '\n', 'RMSPropAlex', ' is non-centered version of ', 'RMSProp', '.', '\n', 'Define ', '\\(E[g^2]_t\\)', ' is the decaying average over past squared gradient and\n', '\\(E[g]_t\\)', ' is the decaying average over past gradient.', '\n', '\n\\[\\begin{split}E[g^2]_t = \\gamma_1 * E[g^2]_{t-1} + (1 - \\gamma_1) * g_t^2\\\\\nE[g]_t = \\gamma_1 * E[g]_{t-1} + (1 - \\gamma_1) * g_t\\\\\n\\Delta_t = \\gamma_2 * \\Delta_{t-1} - \\frac{\\eta}{\\sqrt{E[g^2]_t - E[g]_t^2 + \\epsilon}} g_t\\\\\\end{split}\\]', '\n', 'The update step is', '\n', '\n\\[\\theta_{t+1} = \\theta_t + \\Delta_t\\]', '\n', 'The RMSPropAlex code follows the version in\n', 'http://arxiv.org/pdf/1308.0850v5.pdf', ' Eq(38) - Eq(45) by Alex Graves, 2013.', '\n', 'Graves suggests the momentum term ', '\\(\\gamma_1\\)', ' to be 0.95, ', '\\(\\gamma_2\\)', '\nto be 0.9 and the learning rate ', '\\(\\eta\\)', ' to be 0.0001.', '\n', 'Defined in src/operator/optimizer_op.cc:L835', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.round(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise rounded value to the nearest integer of the input.', '\n', 'Example:', '\n', None, '\n', '\n', 'The storage type of ', 'round', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L777', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.rsqrt(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise inverse square-root value of the input.', '\n', '\n\\[rsqrt(x) = 1/\\sqrt{x}\\]', '\n', 'Example:', '\n', None, '\n', '\n', 'The storage type of ', 'rsqrt', ' output is always dense', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_pow.cc:L221', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sample_exponential(lam=None, shape=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Concurrent sampling from multiple\nexponential distributions with parameters lambda (rate).', '\n', 'The parameters of the distributions are provided as an input array.\nLet ', '[s]', ' be the shape of the input array, ', 'n', ' be the dimension of ', '[s]', ', ', '[t]', '\nbe the shape specified as the parameter of the operator, and ', 'm', ' be the dimension\nof ', '[t]', '. Then the output will be a ', '(n+m)', '-dimensional array with shape ', '[s]x[t]', '.', '\n', 'For any valid ', 'n', '-dimensional index ', 'i', ' with respect to the input array, ', 'output[i]', '\nwill be an ', 'm', '-dimensional array that holds randomly drawn samples from the distribution\nwhich is parameterized by the input value at index ', 'i', '. If the shape parameter of the\noperator is not set, then one sample will be drawn per distribution and the output array\nhas the same shape as the input array.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/random/multisample_op.cc:L283', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sample_gamma(alpha=None, beta=None, shape=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Concurrent sampling from multiple\ngamma distributions with parameters ', 'alpha', ' (shape) and ', 'beta', ' (scale).', '\n', 'The parameters of the distributions are provided as input arrays.\nLet ', '[s]', ' be the shape of the input arrays, ', 'n', ' be the dimension of ', '[s]', ', ', '[t]', '\nbe the shape specified as the parameter of the operator, and ', 'm', ' be the dimension\nof ', '[t]', '. Then the output will be a ', '(n+m)', '-dimensional array with shape ', '[s]x[t]', '.', '\n', 'For any valid ', 'n', '-dimensional index ', 'i', ' with respect to the input arrays, ', 'output[i]', '\nwill be an ', 'm', '-dimensional array that holds randomly drawn samples from the distribution\nwhich is parameterized by the input values at index ', 'i', '. If the shape parameter of the\noperator is not set, then one sample will be drawn per distribution and the output array\nhas the same shape as the input arrays.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/random/multisample_op.cc:L281', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sample_generalized_negative_binomial(mu=None, alpha=None, shape=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Concurrent sampling from multiple\ngeneralized negative binomial distributions with parameters ', 'mu', ' (mean) and ', 'alpha', ' (dispersion).', '\n', 'The parameters of the distributions are provided as input arrays.\nLet ', '[s]', ' be the shape of the input arrays, ', 'n', ' be the dimension of ', '[s]', ', ', '[t]', '\nbe the shape specified as the parameter of the operator, and ', 'm', ' be the dimension\nof ', '[t]', '. Then the output will be a ', '(n+m)', '-dimensional array with shape ', '[s]x[t]', '.', '\n', 'For any valid ', 'n', '-dimensional index ', 'i', ' with respect to the input arrays, ', 'output[i]', '\nwill be an ', 'm', '-dimensional array that holds randomly drawn samples from the distribution\nwhich is parameterized by the input values at index ', 'i', '. If the shape parameter of the\noperator is not set, then one sample will be drawn per distribution and the output array\nhas the same shape as the input arrays.', '\n', 'Samples will always be returned as a floating point data type.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/random/multisample_op.cc:L292', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sample_multinomial(data=None, shape=_Null, get_prob=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Concurrent sampling from multiple multinomial distributions.', '\n', 'data', ' is an ', 'n', ' dimensional array whose last dimension has length ', 'k', ', where\n', 'k', ' is the number of possible outcomes of each multinomial distribution. This\noperator will draw ', 'shape', ' samples from each distribution. If shape is empty\none sample will be drawn from each distribution.', '\n', 'If ', 'get_prob', ' is true, a second array containing log likelihood of the drawn\nsamples will also be returned. This is usually used for reinforcement learning\nwhere you can provide reward as head gradient for this array to estimate\ngradient.', '\n', 'Note that the input distribution must be normalized, i.e. ', 'data', ' must sum to\n1 along its last axis.', '\n', 'Examples:', '\n', None, '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sample_negative_binomial(k=None, p=None, shape=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Concurrent sampling from multiple\nnegative binomial distributions with parameters ', 'k', ' (failure limit) and ', 'p', ' (failure probability).', '\n', 'The parameters of the distributions are provided as input arrays.\nLet ', '[s]', ' be the shape of the input arrays, ', 'n', ' be the dimension of ', '[s]', ', ', '[t]', '\nbe the shape specified as the parameter of the operator, and ', 'm', ' be the dimension\nof ', '[t]', '. Then the output will be a ', '(n+m)', '-dimensional array with shape ', '[s]x[t]', '.', '\n', 'For any valid ', 'n', '-dimensional index ', 'i', ' with respect to the input arrays, ', 'output[i]', '\nwill be an ', 'm', '-dimensional array that holds randomly drawn samples from the distribution\nwhich is parameterized by the input values at index ', 'i', '. If the shape parameter of the\noperator is not set, then one sample will be drawn per distribution and the output array\nhas the same shape as the input arrays.', '\n', 'Samples will always be returned as a floating point data type.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/random/multisample_op.cc:L288', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sample_normal(mu=None, sigma=None, shape=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Concurrent sampling from multiple\nnormal distributions with parameters ', 'mu', ' (mean) and ', 'sigma', ' (standard deviation).', '\n', 'The parameters of the distributions are provided as input arrays.\nLet ', '[s]', ' be the shape of the input arrays, ', 'n', ' be the dimension of ', '[s]', ', ', '[t]', '\nbe the shape specified as the parameter of the operator, and ', 'm', ' be the dimension\nof ', '[t]', '. Then the output will be a ', '(n+m)', '-dimensional array with shape ', '[s]x[t]', '.', '\n', 'For any valid ', 'n', '-dimensional index ', 'i', ' with respect to the input arrays, ', 'output[i]', '\nwill be an ', 'm', '-dimensional array that holds randomly drawn samples from the distribution\nwhich is parameterized by the input values at index ', 'i', '. If the shape parameter of the\noperator is not set, then one sample will be drawn per distribution and the output array\nhas the same shape as the input arrays.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/random/multisample_op.cc:L278', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sample_poisson(lam=None, shape=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Concurrent sampling from multiple\nPoisson distributions with parameters lambda (rate).', '\n', 'The parameters of the distributions are provided as an input array.\nLet ', '[s]', ' be the shape of the input array, ', 'n', ' be the dimension of ', '[s]', ', ', '[t]', '\nbe the shape specified as the parameter of the operator, and ', 'm', ' be the dimension\nof ', '[t]', '. Then the output will be a ', '(n+m)', '-dimensional array with shape ', '[s]x[t]', '.', '\n', 'For any valid ', 'n', '-dimensional index ', 'i', ' with respect to the input array, ', 'output[i]', '\nwill be an ', 'm', '-dimensional array that holds randomly drawn samples from the distribution\nwhich is parameterized by the input value at index ', 'i', '. If the shape parameter of the\noperator is not set, then one sample will be drawn per distribution and the output array\nhas the same shape as the input array.', '\n', 'Samples will always be returned as a floating point data type.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/random/multisample_op.cc:L285', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sample_uniform(low=None, high=None, shape=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Concurrent sampling from multiple\nuniform distributions on the intervals given by ', '[low,high)', '.', '\n', 'The parameters of the distributions are provided as input arrays.\nLet ', '[s]', ' be the shape of the input arrays, ', 'n', ' be the dimension of ', '[s]', ', ', '[t]', '\nbe the shape specified as the parameter of the operator, and ', 'm', ' be the dimension\nof ', '[t]', '. Then the output will be a ', '(n+m)', '-dimensional array with shape ', '[s]x[t]', '.', '\n', 'For any valid ', 'n', '-dimensional index ', 'i', ' with respect to the input arrays, ', 'output[i]', '\nwill be an ', 'm', '-dimensional array that holds randomly drawn samples from the distribution\nwhich is parameterized by the input values at index ', 'i', '. If the shape parameter of the\noperator is not set, then one sample will be drawn per distribution and the output array\nhas the same shape as the input arrays.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/random/multisample_op.cc:L276', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.scatter_nd(data=None, indices=None, shape=_Null, out=None, name=None, **kwargs)Â¶","['Scatters data into a new tensor according to indices.', '\n', 'Given ', 'data', ' with shape ', '(Y_0, â\x80¦, Y_{K-1}, X_M, â\x80¦, X_{N-1})', ' and indices with shape\n', '(M, Y_0, â\x80¦, Y_{K-1})', ', the output will have shape ', '(X_0, X_1, â\x80¦, X_{N-1})', ',\nwhere ', 'M <= N', '. If ', 'M == N', ', data shape should simply be ', '(Y_0, â\x80¦, Y_{K-1})', '.', '\n', 'The elements in output is defined as follows:', '\n', None, '\n', '\n', 'all other entries in output are 0.', '\n', '\n', 'Warning', '\n', 'If the indices have duplicates, the result will be non-deterministic and\nthe gradient of ', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sgd_mom_update(weight=None, grad=None, mom=None, lr=_Null, momentum=_Null, wd=_Null, rescale_grad=_Null, clip_gradient=_Null, lazy_update=_Null, out=None, name=None, **kwargs)Â¶","['Momentum update function for Stochastic Gradient Descent (SGD) optimizer.', '\n', 'Momentum update has better convergence rates on neural networks. Mathematically it looks\nlike below:', '\n', '\n\\[\\begin{split}v_1 = \\alpha * \\nabla J(W_0)\\\\\nv_t = \\gamma v_{t-1} - \\alpha * \\nabla J(W_{t-1})\\\\\nW_t = W_{t-1} + v_t\\end{split}\\]', '\n', 'It updates the weights using:', '\n', None, '\n', '\n', 'Where the parameter ', 'momentum', ' is the decay rate of momentum estimates at each epoch.', '\n', 'However, if gradâ\x80\x99s storage type is ', 'row_sparse', ', ', 'lazy_update', ' is True and weightâ\x80\x99s storage\ntype is the same as momentumâ\x80\x99s storage type,\nonly the row slices whose indices appear in grad.indices are updated (for both weight and momentum):', '\n', None, '\n', '\n', 'Defined in src/operator/optimizer_op.cc:L564', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sgd_update(weight=None, grad=None, lr=_Null, wd=_Null, rescale_grad=_Null, clip_gradient=_Null, lazy_update=_Null, out=None, name=None, **kwargs)Â¶","['Update function for Stochastic Gradient Descent (SGD) optimizer.', '\n', 'It updates the weights using:', '\n', None, '\n', '\n', 'However, if gradient is of ', 'row_sparse', ' storage type and ', 'lazy_update', ' is True,\nonly the row slices whose indices appear in grad.indices are updated:', '\n', None, '\n', '\n', 'Defined in src/operator/optimizer_op.cc:L523', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.shape_array(data=None, out=None, name=None, **kwargs)Â¶","['Returns a 1D int64 array containing the shape of data.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L573', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.shuffle(data=None, out=None, name=None, **kwargs)Â¶","['Randomly shuffle the elements.', '\n', 'This shuffles the array along the first axis.\nThe order of the elements in each subarray does not change.\nFor example, if a 2D array is given, the order of the rows randomly changes,\nbut the order of the elements in each row does not change.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sigmoid(data=None, out=None, name=None, **kwargs)Â¶","['Computes sigmoid of x element-wise.', '\n', '\n\\[y = 1 / (1 + exp(-x))\\]', '\n', 'The storage type of ', 'sigmoid', ' output is always dense', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L119', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sign(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise sign of the input.', '\n', 'Example:', '\n', None, '\n', '\n', 'The storage type of ', 'sign', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L758', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.signsgd_update(weight=None, grad=None, lr=_Null, wd=_Null, rescale_grad=_Null, clip_gradient=_Null, out=None, name=None, **kwargs)Â¶","['Update function for SignSGD optimizer.', '\n', '\n\\[\\begin{split}g_t = \\nabla J(W_{t-1})\\\\\nW_t = W_{t-1} - \\eta_t \\text{sign}(g_t)\\end{split}\\]', '\n', 'It updates the weights using:', '\n', None, '\n', '\n', '\n', 'Note', '\n', '\n', '\n', '\n', 'Defined in src/operator/optimizer_op.cc:L62', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.signum_update(weight=None, grad=None, mom=None, lr=_Null, momentum=_Null, wd=_Null, rescale_grad=_Null, clip_gradient=_Null, wd_lh=_Null, out=None, name=None, **kwargs)Â¶","['SIGN momentUM (Signum) optimizer.', '\n', '\n\\[\\begin{split}g_t = \\nabla J(W_{t-1})\\\\\nm_t = \\beta m_{t-1} + (1 - \\beta) g_t\\\\\nW_t = W_{t-1} - \\eta_t \\text{sign}(m_t)\\end{split}\\]', '\n', '\n', 'It updates the weights using::', 'state = momentum * state + (1-momentum) * gradient\nweight = weight - learning_rate * sign(state)', '\n', '\n', 'Where the parameter ', 'momentum', ' is the decay rate of momentum estimates at each epoch.', '\n', '\n', 'Note', '\n', '\n', '\n', '\n', 'Defined in src/operator/optimizer_op.cc:L91', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sin(data=None, out=None, name=None, **kwargs)Â¶","['Computes the element-wise sine of the input array.', '\n', 'The input should be in radians (', '\\(2\\pi\\)', ' rad equals 360 degrees).', '\n', '\n\\[sin([0, \\pi/4, \\pi/2]) = [0, 0.707, 1]\\]', '\n', 'The storage type of ', 'sin', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_trig.cc:L47', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sinh(data=None, out=None, name=None, **kwargs)Â¶","['Returns the hyperbolic sine of the input array, computed element-wise.', '\n', '\n\\[sinh(x) = 0.5\\times(exp(x) - exp(-x))\\]', '\n', 'The storage type of ', 'sinh', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_trig.cc:L371', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.size_array(data=None, out=None, name=None, **kwargs)Â¶","['Returns a 1D int64 array containing the size of data.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L624', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.slice(data=None, begin=_Null, end=_Null, step=_Null, out=None, name=None, **kwargs)Â¶","['Slices a region of the array.\n.. note:: ', 'crop', ' is deprecated. Use ', 'slice', ' instead.\nThis function returns a sliced array between the indices given\nby ', 'begin', ' and ', 'end', ' with the corresponding ', 'step', '.\nFor an input array of ', 'shape=(d_0,', ',\nslice operation with ', 'begin=(b_0,', ',\n', 'end=(e_0,', ', and ', 'step=(s_0,', ',\nwhere m <= n, results in an array with the shape\n', '(|e_0-b_0|/|s_0|,', '.\nThe resulting arrayâ\x80\x99s ', 'k', '-th dimension contains elements\nfrom the ', 'k', '-th dimension of the input array starting\nfrom index ', 'b_k', ' (inclusive) with step ', 's_k', '\nuntil reaching ', 'e_k', ' (exclusive).\nIf the ', 'k', '-th elements are ', 'None', ' in the sequence of ', 'begin', ', ', 'end', ',\nand ', 'step', ', the following rule will be used to set default values.\nIf ', 's_k', ' is ', 'None', ', set ', 's_k=1', '. If ', 's_k > 0', ', set ', 'b_k=0', ', ', 'e_k=d_k', ';\nelse, set ', 'b_k=d_k-1', ', ', 'e_k=-1', '.\nThe storage type of ', 'slice', ' output depends on storage types of inputs\n- slice(csr) = csr\n- otherwise, ', 'slice', ' generates output with default storage\n.. note:: When input data storage type is csr, it only supports', '\n', '\n', 'step=(), or step=(None,), or step=(1,) to generate a csr output.\nFor other step parameter values, it falls back to slicing\na dense tensor.', '\n', '\n', 'Example::', '\n', '\n', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L481', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.slice_axis(data=None, axis=_Null, begin=_Null, end=_Null, out=None, name=None, **kwargs)Â¶","['Slices along a given axis.\nReturns an array slice along a given ', 'axis', ' starting from the ', 'begin', ' index\nto the ', 'end', ' index.\nExamples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L570', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.slice_like(data=None, shape_like=None, axes=_Null, out=None, name=None, **kwargs)Â¶","['Slices a region of the array like the shape of another array.\nThis function is similar to ', 'slice', ', however, the ', 'begin', ' are always ', '0`s\nand `end', ' of specific axes are inferred from the second input ', 'shape_like', '.\nGiven the second ', 'shape_like', ' input of ', 'shape=(d_0,', ',\na ', 'slice_like', ' operator with default empty ', 'axes', ', it performs the\nfollowing operation:\n`` out = slice(input, begin=(0, 0, â\x80¦, 0), end=(d_0, d_1, â\x80¦, d_n-1))``.\nWhen ', 'axes', ' is not empty, it is used to speficy which axes are being sliced.\nGiven a 4-d input data, ', 'slice_like', ' operator with ', 'axes=(0,', '\nwill perform the following operation:\n`` out = slice(input, begin=(0, 0, 0, 0), end=(d_0, None, d_2, d_3))``.\nNote that it is allowed to have first and second input with different dimensions,\nhowever, you have to make sure the ', 'axes', ' are specified and not exceeding the\ndimension limits.\nFor example, given ', 'input_1', ' with ', 'shape=(2,3,4,5)', ' and ', 'input_2', ' with\n', 'shape=(1,2,3)', ', it is not allowed to use:\n`` out = slice_like(a, b)`` because ndim of ', 'input_1', ' is 4, and ndim of ', 'input_2', '\nis 3.\nThe following is allowed in this situation:\n`` out = slice_like(a, b, axes=(0, 2))``\nExample:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L624', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.smooth_l1(data=None, scalar=_Null, out=None, name=None, **kwargs)Â¶","['Calculate Smooth L1 Loss(lhs, scalar) by summing', '\n', '\n\\[\\begin{split}f(x) =\n\\begin{cases}\n(\\sigma x)^2/2,& \\text{if }x < 1/\\sigma^2\\\\\n|x|-0.5/\\sigma^2,& \\text{otherwise}\n\\end{cases}\\end{split}\\]', '\n', 'where ', '\\(x\\)', ' is an element of the tensor ', 'lhs', ' and ', '\\(\\sigma\\)', ' is the scalar.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_binary_scalar_op_extended.cc:L108', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.softmax(data=None, length=None, axis=_Null, temperature=_Null, dtype=_Null, use_length=_Null, out=None, name=None, **kwargs)Â¶","['Applies the softmax function.', '\n', 'The resulting array contains elements in the range (0,1) and the elements along the given axis sum up to 1.', '\n', '\n\\[softmax(\\mathbf{z/t})_j = \\frac{e^{z_j/t}}{\\sum_{k=1}^K e^{z_k/t}}\\]', '\n', 'for ', '\\(j = 1, ..., K\\)', '\n', 't is the temperature parameter in softmax function. By default, t equals 1.0', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/nn/softmax.cc:L135', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.softmax_cross_entropy(data=None, label=None, out=None, name=None, **kwargs)Â¶","['Calculate cross entropy of softmax output and one-hot label.', '\n', '\n', 'This operator computes the cross entropy in two steps:\n- Applies softmax function on the input array.\n- Computes and returns the cross entropy loss between the softmax output and the labels.', '\n', 'The softmax function and cross entropy loss is given by:', '\n', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/loss_binary_op.cc:L58', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.softmin(data=None, axis=_Null, temperature=_Null, dtype=_Null, use_length=_Null, out=None, name=None, **kwargs)Â¶","['Applies the softmin function.', '\n', 'The resulting array contains elements in the range (0,1) and the elements along the given axis sum\nup to 1.', '\n', '\n\\[softmin(\\mathbf{z/t})_j = \\frac{e^{-z_j/t}}{\\sum_{k=1}^K e^{-z_k/t}}\\]', '\n', 'for ', '\\(j = 1, ..., K\\)', '\n', 't is the temperature parameter in softmax function. By default, t equals 1.0', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/nn/softmin.cc:L56', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.softsign(data=None, out=None, name=None, **kwargs)Â¶","['Computes softsign of x element-wise.', '\n', '\n\\[y = x / (1 + abs(x))\\]', '\n', 'The storage type of ', 'softsign', ' output is always dense', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L191', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sort(data=None, axis=_Null, is_ascend=_Null, out=None, name=None, **kwargs)Â¶","['Returns a sorted copy of an input array along the given axis.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/ordering_op.cc:L132', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.space_to_depth(data=None, block_size=_Null, out=None, name=None, **kwargs)Â¶","['Rearranges(permutes) blocks of spatial data into depth.\nSimilar to ONNX SpaceToDepth operator:\n', 'https://github.com/onnx/onnx/blob/master/docs/Operators.md#SpaceToDepth', '\nThe output is a new tensor where the values from height and width dimension are\nmoved to the depth dimension. The reverse of this operation is ', 'depth_to_space', '.\n.. math:', '\n', None, '\n', '\n', 'where ', '\\(x\\)', ' is an input tensor with default layout as ', '\\([N, C, H, W]\\)', ': [batch, channels, height, width]\nand ', '\\(y\\)', ' is the output tensor of layout ', '\\([N, C * (block\\_size ^ 2), H / block\\_size, W / block\\_size]\\)', '\nExample:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L1018', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.split(data=None, num_outputs=_Null, axis=_Null, squeeze_axis=_Null, out=None, name=None, **kwargs)Â¶","['Splits an array along a particular axis into multiple sub-arrays.', '\n', '\n', 'Note', '\n', 'SliceChannel', '\n', '\n', 'Note', ' that ', 'num_outputs', ' should evenly divide the length of the axis\nalong which to split the array.', '\n', 'Example:', '\n', None, '\n', '\n', 'squeeze_axis=1', ' removes the axis with length 1 from the shapes of the output arrays.\n', 'Note', ' that setting ', 'squeeze_axis', ' to ', '1', ' removes axis with length 1 only\nalong the ', 'axis', ' which it is split.\nAlso ', 'squeeze_axis', ' can be set to true only if ', 'input.shape[axis]', '.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/slice_channel.cc:L106', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sqrt(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise square-root value of the input.', '\n', '\n\\[\\textrm{sqrt}(x) = \\sqrt{x}\\]', '\n', 'Example:', '\n', None, '\n', '\n', 'The storage type of ', 'sqrt', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_pow.cc:L170', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.square(data=None, out=None, name=None, **kwargs)Â¶","['Returns element-wise squared value of the input.', '\n', '\n\\[square(x) = x^2\\]', '\n', 'Example:', '\n', None, '\n', '\n', 'The storage type of ', 'square', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_pow.cc:L119', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.squeeze(data=None, axis=_Null, out=None, name=None, **kwargs)Â¶","['Remove single-dimensional entries from the shape of an array.\nSame behavior of defining the output tensor shape as numpy.squeeze for the most of cases.\nSee the following note for exception.\nExamples:', '\n', None, '\n', '\n', '\n', 'Note', '\n', 'The output of this operator will keep at least one dimension not removed. For example,\nsqueeze([[[4]]]) = [4], while in numpy.squeeze, the output will become a scalar.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.stack(*data, **kwargs)Â¶","['Join a sequence of arrays along a new axis.\nThe axis parameter specifies the index of the new axis in the dimensions of the\nresult. For example, if axis=0 it will be the first dimension and if axis=-1 it\nwill be the last dimension.\nExamples:', '\n', None, '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.stop_gradient(data=None, out=None, name=None, **kwargs)Â¶","['Stops gradient computation.', '\n', 'Stops the accumulated gradient of the inputs from flowing through this operator\nin the backward direction. In other words, this operator prevents the contribution\nof its inputs to be taken into account for computing gradients.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L325', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sum(data=None, axis=_Null, keepdims=_Null, exclude=_Null, out=None, name=None, **kwargs)Â¶","['Computes the sum of array elements over given axes.', '\n', '\n', 'Note', '\n', 'sum', '\n', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/broadcast_reduce_sum_value.cc:L66', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.sum_axis(data=None, axis=_Null, keepdims=_Null, exclude=_Null, out=None, name=None, **kwargs)Â¶","['Computes the sum of array elements over given axes.', '\n', '\n', 'Note', '\n', 'sum', '\n', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/broadcast_reduce_sum_value.cc:L66', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.swapaxes(data=None, dim1=_Null, dim2=_Null, out=None, name=None, **kwargs)Â¶","['Interchanges two axes of an array.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/swapaxis.cc:L69', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.take(a=None, indices=None, axis=_Null, mode=_Null, out=None, name=None, **kwargs)Â¶","['Takes elements from an input array along the given axis.', '\n', 'This function slices the input array along a particular axis with the provided indices.', '\n', 'Given data tensor of rank r >= 1, and indices tensor of rank q, gather entries of the axis\ndimension of data (by default outer-most one as axis=0) indexed by indices, and concatenates them\nin an output tensor of rank q + (r - 1).', '\n', 'Examples:', '\n', None, '\n', '\n', 'The storage type of ', 'take', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/indexing_op.cc:L776', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.tan(data=None, out=None, name=None, **kwargs)Â¶","['Computes the element-wise tangent of the input array.', '\n', 'The input should be in radians (', '\\(2\\pi\\)', ' rad equals 360 degrees).', '\n', '\n\\[tan([0, \\pi/4, \\pi/2]) = [0, 1, -inf]\\]', '\n', 'The storage type of ', 'tan', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_trig.cc:L140', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.tanh(data=None, out=None, name=None, **kwargs)Â¶","['Returns the hyperbolic tangent of the input array, computed element-wise.', '\n', '\n\\[tanh(x) = sinh(x) / cosh(x)\\]', '\n', 'The storage type of ', 'tanh', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_trig.cc:L451', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.tile(data=None, reps=_Null, out=None, name=None, **kwargs)Â¶","['Repeats the whole array multiple times.\nIf ', 'reps', ' has length ', 'd', ', and input array has dimension of ', 'n', '. There are\nthree cases:\n- ', 'n=d', '. Repeat ', 'i', '-th dimension of the input by ', 'reps[i]', ' times:', '\n', None, '\n', '\n', '\n', 'n>d', '\n', 'n<d', '\n', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L795', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.topk(data=None, axis=_Null, k=_Null, ret_typ=_Null, is_ascend=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['\n', 'Returns the indices of the top ', 'axis (by default).\nIf ret_type is set to â\x80\x98valueâ\x80\x99 returns the value of top ', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/ordering_op.cc:L67', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.transpose(data=None, axes=_Null, out=None, name=None, **kwargs)Â¶","['Permutes the dimensions of an array.\nExamples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/matrix_op.cc:L327', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.trunc(data=None, out=None, name=None, **kwargs)Â¶","['Return the element-wise truncated value of the input.', '\n', 'The truncated value of the scalar x is the nearest integer i which is closer to\nzero than x is. In short, the fractional part of the signed number x is discarded.', '\n', 'Example:', '\n', None, '\n', '\n', 'The storage type of ', 'trunc', ' output depends upon the input storage type:', '\n', '\n', '\n', '\n', 'Defined in src/operator/tensor/elemwise_unary_op_basic.cc:L856', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.uniform(low=_Null, high=_Null, shape=_Null, ctx=_Null, dtype=_Null, out=None, name=None, **kwargs)Â¶","['Draw random samples from a uniform distribution.', '\n', '\n', 'Note', '\n', 'The existing alias ', '\n', '\n', 'Samples are uniformly distributed over the half-open interval ', '[low, high)', '\n(includes ', 'low', ', but excludes ', 'high', ').', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/random/sample_op.cc:L95', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.unravel_index(data=None, shape=_Null, out=None, name=None, **kwargs)Â¶","['Converts an array of flat indices into a batch of index arrays. The operator follows numpy conventions so a single multi index is given by a column of the output matrix. The leading dimension may be left unspecified by using -1 as placeholder.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/ravel.cc:L67', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.where(condition=None, x=None, y=None, out=None, name=None, **kwargs)Â¶","['Return the elements, either from x or y, depending on the condition.', '\n', 'Given three ndarrays, condition, x, and y, return an ndarray with the elements from x or y,\ndepending on the elements from condition are true or false. x and y must have the same shape.\nIf condition has the same shape as x, each element in the output array is from x if the\ncorresponding element in the condition is true, and from y if false.', '\n', 'If condition does not have the same shape as x, it must be a 1D array whose size is\nthe same as xâ\x80\x99s first dimension size. Each row of the output array is from xâ\x80\x99s row\nif the corresponding element from condition is true, and from yâ\x80\x99s row if false.', '\n', 'Note that all non-zero values are interpreted as ', 'True', ' in condition.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/control_flow_op.cc:L56', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.zeros_like(data=None, out=None, name=None, **kwargs)Â¶","['Return an array of zeros with the same shape, type and storage type\nas the input array.', '\n', 'The storage type of ', 'zeros_like', ' output depends on the storage type of the input', '\n', '\n', 'zeros_like(row_sparse) = row_sparse', '\n', 'zeros_like(csr) = csr', '\n', 'zeros_like(default) = default', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
class mxnet.ndarray.NDArray(handle, writable=True)[source]Â¶","['Bases: ', 'mxnet._ctypes.ndarray.NDArrayBase', '\n', 'An array object representing a multidimensional, homogeneous array of\nfixed-size items.', '\n', 'Attributes', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'Methods', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'Returns a copy of the array with axes transposed.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Returns an array on the target device with the same value as this array.', '\n', '\n', '\n', '\n', 'A convenience function for creating a classic ndarray from the current\nndarray with zero copy. For this class, it just returns itself since it is\nalready a classic ndarray.', '\n', '\n', '\n', '\n', 'Convert mxnet.ndarray.NDArray to mxnet.numpy.ndarray.', '\n', '\n', '\n', '\n', 'Returns a ', '\n', '\n', '\n', '\n', 'Returns a scalar whose value is copied from this array.', '\n', '\n', '\n', '\n', 'Returns a copy of the array after casting to a specified type.', '\n', '\n', '\n', '\n', 'Attach a gradient buffer to this NDArray, so that ', '\n', '\n', '\n', '\n', 'Compute the gradients of this NDArray w.r.t variables.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Broadcasts the input array to the shape of other.', '\n', '\n', '\n', '\n', 'Broadcasts the input array to a new shape.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Device context of the array.', '\n', '\n', '\n', '\n', 'Makes a copy of this ', '\n', '\n', '\n', '\n', 'Copies the value of this array to another array.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Device context of the array. Has the same meaning as context.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Returns a new NDArray, detached from the current graph.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Data-type of the arrayâ\x80\x99s elements.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Adds an additional dimension to the current array without altering any data.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Flatten this array without altering any data.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Returns gradient buffer attached to this NDArray.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Returns the number of dimensions of this array', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Returns a ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Tuple of array dimensions.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Number of elements in the array.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Assign the rhs to a cropped subset of this NDarray in place.\nReturns the view of this NDArray.', '\n', '\n', '\n', '\n', 'Assign the scalar to a cropped subset of this NDArray. Value will broadcast to the shape of the cropped shape\nand will be cast to the same dtype of the NDArray.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Remove dimensions with size 1 from this array without altering any data.', '\n', '\n', '\n', '\n', 'Storage-type of the array.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Returns a reference view of NDArray that represents as DLManagedTensor until\nall previous write operations on the current array are finished.', '\n', '\n', '\n', '\n', 'Returns a reference view of NDArray that represents as DLManagedTensor until\nall previous read/write operations on the current array are finished.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Return a copy of the array with chosen storage type.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n', '\n', '\n', 'Waits until all previous write operations on the current array are finished.', '\n', '\n', '\n', '\n', 'Convenience fluent method for ', '\n', '\n']"
"
mxnet.ndarray.concatenate(arrays, axis=0, always_copy=True)[source]Â¶","['DEPRECATED, use ', 'concat', ' instead', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'An ', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.ones(shape, ctx=None, dtype=None, **kwargs)[source]Â¶","['Returns a new array filled with all ones, with the given shape and type.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'A new array of the specified shape filled with all ones.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.add(lhs, rhs)[source]Â¶","['Returns element-wise sum of the input arrays with broadcasting.', '\n', 'Equivalent to ', 'lhs', ', ', 'mx.nd.broadcast_add(lhs,', ' and\n', 'mx.nd.broadcast_plus(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'The element-wise sum of the input arrays.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.arange(start, stop=None, step=1.0, repeat=1, infer_range=None, ctx=None, dtype=<class 'numpy.float32'>)[source]Â¶","['Returns evenly spaced values within a given interval.', '\n', 'Values are generated within the half-open interval [', 'start', ', ', 'stop', '). In other\nwords, the interval includes ', 'start', ' but excludes ', 'stop', '. The function is\nsimilar to the built-in Python function ', 'range', ' and to ', 'numpy.arange', ',\nbut returns an ', 'NDArray', '.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'NDArray', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.linspace(start, stop, num, endpoint=True, ctx=None, dtype=<class 'numpy.float32'>)[source]Â¶","['Return evenly spaced numbers within a specified interval.', '\n', 'Values are generated within the half-open interval [', 'start', ', ', 'stop', ') or\nclosed interval [start, stop] depending on whether ', 'endpoint', ' is True or\nFalse. The function is similar to ', 'numpy.linspace', ', but returns an ', 'NDArray', '.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'NDArray', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.eye(N, M=0, k=0, ctx=None, dtype=None, **kwargs)[source]Â¶","['Return a 2-D array with ones on the diagonal and zeros elsewhere.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'A created array', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.divide(lhs, rhs)[source]Â¶","['Returns element-wise division of the input arrays with broadcasting.', '\n', 'Equivalent to ', 'lhs', ' and ', 'mx.nd.broadcast_div(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'The element-wise division of the input arrays.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.equal(lhs, rhs)[source]Â¶","['Returns the result of element-wise ', 'equal to', ' (==) comparison operation with\nbroadcasting.', '\n', 'For each element in input arrays, return 1(true) if corresponding elements are same,\notherwise return 0(false).', '\n', 'Equivalent to ', 'lhs', ' and ', 'mx.nd.broadcast_equal(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'Output array of boolean values.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.full(shape, val, ctx=None, dtype=<class 'numpy.float32'>, out=None)[source]Â¶","['Returns a new array of given shape and type, filled with the given value ', 'val', '.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'NDArray', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.greater(lhs, rhs)[source]Â¶","['Returns the result of element-wise ', 'greater than', ' (>) comparison operation\nwith broadcasting.', '\n', 'For each element in input arrays, return 1(true) if lhs elements are greater than rhs,\notherwise return 0(false).', '\n', 'Equivalent to ', 'lhs', ' and ', 'mx.nd.broadcast_greater(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'Output array of boolean values.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.greater_equal(lhs, rhs)[source]Â¶","['Returns the result of element-wise ', 'greater than or equal to', ' (>=) comparison\noperation with broadcasting.', '\n', 'For each element in input arrays, return 1(true) if lhs elements are greater than equal to rhs,\notherwise return 0(false).', '\n', 'Equivalent to ', 'lhs', ' and ', 'mx.nd.broadcast_greater_equal(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'Output array of boolean values.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.imdecode(str_img, clip_rect=(0, 0, 0, 0), out=None, index=0, channels=3, mean=None)[source]Â¶","['DEPRECATED, use mx.img instead', '\n', '\n', 'Parameters', '\n', '\n', '\n', '\n', '\n']"
"
mxnet.ndarray.lesser(lhs, rhs)[source]Â¶","['Returns the result of element-wise ', 'lesser than', ' (<) comparison operation\nwith broadcasting.', '\n', 'For each element in input arrays, return 1(true) if lhs elements are less than rhs,\notherwise return 0(false).', '\n', 'Equivalent to ', 'lhs', ' and ', 'mx.nd.broadcast_lesser(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'Output array of boolean values.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.lesser_equal(lhs, rhs)[source]Â¶","['Returns the result of element-wise ', 'lesser than or equal to', ' (<=) comparison\noperation with broadcasting.', '\n', 'For each element in input arrays, return 1(true) if lhs elements are\nlesser than equal to rhs, otherwise return 0(false).', '\n', 'Equivalent to ', 'lhs', ' and ', 'mx.nd.broadcast_lesser_equal(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'Output array of boolean values.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.logical_and(lhs, rhs)[source]Â¶","['Returns the result of element-wise ', 'logical and', ' comparison\noperation with broadcasting.', '\n', 'For each element in input arrays, return 1(true) if lhs elements and rhs elements\nare true, otherwise return 0(false).', '\n', 'Equivalent to ', 'lhs', ' and ', 'mx.nd.broadcast_logical_and(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'Output array of boolean values.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.logical_or(lhs, rhs)[source]Â¶","['Returns the result of element-wise ', 'logical or', ' comparison\noperation with broadcasting.', '\n', 'For each element in input arrays, return 1(true) if lhs elements or rhs elements\nare true, otherwise return 0(false).', '\n', 'Equivalent to ', 'lhs', ' and ', 'mx.nd.broadcast_logical_or(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'Output array of boolean values.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.logical_xor(lhs, rhs)[source]Â¶","['Returns the result of element-wise ', 'logical xor', ' comparison\noperation with broadcasting.', '\n', 'For each element in input arrays, return 1(true) if lhs elements or rhs elements\nare true, otherwise return 0(false).', '\n', 'Equivalent to ', 'bool(lhs)', ' and ', 'mx.nd.broadcast_logical_xor(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'Output array of boolean values.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.maximum(lhs, rhs)[source]Â¶","['Returns element-wise maximum of the input arrays with broadcasting.', '\n', 'Equivalent to ', 'mx.nd.broadcast_maximum(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'The element-wise maximum of the input arrays.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.minimum(lhs, rhs)[source]Â¶","['Returns element-wise minimum of the input arrays with broadcasting.', '\n', 'Equivalent to ', 'mx.nd.broadcast_minimum(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'The element-wise minimum of the input arrays.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.moveaxis(tensor, source, destination)[source]Â¶","['Moves the ', 'source', ' axis into the ', 'destination', ' position\nwhile leaving the other axes in their original order', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'result', '\n', 'Return type', '\n', 'mx.nd.array', '\n', '\n', 'Examples', '\n', None, '\n', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.modulo(lhs, rhs)[source]Â¶","['Returns element-wise modulo of the input arrays with broadcasting.', '\n', 'Equivalent to ', 'lhs', ' and ', 'mx.nd.broadcast_mod(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'The element-wise modulo of the input arrays.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.multiply(lhs, rhs)[source]Â¶","['Returns element-wise product of the input arrays with broadcasting.', '\n', 'Equivalent to ', 'lhs', ' and ', 'mx.nd.broadcast_mul(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'The element-wise multiplication of the input arrays.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.not_equal(lhs, rhs)[source]Â¶","['Returns the result of element-wise ', 'not equal to', ' (!=) comparison operation\nwith broadcasting.', '\n', 'For each element in input arrays, return 1(true) if corresponding elements are different,\notherwise return 0(false).', '\n', 'Equivalent to ', 'lhs', ' and ', 'mx.nd.broadcast_not_equal(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'Output array of boolean values.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.onehot_encode(indices, out)[source]Â¶","['One-hot encoding indices into matrix out.', '\n', '\n', 'Note', '\n', 'onehot_encode', '\n', '\n', '\n']"
"
mxnet.ndarray.power(base, exp)[source]Â¶","['Returns result of first array elements raised to powers from second array, element-wise\nwith broadcasting.', '\n', 'Equivalent to ', 'base', ' and ', 'mx.nd.broadcast_power(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'The bases in x raised to the exponents in y.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.subtract(lhs, rhs)[source]Â¶","['Returns element-wise difference of the input arrays with broadcasting.', '\n', 'Equivalent to ', 'lhs', ', ', 'mx.nd.broadcast_sub(lhs,', ' and\n', 'mx.nd.broadcast_minus(lhs,', '.', '\n', '\n', 'Note', '\n', 'If the corresponding dimensions of two arrays have the same size or one of them has size 1,\nthen the arrays are broadcastable to a common shape.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'The element-wise difference of the input arrays.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.true_divide(lhs, rhs)[source]Â¶","['This function is similar to ', 'divide()', '.', '\n', '\n']"
"
mxnet.ndarray.waitall()[source]Â¶","['Wait for all async operations to finish in MXNet.', '\n', 'This function is used for benchmarking only.', '\n', '\n', 'Note', '\n', 'If your mxnet code throws an exception, then waitall can cause performance impact.', '\n', '\n', '\n']"
"
mxnet.ndarray.histogram(a, bins=10, range=None)[source]Â¶","['Compute the histogram of the input data.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'A created array.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.split_v2(ary, indices_or_sections, axis=0, squeeze_axis=False)[source]Â¶","['Split an array into multiple sub-arrays.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'A created array.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.to_dlpack_for_read(data)[source]Â¶","['\n', 'Returns a reference view of NDArray that represents as DLManagedTensor until', 'all previous write operations on the current array are finished.', '\n', '\n', '\n', 'Parameters', '\n', 'data', '\n', 'Returns', '\n', 'a reference view of NDArray that represents as DLManagedTensor.', '\n', 'Return type', '\n', 'PyCapsule (the pointer of DLManagedTensor)', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.to_dlpack_for_write(data)[source]Â¶","['\n', 'Returns a reference view of NDArray that represents as DLManagedTensor until', 'all previous read/write operations on the current array are finished.', '\n', '\n', '\n', 'Parameters', '\n', 'data', '\n', 'Returns', '\n', 'a reference view of NDArray that represents as DLManagedTensor.', '\n', 'Return type', '\n', 'PyCapsule (the pointer of DLManagedTensor)', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.from_dlpack(dlpack)[source]Â¶","['Returns a NDArray backed by a dlpack tensor.', '\n', '\n', 'Parameters', '\n', 'dlpack', '\n', 'Returns', '\n', 'a NDArray backed by a dlpack tensor', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.from_numpy(ndarray, zero_copy=True, array_cls=<class 'mxnet.ndarray.ndarray.NDArray'>)[source]Â¶","['Returns an MXNetâ\x80\x99s ndarray backed by numpyâ\x80\x99s ndarray.\nWhen ', 'zero_copy', ' is set to be true,\nthis API consumes numpyâ\x80\x99s ndarray and produces MXNetâ\x80\x99s ndarray\nwithout having to copy the content. In this case, we disallow\nusers to modify the given numpy ndarray, and it is suggested\nnot to read the numpy ndarray as well for internal correctness.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'a NDArray backed by a dlpack tensor', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.zeros(shape, ctx=None, dtype=None, stype=None, **kwargs)[source]Â¶","['Return a new array of given shape and type, filled with zeros.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'A created array', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.indexing_key_expand_implicit_axes(key, shape)[source]Â¶","['Make implicit axes explicit by adding ', 'slice(None)', '\nand convert boolean array to integer array through ', 'nonzero', '.', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.get_indexing_dispatch_code(key)[source]Â¶","['Returns a dispatch code for calling basic or advanced indexing functions.', '\n', '\n']"
"
mxnet.ndarray.get_oshape_of_gather_nd_op(dshape, ishape)[source]Â¶","['Given data and index shapes, get the output ', 'NDArray', ' shape.\nThis basically implements the infer shape logic of op gather_nd.', '\n', '\n']"
"
mxnet.ndarray.zeros(shape, ctx=None, dtype=None, stype=None, **kwargs)[source]","['Return a new array of given shape and type, filled with zeros.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'A created array', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.empty(shape, ctx=None, dtype=None, stype=None)[source]Â¶","['Returns a new array of given shape and type, without initializing entries.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'A created array.', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.array(source_array, ctx=None, dtype=None)[source]Â¶","['Creates an array from any object exposing the array interface.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'An array with the same contents as the ', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.load(fname)[source]Â¶","['Loads an array from file.', '\n', 'See more details in ', 'save', '.', '\n', '\n', 'Parameters', '\n', 'fname', '\n', 'Returns', '\n', 'Loaded data.', '\n', 'Return type', '\n', 'list of NDArray, ', '\n', '\n', '\n']"
"
mxnet.ndarray.load_frombuffer(buf)[source]Â¶","['Loads an array dictionary or list from a buffer', '\n', 'See more details in ', 'save', '.', '\n', '\n', 'Parameters', '\n', 'buf', '\n', 'Returns', '\n', 'Loaded data.', '\n', 'Return type', '\n', 'list of NDArray, ', '\n', '\n', '\n']"
"
mxnet.ndarray.save(fname, data)[source]Â¶","['Saves a list of arrays or a dict of str->array to file.', '\n', 'Examples of filenames:', '\n', '\n', '/path/to/file', '\n', 's3://my-bucket/path/to/file', '\n', 'hdfs://path/to/file', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.rand_zipfian(true_classes, num_sampled, range_max, ctx=None)[source]Â¶","['Draw random samples from an approximately log-uniform or Zipfian distribution.', '\n', 'This operation randomly samples ', 'num_sampled', ' candidates the range of integers [0, range_max).\nThe elements of sampled_candidates are drawn with replacement from the base distribution.', '\n', 'The base distribution for this operator is an approximately log-uniform or Zipfian distribution:', '\n', 'P(class) = (log(class + 2) - log(class + 1)) / log(range_max + 1)', '\n', 'This sampler is useful when the true classes approximately follow such a distribution.\nFor example, if the classes represent words in a lexicon sorted in decreasing order of     frequency. If your classes are not ordered by decreasing frequency, do not use this op.', '\n', 'Additionaly, it also returns the number of times each of the     true classes and the sampled classes is expected to occur.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', '\n', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.foreach(body, data, init_states)[source]Â¶","['Run a for loop with user-defined computation over NDArrays on dimension 0.', '\n', 'This operator simulates a for loop and body has the computation for an iteration\nof the for loop. It runs the computation in body on each slice from the input\nNDArrays.', '\n', 'body takes two arguments as input and outputs a tuple of two elements,\nas illustrated below:', '\n', None, '\n', '\n', 'data1 can be either an NDArray or a list of NDArrays. If data is an NDArray,\ndata1 is an NDArray. Otherwise, data1 is a list of NDArrays and has the same\nsize as data. states is a list of NDArrays and have the same size as init_states.\nSimilarly, out can be either an NDArray or a list of NDArrays, which are concatenated\nas the first output of foreach; states from the last execution of body\nare the second output of foreach.', '\n', 'The computation done by this operator is equivalent to the pseudo code below\nwhen the input data is NDArray:', '\n', None, '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', '\n', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.while_loop(cond, func, loop_vars, max_iterations=None)[source]Â¶","['Run a while loop with user-defined computation and loop condition.', '\n', 'This operator simulates a while loop which iterately does customized computation\nas long as the condition is satisfied.', '\n', 'loop_vars', ' is a list of NDArrays on which the computation uses.', '\n', 'cond', ' is a user-defined function, used as the loop condition.\nIt consumes ', 'loop_vars', ', and produces a scalar MXNet NDArray,\nindicating the termination of the loop.\nThe loop ends when ', 'cond', ' returns false (zero).\nThe ', 'cond', ' is variadic, and its signature should be\n', 'cond(*loop_vars) => NDArray', '.', '\n', 'func', ' is a user-defined function, used as the loop body.\nIt also consumes ', 'loop_vars', ', and produces ', 'step_output', ' and ', 'new_loop_vars', ' at each step.\nIn each step, ', 'step_output', ' should contain the same number elements.\nThrough all steps, the i-th element of ', 'step_output', ' should have the same shape and dtype.\nAlso, ', 'new_loop_vars', ' should contain the same number of elements as ', 'loop_vars', ',\nand the corresponding element should have the same shape and dtype.\nThe ', 'func', ' is variadic, and its signature should be\n', 'func(*loop_vars) =>\n(NDArray or nested List[NDArray] step_output, NDArray or nested List[NDArray] new_loop_vars)', '.', '\n', 'max_iterations', ' is a scalar that defines the maximum number of iterations allowed.', '\n', 'This function returns two lists.\nThe first list has the length of ', '|step_output|', ',\nin which the i-th element are all i-th elements of\n', 'step_output', ' from all steps, stacked along axis 0.\nThe second list has the length of ', '|loop_vars|', ',\nwhich represents final states of loop variables.', '\n', '\n', 'Warning', '\n', 'For now, the axis 0 of all NDArrays in the first list are ', '\n', '\n', '\n', 'Warning', '\n', 'When ', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', '\n', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.cond(pred, then_func, else_func)[source]Â¶","['Run an if-then-else using user-defined condition and computation', '\n', 'This operator simulates a if-like branch which chooses to do one of\nthe two customized computations according to the specified condition.', '\n', 'pred', ' is a scalar MXNet NDArray,\nindicating which branch of computation should be used.', '\n', 'then_func', ' is a user-defined function, used as computation of the then branch.\nIt produces ', 'outputs', ', which is a list of NDArrays.\nThe signature of ', 'then_func', ' should be\n', 'then_func() => NDArray or nested List[NDArray]', '.', '\n', 'else_func', ' is a user-defined function, used as computation of the else branch.\nIt produces ', 'outputs', ', which is a list of NDArrays.\nThe signature of ', 'else_func', ' should be\n', 'else_func() => NDArray or nested List[NDArray]', '.', '\n', 'The ', 'outputs', ' produces by ', 'then_func', ' and ', 'else_func', ' should have the same number\nof elements, all of which should be in the same shape, of the same dtype and stype.', '\n', 'This function returns a list of symbols, representing the computation result.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'outputs', '\n', 'Return type', '\n', 'an NDArray or nested lists of NDArrays, representing the result of computation.', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.isinf(data)[source]Â¶","['Performs an element-wise check to determine if the NDArray contains an infinite element\nor not.', '\n', '\n', 'Parameters', '\n', 'input', '\n', 'Returns', '\n', 'output', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.isfinite(data)[source]Â¶","['Performs an element-wise check to determine if the NDArray contains an infinite element\nor not.', '\n', '\n', 'Parameters', '\n', 'input', '\n', 'Returns', '\n', 'output', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.isnan(data)[source]Â¶","['Performs an element-wise check to determine if the NDArray contains a NaN element\nor not.', '\n', '\n', 'Parameters', '\n', 'input', '\n', 'Returns', '\n', 'output', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', 'Examples', '\n', None, '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.AdaptiveAvgPooling2D(data=None, output_size=_Null, out=None, name=None, **kwargs)Â¶","['Applies a 2D adaptive average pooling over a 4D input with the shape of (NCHW).\nThe pooling kernel and stride sizes are automatically chosen for desired output sizes.', '\n', '\n', 'If a single integer is provided for output_size, the output size is (N x C x output_size x output_size) for any input (NCHW).', '\n', 'If a tuple of integers (height, width) are provided for output_size, the output size is (N x C x height x width) for any input (NCHW).', '\n', '\n', 'Defined in src/operator/contrib/adaptive_avg_pooling.cc:L213', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.BatchNormWithReLU(data=None, gamma=None, beta=None, moving_mean=None, moving_var=None, eps=_Null, momentum=_Null, fix_gamma=_Null, use_global_stats=_Null, output_mean_var=_Null, axis=_Null, cudnn_off=_Null, min_calib_range=_Null, max_calib_range=_Null, out=None, name=None, **kwargs)Â¶","['Batch normalization with ReLU fusion.', '\n', 'An extented operator of Batch normalization which can fuse ReLU activation.', '\n', 'Defined in src/operator/contrib/batch_norm_relu.cc:L249', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.BilinearResize2D(data=None, like=None, height=_Null, width=_Null, scale_height=_Null, scale_width=_Null, mode=_Null, align_corners=_Null, out=None, name=None, **kwargs)Â¶","['Perform 2D resizing (upsampling or downsampling) for 4D input using bilinear interpolation.', '\n', 'Expected input is a 4 dimensional NDArray (NCHW) and the output\nwith the shape of (N x C x height x width).\nThe key idea of bilinear interpolation is to perform linear interpolation\nfirst in one direction, and then again in the other direction. See the wikipedia of\n', 'Bilinear interpolation', '\nfor more details.', '\n', 'Defined in src/operator/contrib/bilinear_resize.cc:L219', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.CTCLoss(data=None, label=None, data_lengths=None, label_lengths=None, use_data_lengths=_Null, use_label_lengths=_Null, blank_label=_Null, out=None, name=None, **kwargs)Â¶","['Connectionist Temporal Classification Loss.', '\n', '\n', 'Note', '\n', 'The existing alias ', '\n', '\n', 'The shapes of the inputs and outputs:', '\n', '\n', 'data', '\n', 'label', '\n', 'out', '\n', '\n', 'The ', 'data', ' tensor consists of sequences of activation vectors (without applying softmax),\nwith i-th channel in the last dimension corresponding to i-th label\nfor i between 0 and alphabet_size-1 (i.e always 0-indexed).\nAlphabet size should include one additional value reserved for blank label.\nWhen ', 'blank_label', ' is ', '""first""', ', the ', '0', '-th channel is be reserved for\nactivation of blank label, or otherwise if it is â\x80\x9clastâ\x80\x9d, ', '(alphabet_size-1)', '-th channel should be\nreserved for blank label.', '\n', 'label', ' is an index matrix of integers. When ', 'blank_label', ' is ', '""first""', ',\nthe value 0 is then reserved for blank label, and should not be passed in this matrix. Otherwise,\nwhen ', 'blank_label', ' is ', '""last""', ', the value ', '(alphabet_size-1)', ' is reserved for blank label.', '\n', 'If a sequence of labels is shorter than ', 'label_sequence_length', ', use the special\npadding value at the end of the sequence to conform it to the correct\nlength. The padding value is ', '0', ' when ', 'blank_label', ' is ', '""first""', ', and ', '-1', ' otherwise.', '\n', 'For example, suppose the vocabulary is ', '[a, b, c]', ', and in one batch we have three sequences\nâ\x80\x98baâ\x80\x99, â\x80\x98cbbâ\x80\x99, and â\x80\x98abacâ\x80\x99. When ', 'blank_label', ' is ', '""first""', ', we can index the labels as\n', '{â\x80\x98aâ\x80\x99: 1, â\x80\x98bâ\x80\x99: 2, â\x80\x98câ\x80\x99: 3}', ', and we reserve the 0-th channel for blank label in data tensor.\nThe resulting ', 'label', ' tensor should be padded to be:', '\n', None, '\n', '\n', 'When ', 'blank_label', ' is ', '""last""', ', we can index the labels as\n', '{â\x80\x98aâ\x80\x99: 0, â\x80\x98bâ\x80\x99: 1, â\x80\x98câ\x80\x99: 2}', ', and we reserve the channel index 3 for blank label in data tensor.\nThe resulting ', 'label', ' tensor should be padded to be:', '\n', None, '\n', '\n', 'out', ' is a list of CTC loss values, one per example in the batch.', '\n', 'See ', 'Connectionist Temporal Classification: Labelling Unsegmented\nSequence Data with Recurrent Neural Networks', ', A. Graves ', 'et al', '. for more\ninformation on the definition and the algorithm.', '\n', 'Defined in src/operator/nn/ctc_loss.cc:L100', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.DeformableConvolution(data=None, offset=None, weight=None, bias=None, kernel=_Null, stride=_Null, dilate=_Null, pad=_Null, num_filter=_Null, num_group=_Null, num_deformable_group=_Null, workspace=_Null, no_bias=_Null, layout=_Null, out=None, name=None, **kwargs)Â¶","['Compute 2-D deformable convolution on 4-D input.', '\n', 'The deformable convolution operation is described in ', 'https://arxiv.org/abs/1703.06211', '\n', 'For 2-D deformable convolution, the shapes are', '\n', '\n', 'data', '\n', 'offset', '\n', 'weight', '\n', 'bias', '\n', 'out', '\n', '\n', 'Define:', '\n', None, '\n', '\n', 'then we have:', '\n', None, '\n', '\n', 'If ', 'no_bias', ' is set to be true, then the ', 'bias', ' term is ignored.', '\n', 'The default data ', 'layout', ' is ', 'NCHW', ', namely ', '(batch_size, channle, height,\nwidth)', '.', '\n', 'If ', 'num_group', ' is larger than 1, denoted by ', 'g', ', then split the input ', 'data', '\nevenly into ', 'g', ' parts along the channel axis, and also evenly split ', 'weight', '\nalong the first dimension. Next compute the convolution on the ', 'i', '-th part of\nthe data with the ', 'i', '-th weight part. The output is obtained by concating all\nthe ', 'g', ' results.', '\n', 'If ', 'num_deformable_group', ' is larger than 1, denoted by ', 'dg', ', then split the\ninput ', 'offset', ' evenly into ', 'dg', ' parts along the channel axis, and also evenly\nsplit ', 'data', ' into ', 'dg', ' parts along the channel axis. Next compute the\ndeformable convolution, apply the ', 'i', '-th part of the offset on the ', 'i', '-th part\nof the data.', '\n', 'Both ', 'weight', ' and ', 'bias', ' are learnable parameters.', '\n', 'Defined in src/operator/contrib/deformable_convolution.cc:L83', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.DeformablePSROIPooling(data=None, rois=None, trans=None, spatial_scale=_Null, output_dim=_Null, group_size=_Null, pooled_size=_Null, part_size=_Null, sample_per_part=_Null, trans_std=_Null, no_trans=_Null, out=None, name=None, **kwargs)Â¶","['Performs deformable position-sensitive region-of-interest pooling on inputs.\nThe DeformablePSROIPooling operation is described in ', 'https://arxiv.org/abs/1703.06211', ' .batch_size will change to the number of region bounding boxes after DeformablePSROIPooling', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.ModulatedDeformableConvolution(data=None, offset=None, mask=None, weight=None, bias=None, kernel=_Null, stride=_Null, dilate=_Null, pad=_Null, num_filter=_Null, num_group=_Null, num_deformable_group=_Null, workspace=_Null, no_bias=_Null, im2col_step=_Null, layout=_Null, out=None, name=None, **kwargs)Â¶","['Compute 2-D modulated deformable convolution on 4-D input.', '\n', 'The modulated deformable convolution operation is described in ', 'https://arxiv.org/abs/1811.11168', '\n', 'For 2-D modulated deformable convolution, the shapes are', '\n', '\n', 'data', '\n', 'offset', '\n', 'mask', '\n', 'weight', '\n', 'bias', '\n', 'out', '\n', '\n', 'Define:', '\n', None, '\n', '\n', 'then we have:', '\n', None, '\n', '\n', 'If ', 'no_bias', ' is set to be true, then the ', 'bias', ' term is ignored.', '\n', 'The default data ', 'layout', ' is ', 'NCHW', ', namely ', '(batch_size, channle, height,\nwidth)', '.', '\n', 'If ', 'num_group', ' is larger than 1, denoted by ', 'g', ', then split the input ', 'data', '\nevenly into ', 'g', ' parts along the channel axis, and also evenly split ', 'weight', '\nalong the first dimension. Next compute the convolution on the ', 'i', '-th part of\nthe data with the ', 'i', '-th weight part. The output is obtained by concating all\nthe ', 'g', ' results.', '\n', 'If ', 'num_deformable_group', ' is larger than 1, denoted by ', 'dg', ', then split the\ninput ', 'offset', ' evenly into ', 'dg', ' parts along the channel axis, and also evenly\nsplit ', 'out', ' evenly into ', 'dg', ' parts along the channel axis. Next compute the\ndeformable convolution, apply the ', 'i', '-th part of the offset part on the ', 'i', '-th\nout.', '\n', 'Both ', 'weight', ' and ', 'bias', ' are learnable parameters.', '\n', 'Defined in src/operator/contrib/modulated_deformable_convolution.cc:L83', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.MultiBoxDetection(cls_prob=None, loc_pred=None, anchor=None, clip=_Null, threshold=_Null, background_id=_Null, nms_threshold=_Null, force_suppress=_Null, variances=_Null, nms_topk=_Null, out=None, name=None, **kwargs)Â¶","['Convert multibox detection predictions.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.MultiBoxPrior(data=None, sizes=_Null, ratios=_Null, clip=_Null, steps=_Null, offsets=_Null, out=None, name=None, **kwargs)Â¶","['Generate prior(anchor) boxes from data, sizes and ratios.', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.MultiBoxTarget(anchor=None, label=None, cls_pred=None, overlap_threshold=_Null, ignore_label=_Null, negative_mining_ratio=_Null, negative_mining_thresh=_Null, minimum_negative_samples=_Null, variances=_Null, out=None, name=None, **kwargs)Â¶","['Compute Multibox training targets', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.MultiProposal(cls_prob=None, bbox_pred=None, im_info=None, rpn_pre_nms_top_n=_Null, rpn_post_nms_top_n=_Null, threshold=_Null, rpn_min_size=_Null, scales=_Null, ratios=_Null, feature_stride=_Null, output_score=_Null, iou_loss=_Null, out=None, name=None, **kwargs)Â¶","['Generate region proposals via RPN', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.PSROIPooling(data=None, rois=None, spatial_scale=_Null, output_dim=_Null, pooled_size=_Null, group_size=_Null, out=None, name=None, **kwargs)Â¶","['Performs region-of-interest pooling on inputs. Resize bounding box coordinates by spatial_scale and crop input feature maps accordingly. The cropped feature maps are pooled by max pooling to a fixed size output indicated by pooled_size. batch_size will change to the number of region bounding boxes after PSROIPooling', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.Proposal(cls_prob=None, bbox_pred=None, im_info=None, rpn_pre_nms_top_n=_Null, rpn_post_nms_top_n=_Null, threshold=_Null, rpn_min_size=_Null, scales=_Null, ratios=_Null, feature_stride=_Null, output_score=_Null, iou_loss=_Null, out=None, name=None, **kwargs)Â¶","['Generate region proposals via RPN', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.ROIAlign(data=None, rois=None, pooled_size=_Null, spatial_scale=_Null, sample_ratio=_Null, position_sensitive=_Null, aligned=_Null, out=None, name=None, **kwargs)Â¶","['This operator takes a 4D feature map as an input array and region proposals as ', 'rois', ',\nthen align the feature map over sub-regions of input and produces a fixed-sized output array.\nThis operator is typically used in Faster R-CNN & Mask R-CNN networks. If roi batchid is less\nthan 0, it will be ignored, and the corresponding output will be set to 0.', '\n', 'Different from ROI pooling, ROI Align removes the harsh quantization, properly aligning\nthe extracted features with the input. RoIAlign computes the value of each sampling point\nby bilinear interpolation from the nearby grid points on the feature map. No quantization is\nperformed on any coordinates involved in the RoI, its bins, or the sampling points.\nBilinear interpolation is used to compute the exact values of the\ninput features at four regularly sampled locations in each RoI bin.\nThen the feature map can be aggregated by avgpooling.', '\n', 'References', '\n', 'He, Kaiming, et al. â\x80\x9cMask R-CNN.â\x80\x9d ICCV, 2017', '\n', 'Defined in src/operator/contrib/roi_align.cc:L558', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.RROIAlign(data=None, rois=None, pooled_size=_Null, spatial_scale=_Null, sampling_ratio=_Null, out=None, name=None, **kwargs)Â¶","['Performs Rotated ROI Align on the input array.', '\n', 'This operator takes a 4D feature map as an input array and region proposals as ', 'rois', ',\nthen align the feature map over sub-regions of input and produces a fixed-sized output array.', '\n', 'Different from ROI Align, RROI Align uses rotated rois, which is suitable for text detection.\nRRoIAlign computes the value of each sampling point by bilinear interpolation from the nearby\ngrid points on the rotated feature map. No quantization is performed on any coordinates\ninvolved in the RoI, its bins, or the sampling points. Bilinear interpolation is used to\ncompute the exact values of the input features at four regularly sampled locations in\neach RoI bin. Then the feature map can be aggregated by avgpooling.', '\n', 'References', '\n', 'Ma, Jianqi, et al. â\x80\x9cArbitrary-Oriented Scene Text Detection via Rotation Proposals.â\x80\x9d\nIEEE Transactions on Multimedia, 2018.', '\n', 'Defined in src/operator/contrib/rroi_align.cc:L273', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.SparseEmbedding(data=None, weight=None, input_dim=_Null, output_dim=_Null, dtype=_Null, sparse_grad=_Null, out=None, name=None, **kwargs)Â¶","['Maps integer indices to vector representations (embeddings).', '\n', 'note:: ', 'contrib.SparseEmbedding', ' is deprecated, use ', 'Embedding', ' instead.', '\n', 'This operator maps words to real-valued vectors in a high-dimensional space,\ncalled word embeddings. These embeddings can capture semantic and syntactic properties of the words.\nFor example, it has been noted that in the learned embedding spaces, similar words tend\nto be close to each other and dissimilar words far apart.', '\n', 'For an input array of shape (d1, â\x80¦, dK),\nthe shape of an output array is (d1, â\x80¦, dK, output_dim).\nAll the input values should be integers in the range [0, input_dim).', '\n', 'If the input_dim is ip0 and output_dim is op0, then shape of the embedding weight matrix must be\n(ip0, op0).', '\n', 'The storage type of the gradient will be ', 'row_sparse', '.', '\n', '\n', 'Note', '\n', 'SparseEmbedding', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/indexing_op.cc:L674', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.SyncBatchNorm(data=None, gamma=None, beta=None, moving_mean=None, moving_var=None, eps=_Null, momentum=_Null, fix_gamma=_Null, use_global_stats=_Null, output_mean_var=_Null, ndev=_Null, key=_Null, out=None, name=None, **kwargs)Â¶","['Batch normalization.', '\n', 'Normalizes a data batch by mean and variance, and applies a scale ', 'gamma', ' as\nwell as offset ', 'beta', '.\nStandard BN ', '1', ' implementation only normalize the data within each device.\nSyncBN normalizes the input within the whole mini-batch.\nWe follow the sync-onece implmentation described in the paper ', '2', '.', '\n', 'Assume the input has more than one dimension and we normalize along axis 1.\nWe first compute the mean and variance along this axis:', '\n', '\n\\[\\begin{split}data\\_mean[i] = mean(data[:,i,:,...]) \\\\\ndata\\_var[i] = var(data[:,i,:,...])\\end{split}\\]', '\n', 'Then compute the normalized output, which has the same shape as input, as following:', '\n', '\n\\[out[:,i,:,...] = \\frac{data[:,i,:,...] - data\\_mean[i]}{\\sqrt{data\\_var[i]+\\epsilon}} * gamma[i] + beta[i]\\]', '\n', 'Both ', 'mean', ' and ', 'var', ' returns a scalar by treating the input as a vector.', '\n', 'Assume the input has size ', 'k', ' on axis 1, then both ', 'gamma', ' and ', 'beta', '\nhave shape ', '(k,)', '. If ', 'output_mean_var', ' is set to be true, then outputs both ', 'data_mean', ' and\n', 'data_var', ' as well, which are needed for the backward pass.', '\n', 'Besides the inputs and the outputs, this operator accepts two auxiliary\nstates, ', 'moving_mean', ' and ', 'moving_var', ', which are ', 'k', '-length\nvectors. They are global statistics for the whole dataset, which are updated\nby:', '\n', None, '\n', '\n', 'If ', 'use_global_stats', ' is set to be true, then ', 'moving_mean', ' and\n', 'moving_var', ' are used instead of ', 'data_mean', ' and ', 'data_var', ' to compute\nthe output. It is often used during inference.', '\n', 'Both ', 'gamma', ' and ', 'beta', ' are learnable parameters. But if ', 'fix_gamma', ' is true,\nthen set ', 'gamma', ' to 1 and its gradient to 0.', '\n', '\n', 'Reference:', '\n', '\n', '\n', 'Defined in src/operator/contrib/sync_batch_norm.cc:L96', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.allclose(a=None, b=None, rtol=_Null, atol=_Null, equal_nan=_Null, out=None, name=None, **kwargs)Â¶","['This operators implements the numpy.allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)', '\n', '\n\\[f(x) = |aâ\x88\x92b|â\x89¤atol+rtol|b|\\]', '\n', 'where\n', '\\(a, b\\)', ' are the input tensors of equal types an shapes\n', '\\(atol, rtol\\)', ' the values of absolute and relative tolerance (by default, rtol=1e-05, atol=1e-08)', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/contrib/allclose_op.cc:L55', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.arange_like(data=None, start=_Null, step=_Null, repeat=_Null, ctx=_Null, axis=_Null, out=None, name=None, **kwargs)Â¶","['Return an array with evenly spaced values. If axis is not given, the output will\nhave the same shape as the input array. Otherwise, the output will be a 1-D array with size of\nthe specified axis in input shape.', '\n', 'Examples:', '\n', None, '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.backward_gradientmultiplier(data=None, scalar=_Null, is_int=_Null, out=None, name=None, **kwargs)Â¶","['\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.backward_hawkesll(out=None, name=None, **kwargs)Â¶","['\n', 'Parameters', '\n', 'out', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.backward_index_copy(out=None, name=None, **kwargs)Â¶","['\n', 'Parameters', '\n', 'out', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.backward_quadratic(out=None, name=None, **kwargs)Â¶","['\n', 'Parameters', '\n', 'out', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.bipartite_matching(data=None, is_ascend=_Null, threshold=_Null, topk=_Null, out=None, name=None, **kwargs)Â¶","['\n', 'Compute bipartite matching.', 'The matching is performed on score matrix with shape [B, N, M]\n- B: batch_size\n- N: number of rows to match\n- M: number of columns as reference to be matched against.', '\n', '\n', 'Defined in src/operator/contrib/bounding_box.cc:L182', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.boolean_mask(data=None, index=None, axis=_Null, out=None, name=None, **kwargs)Â¶","['Given an n-d NDArray data, and a 1-d NDArray index,\nthe operator produces an un-predeterminable shaped n-d NDArray out,\nwhich stands for the rows in x where the corresonding element in index is non-zero.', '\n', None, '\n', '\n', '[[4. 5. 6.]]\n<NDArray 1x3 @cpu(0)>', '\n', 'Defined in src/operator/contrib/boolean_mask.cc:L195', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.box_decode(data=None, anchors=None, std0=_Null, std1=_Null, std2=_Null, std3=_Null, clip=_Null, format=_Null, out=None, name=None, **kwargs)Â¶","['\n', 'Decode bounding boxes training target with normalized center offsets.', 'Input bounding boxes are using corner type: ', '\n', '\n', 'Defined in src/operator/contrib/bounding_box.cc:L233', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.box_encode(samples=None, matches=None, anchors=None, refs=None, means=None, stds=None, out=None, name=None, **kwargs)Â¶","['\n', 'Encode bounding boxes training target with normalized center offsets.', 'Input bounding boxes are using corner type: ', '\n', '\n', 'Defined in src/operator/contrib/bounding_box.cc:L210', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.box_iou(lhs=None, rhs=None, format=_Null, out=None, name=None, **kwargs)Â¶","['\n', 'Bounding box overlap of two arrays.', 'The overlap is defined as Intersection-over-Union, aka, IOU.\n- lhs: (a_1, a_2, â\x80¦, a_n, 4) array\n- rhs: (b_1, b_2, â\x80¦, b_n, 4) array\n- output: (a_1, a_2, â\x80¦, a_n, b_1, b_2, â\x80¦, b_n) array', '\n', '\n', 'Defined in src/operator/contrib/bounding_box.cc:L136', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.box_nms(data=None, overlap_thresh=_Null, valid_thresh=_Null, topk=_Null, coord_start=_Null, score_index=_Null, id_index=_Null, background_id=_Null, force_suppress=_Null, in_format=_Null, out_format=_Null, out=None, name=None, **kwargs)Â¶","['Apply non-maximum suppression to input.', '\n', 'The output will be sorted in descending order according to ', 'score', '. Boxes with\noverlaps larger than ', 'overlap_thresh', ', smaller scores and background boxes\nwill be removed and filled with -1, the corresponding position will be recorded\nfor backward propogation.', '\n', 'During back-propagation, the gradient will be copied to the original\nposition according to the input index. For positions that have been suppressed,\nthe in_grad will be assigned 0.\nIn summary, gradients are sticked to its boxes, will either be moved or discarded\naccording to its original index in input.', '\n', 'Input requirements:', '\n', None, '\n', '\n', 'By default, a box is [id, score, xmin, ymin, xmax, ymax, â\x80¦],\nadditional elements are allowed.', '\n', '\n', 'id_index', '\n', 'background_id', '\n', 'coord_start', '\n', 'score_index', '\n', 'in_format', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/contrib/bounding_box.cc:L94', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.box_non_maximum_suppression(data=None, overlap_thresh=_Null, valid_thresh=_Null, topk=_Null, coord_start=_Null, score_index=_Null, id_index=_Null, background_id=_Null, force_suppress=_Null, in_format=_Null, out_format=_Null, out=None, name=None, **kwargs)Â¶","['Apply non-maximum suppression to input.', '\n', 'The output will be sorted in descending order according to ', 'score', '. Boxes with\noverlaps larger than ', 'overlap_thresh', ', smaller scores and background boxes\nwill be removed and filled with -1, the corresponding position will be recorded\nfor backward propogation.', '\n', 'During back-propagation, the gradient will be copied to the original\nposition according to the input index. For positions that have been suppressed,\nthe in_grad will be assigned 0.\nIn summary, gradients are sticked to its boxes, will either be moved or discarded\naccording to its original index in input.', '\n', 'Input requirements:', '\n', None, '\n', '\n', 'By default, a box is [id, score, xmin, ymin, xmax, ymax, â\x80¦],\nadditional elements are allowed.', '\n', '\n', 'id_index', '\n', 'background_id', '\n', 'coord_start', '\n', 'score_index', '\n', 'in_format', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/contrib/bounding_box.cc:L94', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.calibrate_entropy(hist=None, hist_edges=None, num_quantized_bins=_Null, out=None, name=None, **kwargs)Â¶","['Provide calibrated min/max for input histogram.', '\n', '\n', 'Note', '\n', 'This operator only supports forward propagation. DO NOT use it in training.', '\n', '\n', 'Defined in src/operator/quantization/calibrate.cc:L196', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.count_sketch(data=None, h=None, s=None, out_dim=_Null, processing_batch_size=_Null, out=None, name=None, **kwargs)Â¶","['Apply CountSketch to input: map a d-dimension data to k-dimension dataâ\x80\x9d', '\n', '\n', 'Note', '\n', 'count_sketch', '\n', '\n', 'Assume input data has shape (N, d), sign hash table s has shape (N, d),\nindex hash table h has shape (N, d) and mapping dimension out_dim = k,\neach element in s is either +1 or -1, each element in h is random integer from 0 to k-1.\nThen the operator computs:', '\n', '\n\\[out[h[i]] += data[i] * s[i]\\]', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/contrib/count_sketch.cc:L66', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.ctc_loss(data=None, label=None, data_lengths=None, label_lengths=None, use_data_lengths=_Null, use_label_lengths=_Null, blank_label=_Null, out=None, name=None, **kwargs)Â¶","['Connectionist Temporal Classification Loss.', '\n', '\n', 'Note', '\n', 'The existing alias ', '\n', '\n', 'The shapes of the inputs and outputs:', '\n', '\n', 'data', '\n', 'label', '\n', 'out', '\n', '\n', 'The ', 'data', ' tensor consists of sequences of activation vectors (without applying softmax),\nwith i-th channel in the last dimension corresponding to i-th label\nfor i between 0 and alphabet_size-1 (i.e always 0-indexed).\nAlphabet size should include one additional value reserved for blank label.\nWhen ', 'blank_label', ' is ', '""first""', ', the ', '0', '-th channel is be reserved for\nactivation of blank label, or otherwise if it is â\x80\x9clastâ\x80\x9d, ', '(alphabet_size-1)', '-th channel should be\nreserved for blank label.', '\n', 'label', ' is an index matrix of integers. When ', 'blank_label', ' is ', '""first""', ',\nthe value 0 is then reserved for blank label, and should not be passed in this matrix. Otherwise,\nwhen ', 'blank_label', ' is ', '""last""', ', the value ', '(alphabet_size-1)', ' is reserved for blank label.', '\n', 'If a sequence of labels is shorter than ', 'label_sequence_length', ', use the special\npadding value at the end of the sequence to conform it to the correct\nlength. The padding value is ', '0', ' when ', 'blank_label', ' is ', '""first""', ', and ', '-1', ' otherwise.', '\n', 'For example, suppose the vocabulary is ', '[a, b, c]', ', and in one batch we have three sequences\nâ\x80\x98baâ\x80\x99, â\x80\x98cbbâ\x80\x99, and â\x80\x98abacâ\x80\x99. When ', 'blank_label', ' is ', '""first""', ', we can index the labels as\n', '{â\x80\x98aâ\x80\x99: 1, â\x80\x98bâ\x80\x99: 2, â\x80\x98câ\x80\x99: 3}', ', and we reserve the 0-th channel for blank label in data tensor.\nThe resulting ', 'label', ' tensor should be padded to be:', '\n', None, '\n', '\n', 'When ', 'blank_label', ' is ', '""last""', ', we can index the labels as\n', '{â\x80\x98aâ\x80\x99: 0, â\x80\x98bâ\x80\x99: 1, â\x80\x98câ\x80\x99: 2}', ', and we reserve the channel index 3 for blank label in data tensor.\nThe resulting ', 'label', ' tensor should be padded to be:', '\n', None, '\n', '\n', 'out', ' is a list of CTC loss values, one per example in the batch.', '\n', 'See ', 'Connectionist Temporal Classification: Labelling Unsegmented\nSequence Data with Recurrent Neural Networks', ', A. Graves ', 'et al', '. for more\ninformation on the definition and the algorithm.', '\n', 'Defined in src/operator/nn/ctc_loss.cc:L100', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.dequantize(data=None, min_range=None, max_range=None, out_type=_Null, out=None, name=None, **kwargs)Â¶","['Dequantize the input tensor into a float tensor.\nmin_range and max_range are scalar floats that specify the range for\nthe output data.', '\n', 'When input data type is ', 'uint8', ', the output is calculated using the following equation:', '\n', 'out[i] = in[i] * (max_range - min_range) / 255.0', ',', '\n', 'When input data type is ', 'int8', ', the output is calculate using the following equation\nby keep zero centered for the quantized value:', '\n', 'out[i] = in[i] * MaxAbs(min_range, max_range) / 127.0', ',', '\n', '\n', 'Note', '\n', 'This operator only supports forward propogation. DO NOT use it in training.', '\n', '\n', 'Defined in src/operator/quantization/dequantize.cc:L80', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.dgl_adjacency(data=None, out=None, name=None, **kwargs)Â¶","['This operator converts a CSR matrix whose values are edge Ids\nto an adjacency matrix whose values are ones. The output CSR matrix always has\nthe data value of float32.', '\n', 'Example', '\n', None, '\n', '\n', 'Defined in src/operator/contrib/dgl_graph.cc:L1424', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.dgl_csr_neighbor_non_uniform_sample(*seed_arrays, **kwargs)Â¶","['This operator samples sub-graph from a csr graph via an\nnon-uniform probability. The operator is designed for DGL.', '\n', 'The operator outputs four sets of NDArrays to represent the sampled results\n(the number of NDArrays in each set is the same as the number of seed NDArrays minus two (csr matrix and probability)):\n1) a set of 1D NDArrays containing the sampled vertices, 2) a set of CSRNDArrays representing\nthe sampled edges, 3) a set of 1D NDArrays with the probability that vertices are sampled,\n4) a set of 1D NDArrays indicating the layer where a vertex is sampled.\nThe first set of 1D NDArrays have a length of max_num_vertices+1. The last element in an NDArray\nindicate the acutal number of vertices in a subgraph. The third and fourth set of NDArrays have a length\nof max_num_vertices, and the valid number of vertices is the same as the ones in the first set.', '\n', 'Example', '\n', None, '\n', '\n', 'Defined in src/operator/contrib/dgl_graph.cc:L911', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.dgl_csr_neighbor_uniform_sample(*seed_arrays, **kwargs)Â¶","['This operator samples sub-graphs from a csr graph via an\nuniform probability. The operator is designed for DGL.', '\n', 'The operator outputs three sets of NDArrays to represent the sampled results\n(the number of NDArrays in each set is the same as the number of seed NDArrays minus two (csr matrix and probability)):\n1) a set of 1D NDArrays containing the sampled vertices, 2) a set of CSRNDArrays representing\nthe sampled edges, 3) a set of 1D NDArrays indicating the layer where a vertex is sampled.\nThe first set of 1D NDArrays have a length of max_num_vertices+1. The last element in an NDArray\nindicate the acutal number of vertices in a subgraph. The third set of NDArrays have a length\nof max_num_vertices, and the valid number of vertices is the same as the ones in the first set.', '\n', 'Example', '\n', None, '\n', '\n', 'Defined in src/operator/contrib/dgl_graph.cc:L801', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.dgl_graph_compact(*graph_data, **kwargs)Â¶","['This operator compacts a CSR matrix generated by\ndgl_csr_neighbor_uniform_sample and dgl_csr_neighbor_non_uniform_sample.\nThe CSR matrices generated by these two operators may have many empty\nrows at the end and many empty columns. This operator removes these\nempty rows and empty columns.', '\n', 'Example', '\n', None, '\n', '\n', 'Defined in src/operator/contrib/dgl_graph.cc:L1613', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.dgl_subgraph(*data, **kwargs)Â¶","['This operator constructs an induced subgraph for\na given set of vertices from a graph. The operator accepts multiple\nsets of vertices as input. For each set of vertices, it returns a pair\nof CSR matrices if return_mapping is True: the first matrix contains edges\nwith new edge Ids, the second matrix contains edges with the original\nedge Ids.', '\n', 'Example', '\n', None, '\n', '\n', 'Defined in src/operator/contrib/dgl_graph.cc:L1171', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.div_sqrt_dim(data=None, out=None, name=None, **kwargs)Â¶","['Rescale the input by the square root of the channel dimension.', '\n', '\n', 'out = data / sqrt(data.shape[-1])', '\n', 'Defined in src/operator/contrib/transformer.cc:L832', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.edge_id(data=None, u=None, v=None, out=None, name=None, **kwargs)Â¶","['This operator implements the edge_id function for a graph\nstored in a CSR matrix (the value of the CSR stores the edge Id of the graph).\noutput[i] = input[u[i], v[i]] if there is an edge between u[i] and v[i]],\notherwise output[i] will be -1. Both u and v should be 1D vectors.', '\n', 'Example', '\n', None, '\n', '\n', '\n', 'The storage type of ', '\n', '\n', '\n', 'Defined in src/operator/contrib/dgl_graph.cc:L1352', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.fft(data=None, compute_size=_Null, out=None, name=None, **kwargs)Â¶","['Apply 1D FFT to inputâ\x80\x9d', '\n', '\n', 'Note', '\n', 'fft', '\n', '\n', 'Currently accept 2 input data shapes: (N, d) or (N1, N2, N3, d), data can only be real numbers.\nThe output data has shape: (N, 2*d) or (N1, N2, N3, 2*d). The format is: [real0, imag0, real1, imag1, â\x80¦].', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/contrib/fft.cc:L55', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.getnnz(data=None, axis=_Null, out=None, name=None, **kwargs)Â¶","['Number of stored values for a sparse tensor, including explicit zeros.', '\n', 'This operator only supports CSR matrix on CPU.', '\n', 'Defined in src/operator/contrib/nnz.cc:L176', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.gradientmultiplier(data=None, scalar=_Null, is_int=_Null, out=None, name=None, **kwargs)Â¶","['This operator implements the gradient multiplier function.\nIn forward pass it acts as an identity transform. During backpropagation it\nmultiplies the gradient from the subsequent level by a scalar factor lambda and passes it to\nthe preceding layer.', '\n', 'Defined in src/operator/contrib/gradient_multiplier_op.cc:L78', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.group_adagrad_update(weight=None, grad=None, history=None, lr=_Null, rescale_grad=_Null, clip_gradient=_Null, epsilon=_Null, out=None, name=None, **kwargs)Â¶","['Update function for Group AdaGrad optimizer.', '\n', 'Referenced from ', 'Adaptive Subgradient Methods for Online Learning and Stochastic Optimization', ',\nand available at ', 'http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf', ' but\nuses only a single learning rate for every row of the parameter array.', '\n', 'Updates are applied by:', '\n', None, '\n', '\n', 'Weights are updated lazily if the gradient is sparse.', '\n', 'Note that non-zero values for the weight decay option are not supported.', '\n', 'Defined in src/operator/contrib/optimizer_op.cc:L70', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.hawkesll(lda=None, alpha=None, beta=None, state=None, lags=None, marks=None, valid_length=None, max_time=None, out=None, name=None, **kwargs)Â¶","['Computes the log likelihood of a univariate Hawkes process.', '\n', 'The log likelihood is calculated on point process observations represented\nas ', 'ragged', ' matrices for ', 'lags', ' (interarrival times w.r.t. the previous point),\nand ', 'marks', ' (identifiers for the process ID). Note that each mark is considered independent,\ni.e., computes the joint likelihood of a set of Hawkes processes determined by the conditional intensity:', '\n', '\n\\[\\lambda_k^*(t) = \\lambda_k + \\alpha_k \\sum_{\\{t_i < t, y_i = k\\}} \\beta_k \\exp(-\\beta_k (t - t_i))\\]', '\n', 'where ', '\\(\\lambda_k\\)', ' specifies the background intensity ', 'lda', ', ', '\\(\\alpha_k\\)', ' specifies the ', 'branching ratio', ' or ', 'alpha', ', and ', '\\(\\beta_k\\)', ' the delay density parameter ', 'beta', '.', '\n', 'lags', ' and ', 'marks', ' are two NDArrays of shape (N, T) and correspond to the representation of the point process observation, the first dimension corresponds to the batch index, and the second to the sequence. These are â\x80\x9cleft-alignedâ\x80\x9d ', 'ragged', ' matrices (the first index of the second dimension is the beginning of every sequence. The length of each sequence is given by ', 'valid_length', ', of shape (N,) where ', 'valid_length[i]', ' corresponds to the number of valid points in ', 'lags[i,', ' and ', 'marks[i,', '.', '\n', 'max_time', ' is the length of the observation period of the point process. That is, specifying ', 'max_time[i]', ' computes the likelihood of the i-th sample as observed on the time interval ', '\\((0, 5]\\)', '. Naturally, the sum of all valid ', 'lags[i,', ' must be less than or equal to 5.', '\n', 'The input ', 'state', ' specifies the ', 'memory', ' of the Hawkes process. Invoking the memoryless property of exponential decays, we compute the ', 'memory', ' as', '\n', '\n\\[s_k(t) = \\sum_{t_i < t} \\exp(-\\beta_k (t - t_i)).\\]', '\n', 'The ', 'state', ' to be provided is ', '\\(s_k(0)\\)', ' and carries the added intensity due to past events before the current batch. ', '\\(s_k(T)\\)', ' is returned from the function where ', '\\(T\\)', ' is ', 'max_time[T]', '.', '\n', 'Example:', '\n', None, '\n', '\n', 'References:', '\n', '\n', 'Bacry, E., Mastromatteo, I., & Muzy, J. F. (2015).\nHawkes processes in finance. Market Microstructure and Liquidity\n, 1(01), 1550005.', '\n', '\n', 'Defined in src/operator/contrib/hawkes_ll.cc:L83', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.ifft(data=None, compute_size=_Null, out=None, name=None, **kwargs)Â¶","['Apply 1D ifft to inputâ\x80\x9d', '\n', '\n', 'Note', '\n', 'ifft', '\n', '\n', 'Currently accept 2 input data shapes: (N, d) or (N1, N2, N3, d). Data is in format: [real0, imag0, real1, imag1, â\x80¦].\nLast dimension must be an even number.\nThe output data has shape: (N, d/2) or (N1, N2, N3, d/2). It is only the real part of the result.', '\n', 'Example:', '\n', None, '\n', '\n', 'Defined in src/operator/contrib/ifft.cc:L57', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.index_array(data=None, axes=_Null, out=None, name=None, **kwargs)Â¶","['Returns an array of indexes of the input array.', '\n', 'For an input array with shape  ', '\\((d_1, d_2, ..., d_n)\\)', ', ', 'index_array', ' returns a\n', '\\((d_1, d_2, ..., d_n, n)\\)', ' array ', 'idx', ', where\n', '\\(idx[i_1, i_2, ..., i_n, :] = [i_1, i_2, ..., i_n]\\)', '.', '\n', 'Additionally, when the parameter ', 'axes', ' is specified, ', 'idx', ' will be a\n', '\\((d_1, d_2, ..., d_n, m)\\)', ' array where ', 'm', ' is the length of ', 'axes', ', and the following\nequality will hold: ', '\\(idx[i_1, i_2, ..., i_n, j] = i_{axes[j]}\\)', '.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/contrib/index_array.cc:L118', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.index_copy(old_tensor=None, index_vector=None, new_tensor=None, out=None, name=None, **kwargs)Â¶","['Copies the elements of a ', 'new_tensor', ' into the ', 'old_tensor', '.', '\n', 'This operator copies the elements by selecting the indices in the order given in ', 'index', '.\nThe output will be a new tensor containing the rest elements of old tensor and\nthe copied elements of new tensor.\nFor example, if ', 'index[i] == j', ', then the ', 'i', ' th row of ', 'new_tensor', ' is copied to the\n', 'j', ' th row of output.', '\n', 'The ', 'index', ' must be a vector and it must have the same size with the ', '0', ' th dimension of\n', 'new_tensor', '. Also, the ', '0', ' th dimension of old_tensor must ', '>=', ' the ', '0', ' th dimension of\n', 'new_tensor', ', or an error will be raised.', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/contrib/index_copy.cc:L183', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.interleaved_matmul_encdec_qk(queries=None, keys_values=None, heads=_Null, out=None, name=None, **kwargs)Â¶","['Compute the matrix multiplication between the projections of\nqueries and keys in multihead attention use as encoder-decoder.', '\n', 'the inputs must be a tensor of projections of queries following the layout:\n(seq_length, batch_size, num_heads * head_dim)', '\n', 'and a tensor of interleaved projections of values and keys following the layout:\n(seq_length, batch_size, num_heads * head_dim * 2)', '\n', 'the equivalent code would be:\nq_proj = mx.nd.transpose(queries, axes=(1, 2, 0, 3))\nq_proj = mx.nd.reshape(q_proj, shape=(-1, 0, 0), reverse=True)\nq_proj = mx.nd.contrib.div_sqrt_dim(q_proj)\ntmp = mx.nd.reshape(keys_values, shape=(0, 0, num_heads, 2, -1))\nk_proj = mx.nd.transpose(tmp[:,:,:,0,:], axes=(1, 2, 0, 3))\nk_proj = mx.nd.reshap(k_proj, shape=(-1, 0, 0), reverse=True)\noutput = mx.nd.batch_dot(q_proj, k_proj, transpose_b=True)', '\n', 'Defined in src/operator/contrib/transformer.cc:L753', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.interleaved_matmul_encdec_valatt(keys_values=None, attention=None, heads=_Null, out=None, name=None, **kwargs)Â¶","['Compute the matrix multiplication between the projections of\nvalues and the attention weights in multihead attention use as encoder-decoder.', '\n', 'the inputs must be a tensor of interleaved projections of\nkeys and values following the layout:\n(seq_length, batch_size, num_heads * head_dim * 2)', '\n', 'and the attention weights following the layout:\n(batch_size, seq_length, seq_length)', '\n', 'the equivalent code would be:', '\n', 'tmp = mx.nd.reshape(queries_keys_values, shape=(0, 0, num_heads, 3, -1))\nv_proj = mx.nd.transpose(tmp[:,:,:,1,:], axes=(1, 2, 0, 3))\nv_proj = mx.nd.reshape(v_proj, shape=(-1, 0, 0), reverse=True)\noutput = mx.nd.batch_dot(attention, v_proj, transpose_b=True)\noutput = mx.nd.reshape(output, shape=(-1, num_heads, 0, 0), reverse=True)\noutput = mx.nd.transpose(output, axes=(0, 2, 1, 3))\noutput = mx.nd.reshape(output, shape=(0, 0, -1))', '\n', 'Defined in src/operator/contrib/transformer.cc:L799', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.interleaved_matmul_selfatt_qk(queries_keys_values=None, heads=_Null, out=None, name=None, **kwargs)Â¶","['Compute the matrix multiplication between the projections of\nqueries and keys in multihead attention use as self attention.', '\n', 'the input must be a single tensor of interleaved projections\nof queries, keys and values following the layout:\n(seq_length, batch_size, num_heads * head_dim * 3)', '\n', 'the equivalent code would be:\ntmp = mx.nd.reshape(queries_keys_values, shape=(0, 0, num_heads, 3, -1))\nq_proj = mx.nd.transpose(tmp[:,:,:,0,:], axes=(1, 2, 0, 3))\nq_proj = mx.nd.reshape(q_proj, shape=(-1, 0, 0), reverse=True)\nq_proj = mx.nd.contrib.div_sqrt_dim(q_proj)\nk_proj = mx.nd.transpose(tmp[:,:,:,1,:], axes=(1, 2, 0, 3))\nk_proj = mx.nd.reshap(k_proj, shape=(-1, 0, 0), reverse=True)\noutput = mx.nd.batch_dot(q_proj, k_proj, transpose_b=True)', '\n', 'Defined in src/operator/contrib/transformer.cc:L665', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.interleaved_matmul_selfatt_valatt(queries_keys_values=None, attention=None, heads=_Null, out=None, name=None, **kwargs)Â¶","['Compute the matrix multiplication between the projections of\nvalues and the attention weights in multihead attention use as self attention.', '\n', 'the inputs must be a tensor of interleaved projections\nof queries, keys and values following the layout:\n(seq_length, batch_size, num_heads * head_dim * 3)', '\n', 'and the attention weights following the layout:\n(batch_size, seq_length, seq_length)', '\n', 'the equivalent code would be:\ntmp = mx.nd.reshape(queries_keys_values, shape=(0, 0, num_heads, 3, -1))\nv_proj = mx.nd.transpose(tmp[:,:,:,2,:], axes=(1, 2, 0, 3))\nv_proj = mx.nd.reshape(v_proj, shape=(-1, 0, 0), reverse=True)\noutput = mx.nd.batch_dot(attention, v_proj, transpose_b=True)\noutput = mx.nd.reshape(output, shape=(-1, num_heads, 0, 0), reverse=True)\noutput = mx.nd.transpose(output, axes=(0, 2, 1, 3))\noutput = mx.nd.reshape(output, shape=(0, 0, -1))', '\n', 'Defined in src/operator/contrib/transformer.cc:L709', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.intgemm_fully_connected(data=None, weight=None, scaling=None, bias=None, num_hidden=_Null, no_bias=_Null, flatten=_Null, out_type=_Null, out=None, name=None, **kwargs)Â¶","['Multiply matrices using 8-bit integers.  data * weight.', '\n', 'Input tensor arguments are: data weight [scaling] [bias]', '\n', 'data: either float32 or prepared using intgemm_prepare_data (in which case it is int8).', '\n', 'weight: must be prepared using intgemm_prepare_weight.', '\n', 'scaling: present if and only if out_type is float32. If so this is multiplied by the result before adding bias. Typically:\nscaling = (max passed to intgemm_prepare_weight)/127.0 if data is in float32\nscaling = (max_passed to intgemm_prepare_data)/127.0 * (max passed to intgemm_prepare_weight)/127.0 if data is in int8', '\n', 'bias: present if and only if !no_bias. This is added to the output after scaling and has the same number of columns as the output.', '\n', 'out_type: type of the output.', '\n', 'Defined in src/operator/contrib/intgemm/intgemm_fully_connected_op.cc:L283', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.intgemm_maxabsolute(data=None, out=None, name=None, **kwargs)Â¶","['Compute the maximum absolute value in a tensor of float32 fast on a CPU.  The tensorâ\x80\x99s total size must be a multiple of 16 and aligned to a multiple of 64 bytes.\nmxnet.nd.contrib.intgemm_maxabsolute(arr) == arr.abs().max()', '\n', 'Defined in src/operator/contrib/intgemm/max_absolute_op.cc:L101', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.intgemm_prepare_data(data=None, maxabs=None, out=None, name=None, **kwargs)Â¶","['This operator converts quantizes float32 to int8 while also banning -128.', '\n', 'It it suitable for preparing an data matrix for use by intgemmâ\x80\x99s C=data * weights operation.', '\n', 'The float32 values are scaled such that maxabs maps to 127. Typically maxabs = maxabsolute(A).', '\n', 'Defined in src/operator/contrib/intgemm/prepare_data_op.cc:L112', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.intgemm_prepare_weight(weight=None, maxabs=None, already_quantized=_Null, out=None, name=None, **kwargs)Â¶","['This operator converts a weight matrix in column-major format to intgemmâ\x80\x99s internal fast representation of weight matrices.  MXNet customarily stores weight matrices in column-major (transposed) format. This operator is not meant to be fast; it is meant to be run offline to quantize a model.', '\n', 'In other words, it prepares weight for the operation C = data * weight^T.', '\n', 'If the provided weight matrix is float32, it will be quantized first.  The quantization function is (int8_t)(127.0 / max * weight) where multiplier is provided as argument 1 (the weight matrix is argument 0).  Then the matrix will be rearranged into the CPU-dependent format.', '\n', 'If the provided weight matrix is already int8, the matrix will only be rearranged into the CPU-dependent format.  This way one can quantize with intgemm_prepare_data (which just quantizes), store to disk in a consistent format, then at load time convert to CPU-dependent format with intgemm_prepare_weight.', '\n', 'The internal representation depends on register length.  So AVX512, AVX2, and SSSE3 have different formats.  AVX512BW and AVX512VNNI have the same representation.', '\n', 'Defined in src/operator/contrib/intgemm/prepare_weight_op.cc:L153', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.intgemm_take_weight(weight=None, indices=None, out=None, name=None, **kwargs)Â¶","['Index a weight matrix stored in intgemmâ\x80\x99s weight format.\nThe indices select the outputs of matrix multiplication, not the inner dot product dimension.', '\n', 'Defined in src/operator/contrib/intgemm/take_weight_op.cc:L128', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.quadratic(data=None, a=_Null, b=_Null, c=_Null, out=None, name=None, **kwargs)Â¶","['This operators implements the quadratic function.', '\n', '\n\\[f(x) = ax^2+bx+c\\]', '\n', 'where ', '\\(x\\)', ' is an input tensor and all operations\nin the function are element-wise.', '\n', 'Example:', '\n', None, '\n', '\n', '\n', 'The storage type of ', '\n', '\n', '\n', 'Defined in src/operator/contrib/quadratic_op.cc:L50', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.quantize(data=None, min_range=None, max_range=None, out_type=_Null, out=None, name=None, **kwargs)Â¶","['Quantize a input tensor from float to ', 'out_type', ',\nwith user-specified ', 'min_range', ' and ', 'max_range', '.', '\n', 'min_range and max_range are scalar floats that specify the range for\nthe input data.', '\n', 'When out_type is ', 'uint8', ', the output is calculated using the following equation:', '\n', 'out[i] = (in[i] - min_range) * range(OUTPUT_TYPE) / (max_range - min_range) + 0.5', ',', '\n', 'where ', 'range(T) = numeric_limits<T>::max() - numeric_limits<T>::min()', '.', '\n', 'When out_type is ', 'int8', ', the output is calculate using the following equation\nby keep zero centered for the quantized value:', '\n', 'out[i] = sign(in[i]) * min(abs(in[i] * scale + 0.5f, quantized_range)', ',', '\n', 'where\n', 'quantized_range = MinAbs(max(int8), min(int8))', ' and\n', 'scale = quantized_range / MaxAbs(min_range, max_range).', '\n', '\n', 'Note', '\n', 'This operator only supports forward propagation. DO NOT use it in training.', '\n', '\n', 'Defined in src/operator/quantization/quantize.cc:L73', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.quantize_asym(data=None, min_calib_range=_Null, max_calib_range=_Null, out=None, name=None, **kwargs)Â¶","['Quantize a input tensor from float to uint8_t.\nOutput ', 'scale', ' and ', 'shift', ' are scalar floats that specify the quantization parameters for the input\ndata.\nThe output is calculated using the following equation:\n', 'out[i] = in[i] * scale + shift + 0.5', ',\nwhere ', 'scale = uint8_range / (max_range - min_range)', ' and\n', 'shift = numeric_limits<T>::max - max_range * scale', '.\n.. Note:', '\n', None, '\n', '\n', 'Defined in src/operator/quantization/quantize_asym.cc:L115', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.quantize_v2(data=None, out_type=_Null, min_calib_range=_Null, max_calib_range=_Null, out=None, name=None, **kwargs)Â¶","['Quantize a input tensor from float to ', 'out_type', ',\nwith user-specified ', 'min_calib_range', ' and ', 'max_calib_range', ' or the input range collected at runtime.', '\n', 'Output ', 'min_range', ' and ', 'max_range', ' are scalar floats that specify the range for the input data.', '\n', 'When out_type is ', 'uint8', ', the output is calculated using the following equation:', '\n', 'out[i] = (in[i] - min_range) * range(OUTPUT_TYPE) / (max_range - min_range) + 0.5', ',', '\n', 'where ', 'range(T) = numeric_limits<T>::max() - numeric_limits<T>::min()', '.', '\n', 'When out_type is ', 'int8', ', the output is calculate using the following equation\nby keep zero centered for the quantized value:', '\n', 'out[i] = sign(in[i]) * min(abs(in[i] * scale + 0.5f, quantized_range)', ',', '\n', 'where\n', 'quantized_range = MinAbs(max(int8), min(int8))', ' and\n', 'scale = quantized_range / MaxAbs(min_range, max_range).', '\n', 'When out_type is ', 'auto', ', the output type is automatically determined by min_calib_range if presented.\nIf min_calib_range < 0.0f, the output type will be int8, otherwise will be uint8.\nIf min_calib_range isnâ\x80\x99t presented, the output type will be int8.', '\n', '\n', 'Note', '\n', 'This operator only supports forward propagation. DO NOT use it in training.', '\n', '\n', 'Defined in src/operator/quantization/quantize_v2.cc:L90', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.quantized_act(data=None, min_data=None, max_data=None, act_type=_Null, out=None, name=None, **kwargs)Â¶","['Activation operator for input and output data type of int8.\nThe input and output data comes with min and max thresholds for quantizing\nthe float32 data into int8.', '\n', '\n', 'Note', '\n', 'This operator only supports forward propogation. DO NOT use it in training.\nThis operator only supports ', '\n', '\n', 'Defined in src/operator/quantization/quantized_activation.cc:L90', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.quantized_batch_norm(data=None, gamma=None, beta=None, moving_mean=None, moving_var=None, min_data=None, max_data=None, eps=_Null, momentum=_Null, fix_gamma=_Null, use_global_stats=_Null, output_mean_var=_Null, axis=_Null, cudnn_off=_Null, min_calib_range=_Null, max_calib_range=_Null, out=None, name=None, **kwargs)Â¶","['BatchNorm operator for input and output data type of int8.\nThe input and output data comes with min and max thresholds for quantizing\nthe float32 data into int8.', '\n', '\n', 'Note', '\n', 'This operator only supports forward propogation. DO NOT use it in training.', '\n', '\n', 'Defined in src/operator/quantization/quantized_batch_norm.cc:L94', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.quantized_concat(*data, **kwargs)Â¶","['Joins input arrays along a given axis.', '\n', 'The dimensions of the input arrays should be the same except the axis along\nwhich they will be concatenated.\nThe dimension of the output array along the concatenated axis will be equal\nto the sum of the corresponding dimensions of the input arrays.\nAll inputs with different min/max will be rescaled by using largest [min, max] pairs.\nIf any input holds int8, then the output will be int8. Otherwise output will be uint8.', '\n', 'Defined in src/operator/quantization/quantized_concat.cc:L107', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.quantized_conv(data=None, weight=None, bias=None, min_data=None, max_data=None, min_weight=None, max_weight=None, min_bias=None, max_bias=None, kernel=_Null, stride=_Null, dilate=_Null, pad=_Null, num_filter=_Null, num_group=_Null, workspace=_Null, no_bias=_Null, cudnn_tune=_Null, cudnn_off=_Null, layout=_Null, out=None, name=None, **kwargs)Â¶","['Convolution operator for input, weight and bias data type of int8,\nand accumulates in type int32 for the output. For each argument, two more arguments of type\nfloat32 must be provided representing the thresholds of quantizing argument from data\ntype float32 to int8. The final outputs contain the convolution result in int32, and min\nand max thresholds representing the threholds for quantizing the float32 output into int32.', '\n', '\n', 'Note', '\n', 'This operator only supports forward propogation. DO NOT use it in training.', '\n', '\n', 'Defined in src/operator/quantization/quantized_conv.cc:L187', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.quantized_elemwise_add(lhs=None, rhs=None, lhs_min=None, lhs_max=None, rhs_min=None, rhs_max=None, out=None, name=None, **kwargs)Â¶","['elemwise_add operator for input dataA and input dataB data type of int8,\nand accumulates in type int32 for the output. For each argument, two more arguments of type\nfloat32 must be provided representing the thresholds of quantizing argument from data\ntype float32 to int8. The final outputs contain result in int32, and min\nand max thresholds representing the threholds for quantizing the float32 output into int32.', '\n', '\n', 'Note', '\n', 'This operator only supports forward propogation. DO NOT use it in training.', '\n', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.quantized_elemwise_mul(lhs=None, rhs=None, lhs_min=None, lhs_max=None, rhs_min=None, rhs_max=None, min_calib_range=_Null, max_calib_range=_Null, enable_float_output=_Null, out=None, name=None, **kwargs)Â¶","['Multiplies arguments int8 element-wise.', '\n', 'Defined in src/operator/quantization/quantized_elemwise_mul.cc:L221', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.quantized_embedding(data=None, weight=None, min_weight=None, max_weight=None, input_dim=_Null, output_dim=_Null, dtype=_Null, sparse_grad=_Null, out=None, name=None, **kwargs)Â¶","['Maps integer indices to int8 vector representations (embeddings).', '\n', 'Defined in src/operator/quantization/quantized_indexing_op.cc:L133', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.quantized_flatten(data=None, min_data=None, max_data=None, out=None, name=None, **kwargs)Â¶","['\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.quantized_fully_connected(data=None, weight=None, bias=None, min_data=None, max_data=None, min_weight=None, max_weight=None, min_bias=None, max_bias=None, num_hidden=_Null, no_bias=_Null, flatten=_Null, out=None, name=None, **kwargs)Â¶","['Fully Connected operator for input, weight and bias data type of int8,\nand accumulates in type int32 for the output. For each argument, two more arguments of type\nfloat32 must be provided representing the thresholds of quantizing argument from data\ntype float32 to int8. The final outputs contain the convolution result in int32, and min\nand max thresholds representing the threholds for quantizing the float32 output into int32.', '\n', '\n', 'Note', '\n', 'This operator only supports forward propogation. DO NOT use it in training.', '\n', '\n', 'Defined in src/operator/quantization/quantized_fully_connected.cc:L312', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.quantized_pooling(data=None, min_data=None, max_data=None, kernel=_Null, pool_type=_Null, global_pool=_Null, cudnn_off=_Null, pooling_convention=_Null, stride=_Null, pad=_Null, p_value=_Null, count_include_pad=_Null, layout=_Null, out=None, name=None, **kwargs)Â¶","['Pooling operator for input and output data type of int8.\nThe input and output data comes with min and max thresholds for quantizing\nthe float32 data into int8.', '\n', '\n', 'Note', '\n', 'This operator only supports forward propogation. DO NOT use it in training.\nThis operator only supports ', '\n', '\n', 'Defined in src/operator/quantization/quantized_pooling.cc:L186', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.quantized_rnn(data=None, parameters=None, state=None, state_cell=None, data_scale=None, data_shift=None, state_size=_Null, num_layers=_Null, bidirectional=_Null, mode=_Null, p=_Null, state_outputs=_Null, projection_size=_Null, lstm_state_clip_min=_Null, lstm_state_clip_max=_Null, lstm_state_clip_nan=_Null, use_sequence_length=_Null, out=None, name=None, **kwargs)Â¶","['RNN operator for input data type of uint8. The weight of each gates is converted\nto int8, while bias is accumulated in type float32. The hidden state and cell state are in type\nfloat32. For the input data, two more arguments of type float32 must be provided representing the\nthresholds of quantizing argument from data type float32 to uint8. The final outputs contain the\nrecurrent result in float32. It only supports quantization for Vanilla LSTM network.\n.. Note:', '\n', None, '\n', '\n', 'Defined in src/operator/quantization/quantized_rnn.cc:L298', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.requantize(data=None, min_range=None, max_range=None, out_type=_Null, min_calib_range=_Null, max_calib_range=_Null, out=None, name=None, **kwargs)Â¶","['Given data that is quantized in int32 and the corresponding thresholds,\nrequantize the data into int8 using min and max thresholds either calculated at runtime\nor from calibration. Itâ\x80\x99s highly recommended to pre-calucate the min and max thresholds\nthrough calibration since it is able to save the runtime of the operator and improve the\ninference accuracy.', '\n', '\n', 'Note', '\n', 'This operator only supports forward propogation. DO NOT use it in training.', '\n', '\n', 'Defined in src/operator/quantization/requantize.cc:L59', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.round_ste(data=None, out=None, name=None, **kwargs)Â¶","['Straight-through-estimator of ', 'round()', '.', '\n', 'In forward pass, returns element-wise rounded value to the nearest integer of the input (same as ', 'round()', ').', '\n', 'In backward pass, returns gradients of ', '1', ' everywhere (instead of ', '0', ' everywhere as in ', 'round()', '):\n', '\\(\\frac{d}{dx}{round\\_ste(x)} = 1\\)', ' vs. ', '\\(\\frac{d}{dx}{round(x)} = 0\\)', '.\nThis is useful for quantized training.', '\n', 'Reference: Estimating or Propagating Gradients Through Stochastic Neurons for Conditional Computation.', '\n', '\n', 'Example::', 'x = round_ste([-1.5, 1.5, -1.9, 1.9, 2.7])\nx.backward()\nx = [-2.,  2., -2.,  2.,  3.]\nx.grad() = [1.,  1., 1.,  1.,  1.]', '\n', 'The storage type of ', '\n', '\n', '\n', 'Defined in src/operator/contrib/stes_op.cc:L54', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.contrib.sign_ste(data=None, out=None, name=None, **kwargs)Â¶","['Straight-through-estimator of ', 'sign()', '.', '\n', 'In forward pass, returns element-wise sign of the input (same as ', 'sign()', ').', '\n', 'In backward pass, returns gradients of ', '1', ' everywhere (instead of ', '0', ' everywhere as in ', 'sign()', '):\n', '\\(\\frac{d}{dx}{sign\\_ste(x)} = 1\\)', ' vs. ', '\\(\\frac{d}{dx}{sign(x)} = 0\\)', '.\nThis is useful for quantized training.', '\n', 'Reference: Estimating or Propagating Gradients Through Stochastic Neurons for Conditional Computation.', '\n', '\n', 'Example::', 'x = sign_ste([-2, 0, 3])\nx.backward()\nx = [-1.,  0., 1.]\nx.grad() = [1.,  1., 1.]', '\n', 'The storage type of ', '\n', '\n', '\n', 'Defined in src/operator/contrib/stes_op.cc:L79', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.image.adjust_lighting(data=None, alpha=_Null, out=None, name=None, **kwargs)Â¶","['Adjust the lighting level of the input. Follow the AlexNet style.', '\n', 'Defined in src/operator/image/image_random.cc:L254', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.image.crop(data=None, x=_Null, y=_Null, width=_Null, height=_Null, out=None, name=None, **kwargs)Â¶","['Crop an image NDArray of shape (H x W x C) or (N x H x W x C)\nto the given size.\n.. rubric:: Example', '\n', 'Defined in src/operator/image/crop.cc:L65', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.image.flip_left_right(data=None, out=None, name=None, **kwargs)Â¶","['Defined in src/operator/image/image_random.cc:L195', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.image.flip_top_bottom(data=None, out=None, name=None, **kwargs)Â¶","['Defined in src/operator/image/image_random.cc:L205', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.image.normalize(data=None, mean=_Null, std=_Null, out=None, name=None, **kwargs)Â¶","['\n', 'Normalize an tensor of shape (C x H x W) or (N x C x H x W) with mean and', 'standard deviation.', '\n', '\n', '\n\\[ \\begin{align}\\begin{aligned}    output[i] = (input[i] - m\\ :sub:`i`\\ ) / s\\ :sub:`i`\\\\If mean or std is scalar, the same value will be applied to all channels.\\\\Default value for mean is 0.0 and stand deviation is 1.0.\\end{aligned}\\end{align} \\]', '\n', 'Example', '\n', 'Defined in src/operator/image/image_random.cc:L167', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.image.random_brightness(data=None, min_factor=_Null, max_factor=_Null, out=None, name=None, **kwargs)Â¶","['Defined in src/operator/image/image_random.cc:L215', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.image.random_color_jitter(data=None, brightness=_Null, contrast=_Null, saturation=_Null, hue=_Null, out=None, name=None, **kwargs)Â¶","['Defined in src/operator/image/image_random.cc:L246', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.image.random_contrast(data=None, min_factor=_Null, max_factor=_Null, out=None, name=None, **kwargs)Â¶","['Defined in src/operator/image/image_random.cc:L222', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.image.random_flip_left_right(data=None, out=None, name=None, **kwargs)Â¶","['Defined in src/operator/image/image_random.cc:L200', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.image.random_flip_top_bottom(data=None, out=None, name=None, **kwargs)Â¶","['Defined in src/operator/image/image_random.cc:L210', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.image.random_hue(data=None, min_factor=_Null, max_factor=_Null, out=None, name=None, **kwargs)Â¶","['Defined in src/operator/image/image_random.cc:L238', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.image.random_lighting(data=None, alpha_std=_Null, out=None, name=None, **kwargs)Â¶","['Randomly add PCA noise. Follow the AlexNet style.', '\n', 'Defined in src/operator/image/image_random.cc:L262', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.image.random_saturation(data=None, min_factor=_Null, max_factor=_Null, out=None, name=None, **kwargs)Â¶","['Defined in src/operator/image/image_random.cc:L230', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.image.resize(data=None, size=_Null, keep_ratio=_Null, interp=_Null, out=None, name=None, **kwargs)Â¶","['Resize an image NDArray of shape (H x W x C) or (N x H x W x C)\nto the given size\n.. rubric:: Example', '\n', 'Defined in src/operator/image/resize.cc:L70', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.image.to_tensor(data=None, out=None, name=None, **kwargs)Â¶","['Converts an image NDArray of shape (H x W x C) or (N x H x W x C)\nwith values in the range [0, 255] to a tensor NDArray of shape (C x H x W) or (N x C x H x W)\nwith values in the range [0, 1]', '\n', 'Example', '\n', 'Defined in src/operator/image/image_random.cc:L92', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.det(A=None, out=None, name=None, **kwargs)Â¶","['Compute the determinant of a matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', ', 'A', ' is a square matrix. We compute:', '\n', '\n', 'out', '\n', 'If ', 'n>2', ', ', 'det', ' is performed separately on the trailing two dimensions\nfor all inputs (batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', '\n', 'Note', '\n', 'There is no gradient backwarded when A is non-invertible (which is\nequivalent to det(A) = 0) because zero is rarely hit upon in float\npoint computation and the Jacobiâ\x80\x99s formula on determinant gradient\nis not computationally efficient when A is non-invertible.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L974', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.extractdiag(A=None, offset=_Null, out=None, name=None, **kwargs)Â¶","['Extracts the diagonal entries of a square matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', then ', 'A', ' represents a single square matrix which diagonal elements get extracted as a 1-dimensional tensor.', '\n', 'If ', 'n>2', ', then ', 'A', ' represents a batch of square matrices on the trailing two dimensions. The extracted diagonals are returned as an ', 'n-1', '-dimensional tensor.', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L494', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.extracttrian(A=None, offset=_Null, lower=_Null, out=None, name=None, **kwargs)Â¶","['Extracts a triangular sub-matrix from a square matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', then ', 'A', ' represents a single square matrix from which a triangular sub-matrix is extracted as a 1-dimensional tensor.', '\n', 'If ', 'n>2', ', then ', 'A', ' represents a batch of square matrices on the trailing two dimensions. The extracted triangular sub-matrices are returned as an ', 'n-1', '-dimensional tensor.', '\n', 'The ', 'offset', ' and ', 'lower', ' parameters determine the triangle to be extracted:', '\n', '\n', 'When ', '\n', 'When ', '\n', 'When ', '\n', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L604', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.gelqf(A=None, out=None, name=None, **kwargs)Â¶","['LQ factorization for general matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', we compute the LQ factorization (LAPACK ', 'gelqf', ', followed by ', 'orglq', '). ', 'A', '\nmust have shape ', '(x, y)', ' with ', 'x <= y', ', and must have full rank ', '=x', '. The LQ\nfactorization consists of ', 'L', ' with shape ', '(x, x)', ' and ', 'Q', ' with shape ', '(x, y)', ', so\nthat:', '\n', '\n', 'A', '\n', 'Here, ', 'L', ' is lower triangular (upper triangle equal to zero) with nonzero diagonal,\nand ', 'Q', ' is row-orthonormal, meaning that', '\n', '\n', 'Q', '\n', 'is equal to the identity matrix of shape ', '(x, x)', '.', '\n', 'If ', 'n>2', ', ', 'gelqf', ' is performed separately on the trailing two dimensions for all\ninputs (batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L797', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.gemm(A=None, B=None, C=None, transpose_a=_Null, transpose_b=_Null, alpha=_Null, beta=_Null, axis=_Null, out=None, name=None, **kwargs)Â¶","['Performs general matrix multiplication and accumulation.\nInput are tensors ', 'A', ', ', 'B', ', ', 'C', ', each of dimension ', 'n >= 2', ' and having the same shape\non the leading ', 'n-2', ' dimensions.', '\n', 'If ', 'n=2', ', the BLAS3 function ', 'gemm', ' is performed:', '\n', '\n', 'out', '\n', 'Here, ', 'alpha', ' and ', 'beta', ' are scalar parameters, and ', 'op()', ' is either the identity or\nmatrix transposition (depending on ', 'transpose_a', ', ', 'transpose_b', ').', '\n', 'If ', 'n>2', ', ', 'gemm', ' is performed separately for a batch of matrices. The column indices of the matrices\nare given by the last dimensions of the tensors, the row indices by the axis specified with the ', 'axis', '\nparameter. By default, the trailing two dimensions will be used for matrix encoding.', '\n', 'For a non-default axis parameter, the operation performed is equivalent to a series of swapaxes/gemm/swapaxes\ncalls. For example let ', 'A', ', ', 'B', ', ', 'C', ' be 5 dimensional tensors. Then gemm(', 'A', ', ', 'B', ', ', 'C', ', axis=1) is equivalent\nto the following without the overhead of the additional swapaxis operations:', '\n', None, '\n', '\n', 'When the input data is of type float32 and the environment variables MXNET_CUDA_ALLOW_TENSOR_CORE\nand MXNET_CUDA_TENSOR_OP_MATH_ALLOW_CONVERSION are set to 1, this operator will try to use\npseudo-float16 precision (float32 math with float16 I/O) precision in order to use\nTensor Cores on suitable NVIDIA GPUs. This can sometimes give significant speedups.', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L88', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.gemm2(A=None, B=None, transpose_a=_Null, transpose_b=_Null, alpha=_Null, axis=_Null, out=None, name=None, **kwargs)Â¶","['Performs general matrix multiplication.\nInput are tensors ', 'A', ', ', 'B', ', each of dimension ', 'n >= 2', ' and having the same shape\non the leading ', 'n-2', ' dimensions.', '\n', 'If ', 'n=2', ', the BLAS3 function ', 'gemm', ' is performed:', '\n', '\n', 'out', '\n', 'Here ', 'alpha', ' is a scalar parameter and ', 'op()', ' is either the identity or the matrix\ntransposition (depending on ', 'transpose_a', ', ', 'transpose_b', ').', '\n', 'If ', 'n>2', ', ', 'gemm', ' is performed separately for a batch of matrices. The column indices of the matrices\nare given by the last dimensions of the tensors, the row indices by the axis specified with the ', 'axis', '\nparameter. By default, the trailing two dimensions will be used for matrix encoding.', '\n', 'For a non-default axis parameter, the operation performed is equivalent to a series of swapaxes/gemm/swapaxes\ncalls. For example let ', 'A', ', ', 'B', ' be 5 dimensional tensors. Then gemm(', 'A', ', ', 'B', ', axis=1) is equivalent to\nthe following without the overhead of the additional swapaxis operations:', '\n', None, '\n', '\n', 'When the input data is of type float32 and the environment variables MXNET_CUDA_ALLOW_TENSOR_CORE\nand MXNET_CUDA_TENSOR_OP_MATH_ALLOW_CONVERSION are set to 1, this operator will try to use\npseudo-float16 precision (float32 math with float16 I/O) precision in order to use\nTensor Cores on suitable NVIDIA GPUs. This can sometimes give significant speedups.', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L162', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.inverse(A=None, out=None, name=None, **kwargs)Â¶","['Compute the inverse of a matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', ', 'A', ' is a square matrix. We compute:', '\n', '\n', 'out', '\n', 'If ', 'n>2', ', ', 'inverse', ' is performed separately on the trailing two dimensions\nfor all inputs (batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L919', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.makediag(A=None, offset=_Null, out=None, name=None, **kwargs)Â¶","['Constructs a square matrix with the input as diagonal.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 1', '.', '\n', 'If ', 'n=1', ', then ', 'A', ' represents the diagonal entries of a single square matrix. This matrix will be returned as a 2-dimensional tensor.\nIf ', 'n>1', ', then ', 'A', ' represents a batch of diagonals of square matrices. The batch of diagonal matrices will be returned as an ', 'n+1', '-dimensional tensor.', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L546', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.maketrian(A=None, offset=_Null, lower=_Null, out=None, name=None, **kwargs)Â¶","['Constructs a square matrix with the input representing a specific triangular sub-matrix.\nThis is basically the inverse of ', 'linalg.extracttrian', '. Input is a tensor ', 'A', ' of dimension ', 'n >= 1', '.', '\n', 'If ', 'n=1', ', then ', 'A', ' represents the entries of a triangular matrix which is lower triangular if ', 'offset<0', ' or ', 'offset=0', ', ', 'lower=true', '. The resulting matrix is derived by first constructing the square\nmatrix with the entries outside the triangle set to zero and then adding ', 'offset', '-times an additional\ndiagonal with zero entries to the square matrix.', '\n', 'If ', 'n>1', ', then ', 'A', ' represents a batch of triangular sub-matrices. The batch of corresponding square matrices is returned as an ', 'n+1', '-dimensional tensor.', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L672', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.potrf(A=None, out=None, name=None, **kwargs)Â¶","['Performs Cholesky factorization of a symmetric positive-definite matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', the Cholesky factor ', 'B', ' of the symmetric, positive definite matrix ', 'A', ' is\ncomputed. ', 'B', ' is triangular (entries of upper or lower triangle are all zero), has\npositive diagonal entries, and:', '\n', '\n', 'A', '\n', 'If ', 'n>2', ', ', 'potrf', ' is performed separately on the trailing two dimensions for all inputs\n(batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L213', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.potri(A=None, out=None, name=None, **kwargs)Â¶","['Performs matrix inversion from a Cholesky factorization.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', ', 'A', ' is a triangular matrix (entries of upper or lower triangle are all zero)\nwith positive diagonal. We compute:', '\n', '\n', 'out', '\n', 'In other words, if ', 'A', ' is the Cholesky factor of a symmetric positive definite matrix\n', 'B', ' (obtained by ', 'potrf', '), then', '\n', '\n', 'out', '\n', 'If ', 'n>2', ', ', 'potri', ' is performed separately on the trailing two dimensions for all inputs\n(batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', '\n', 'Note', '\n', 'Use this operator only if you are certain you need the inverse of ', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L274', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.slogdet(A=None, out=None, name=None, **kwargs)Â¶","['Compute the sign and log of the determinant of a matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', ', 'A', ' is a square matrix. We compute:', '\n', '\n', 'sign', '\n', 'If ', 'n>2', ', ', 'slogdet', ' is performed separately on the trailing two dimensions\nfor all inputs (batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', '\n', 'Note', '\n', 'The gradient is not properly defined on sign, so the gradient of\nit is not backwarded.', '\n', '\n', '\n', 'Note', '\n', 'No gradient is backwarded when A is non-invertible. Please see\nthe docs of operator det for detail.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L1033', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.sumlogdiag(A=None, out=None, name=None, **kwargs)Â¶","['Computes the sum of the logarithms of the diagonal elements of a square matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', ', 'A', ' must be square with positive diagonal entries. We sum the natural\nlogarithms of the diagonal elements, the result has shape (1,).', '\n', 'If ', 'n>2', ', ', 'sumlogdiag', ' is performed separately on the trailing two dimensions for all\ninputs (batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L444', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.syevd(A=None, out=None, name=None, **kwargs)Â¶","['Eigendecomposition for symmetric matrix.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', ', 'A', ' must be symmetric, of shape ', '(x, x)', '. We compute the eigendecomposition,\nresulting in the orthonormal matrix ', 'U', ' of eigenvectors, shape ', '(x, x)', ', and the\nvector ', 'L', ' of eigenvalues, shape ', '(x,)', ', so that:', '\n', '\n', 'U', '\n', 'Here:', '\n', '\n', 'U', '\n', 'where ', 'I', ' is the identity matrix. Also, ', 'L(0) <= L(1) <= L(2) <= â\x80¦', ' (ascending order).', '\n', 'If ', 'n>2', ', ', 'syevd', ' is performed separately on the trailing two dimensions of ', 'A', ' (batch\nmode). In this case, ', 'U', ' has ', 'n', ' dimensions like ', 'A', ', and ', 'L', ' has ', 'n-1', ' dimensions.', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', '\n', 'Note', '\n', 'Derivatives for this operator are defined only if ', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L867', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.syrk(A=None, transpose=_Null, alpha=_Null, out=None, name=None, **kwargs)Â¶","['Multiplication of matrix with its transpose.\nInput is a tensor ', 'A', ' of dimension ', 'n >= 2', '.', '\n', 'If ', 'n=2', ', the operator performs the BLAS3 function ', 'syrk', ':', '\n', '\n', 'out', '\n', 'if ', 'transpose=False', ', or', '\n', '\n', 'out', '\n', 'if ', 'transpose=True', '.', '\n', 'If ', 'n>2', ', ', 'syrk', ' is performed separately on the trailing two dimensions for all\ninputs (batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L729', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.trmm(A=None, B=None, transpose=_Null, rightside=_Null, lower=_Null, alpha=_Null, out=None, name=None, **kwargs)Â¶","['Performs multiplication with a lower triangular matrix.\nInput are tensors ', 'A', ', ', 'B', ', each of dimension ', 'n >= 2', ' and having the same shape\non the leading ', 'n-2', ' dimensions.', '\n', 'If ', 'n=2', ', ', 'A', ' must be triangular. The operator performs the BLAS3 function\n', 'trmm', ':', '\n', '\n', 'out', '\n', 'if ', 'rightside=False', ', or', '\n', '\n', 'out', '\n', 'if ', 'rightside=True', '. Here, ', 'alpha', ' is a scalar parameter, and ', 'op()', ' is either the\nidentity or the matrix transposition (depending on ', 'transpose', ').', '\n', 'If ', 'n>2', ', ', 'trmm', ' is performed separately on the trailing two dimensions for all inputs\n(batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L332', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
"
mxnet.ndarray.linalg.trsm(A=None, B=None, transpose=_Null, rightside=_Null, lower=_Null, alpha=_Null, out=None, name=None, **kwargs)Â¶","['Solves matrix equation involving a lower triangular matrix.\nInput are tensors ', 'A', ', ', 'B', ', each of dimension ', 'n >= 2', ' and having the same shape\non the leading ', 'n-2', ' dimensions.', '\n', 'If ', 'n=2', ', ', 'A', ' must be triangular. The operator performs the BLAS3 function\n', 'trsm', ', solving for ', 'out', ' in:', '\n', '\n', 'op', '\n', 'if ', 'rightside=False', ', or', '\n', '\n', 'out', '\n', 'if ', 'rightside=True', '. Here, ', 'alpha', ' is a scalar parameter, and ', 'op()', ' is either the\nidentity or the matrix transposition (depending on ', 'transpose', ').', '\n', 'If ', 'n>2', ', ', 'trsm', ' is performed separately on the trailing two dimensions for all inputs\n(batch mode).', '\n', '\n', 'Note', '\n', 'The operator supports float32 and float64 data types only.', '\n', '\n', 'Examples:', '\n', None, '\n', '\n', 'Defined in src/operator/tensor/la_op.cc:L395', '\n', '\n', 'Parameters', '\n', '\n', '\n', 'Returns', '\n', 'out', '\n', 'Return type', '\n', 'NDArray', '\n', '\n', '\n']"
