"
mxnet.ndarray.Custom(*data, **kwargs)Â¶"
"
mxnet.ndarray.elemwise_add(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶"
"
mxnet.ndarray.op.Custom(*data, **kwargs)Â¶"
"
mxnet.ndarray.op.elemwise_add(lhs=None, rhs=None, out=None, name=None, **kwargs)Â¶"
"
mxnet.ndarray.sparse.csr_matrix(arg1, shape=None, ctx=None, dtype=None)[source]Â¶"
"
class mxnet.ndarray.sparse.CSRNDArray(handle, writable=True)[source]Â¶"
"
class mxnet.gluon.loss.CTCLoss(layout='NTC', label_layout='NT', weight=None, **kwargs)[source]Â¶"
"
class mxnet.initializer.Mixed(patterns, initializers)[source]Â¶"
"
class mxnet.initializer.Normal(sigma=0.01)[source]Â¶"
"
class mxnet.initializer.One[source]Â¶"
"
class mxnet.initializer.Uniform(scale=0.07)[source]Â¶"
"
class mxnet.initializer.Zero[source]Â¶"
"
mxnet.initializer.register(klass)[source]Â¶"
"
mxnet.metric.np(numpy_feval, name=None, allow_extra_outputs=False)[source]Â¶"
"
mxnet.symbol.var(name, attr=None, shape=None, lr_mult=None, wd_mult=None, dtype=None, init=None, stype=None, **kwargs)[source]Â¶"
"
mxnet.symbol.Variable(name, attr=None, shape=None, lr_mult=None, wd_mult=None, dtype=None, init=None, stype=None, **kwargs)Â¶"
"
mxnet.symbol.Group(symbols, create_fn=<class 'mxnet.symbol.symbol.Symbol'>)[source]Â¶"
"
class mxnet.callback.Speedometer(batch_size, frequent=50, auto_reset=True)[source]Â¶"
"
mxnet.callback.do_checkpoint(prefix, period=1)[source]Â¶"
"
mxnet.image.center_crop(src, size, interp=2)[source]Â¶"
"
mxnet.image.imdecode(buf, *args, **kwargs)[source]Â¶"
"
mxnet.image.imread(filename, *args, **kwargs)[source]Â¶"
"
mxnet.image.imresize(src, w, h, *args, **kwargs)[source]Â¶"
"
mxnet.image.random_crop(src, size, interp=2)[source]Â¶"
"
mxnet.image.resize_short(src, size, interp=2)[source]Â¶"
"
mxnet.image.scale_down(src_size, size)[source]Â¶"
"
mxnet.random.seed(seed_state, ctx='all')[source]Â¶"
"
mxnet.test_utils.check_symbolic_backward(sym, location, out_grads, expected, rtol=None, atol=None, aux_states=None, grad_req='write', ctx=None, grad_stypes=None, equal_nan=False, dtype=<class 'numpy.float32'>)[source]Â¶"
"
mxnet.test_utils.check_symbolic_forward(sym, location, expected, rtol=None, atol=None, aux_states=None, ctx=None, equal_nan=False, dtype=<class 'numpy.float32'>)[source]Â¶"
"
mxnet.util.is_np_shape()[source]Â¶"
"
mxnet.util.set_np_shape(active)[source]Â¶"
"
mxnet.visualization.plot_network(symbol, title='plot', save_format='pdf', shape=None, dtype=None, node_attrs={}, hide_weights=True)[source]Â¶"
